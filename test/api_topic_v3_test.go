/*
Confluent Cloud APIs

Testing TopicV3ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/shono-io/shono-ccloud"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_TopicV3ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TopicV3ApiService CreateKafkaTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.TopicV3Api.CreateKafkaTopic(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicV3ApiService DeleteKafkaTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var topicName string

		httpRes, err := apiClient.TopicV3Api.DeleteKafkaTopic(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicV3ApiService GetKafkaTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var topicName string

		resp, httpRes, err := apiClient.TopicV3Api.GetKafkaTopic(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicV3ApiService ListKafkaTopics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.TopicV3Api.ListKafkaTopics(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TopicV3ApiService UpdatePartitionCountKafkaTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var topicName string

		resp, httpRes, err := apiClient.TopicV3Api.UpdatePartitionCountKafkaTopic(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
