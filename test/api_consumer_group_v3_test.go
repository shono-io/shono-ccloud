/*
Confluent Cloud APIs

Testing ConsumerGroupV3ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ConsumerGroupV3ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConsumerGroupV3ApiService GetKafkaConsumer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string
		var consumerId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.GetKafkaConsumer(context.Background(), clusterId, consumerGroupId, consumerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService GetKafkaConsumerGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.GetKafkaConsumerGroup(context.Background(), clusterId, consumerGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService GetKafkaConsumerGroupLagSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.GetKafkaConsumerGroupLagSummary(context.Background(), clusterId, consumerGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService GetKafkaConsumerLag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string
		var topicName string
		var partitionId int32

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.GetKafkaConsumerLag(context.Background(), clusterId, consumerGroupId, topicName, partitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService ListKafkaConsumerGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.ListKafkaConsumerGroups(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService ListKafkaConsumerLags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.ListKafkaConsumerLags(context.Background(), clusterId, consumerGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumerGroupV3ApiService ListKafkaConsumers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var consumerGroupId string

		resp, httpRes, err := apiClient.ConsumerGroupV3Api.ListKafkaConsumers(context.Background(), clusterId, consumerGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
