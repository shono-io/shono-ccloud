/*
Confluent Cloud APIs

Testing ConfigsV3ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ConfigsV3ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigsV3ApiService DeleteKafkaClusterConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var name string

		httpRes, err := apiClient.ConfigsV3Api.DeleteKafkaClusterConfig(context.Background(), clusterId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService DeleteKafkaTopicConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string
		var name string

		httpRes, err := apiClient.ConfigsV3Api.DeleteKafkaTopicConfig(context.Background(), clusterId, topicName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService GetKafkaClusterConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var name string

		resp, httpRes, err := apiClient.ConfigsV3Api.GetKafkaClusterConfig(context.Background(), clusterId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService GetKafkaTopicConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string
		var name string

		resp, httpRes, err := apiClient.ConfigsV3Api.GetKafkaTopicConfig(context.Background(), clusterId, topicName, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService ListKafkaAllTopicConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ConfigsV3Api.ListKafkaAllTopicConfigs(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService ListKafkaClusterConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ConfigsV3Api.ListKafkaClusterConfigs(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService ListKafkaDefaultTopicConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string

		resp, httpRes, err := apiClient.ConfigsV3Api.ListKafkaDefaultTopicConfigs(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService ListKafkaTopicConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string

		resp, httpRes, err := apiClient.ConfigsV3Api.ListKafkaTopicConfigs(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService UpdateKafkaClusterConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var name string

		httpRes, err := apiClient.ConfigsV3Api.UpdateKafkaClusterConfig(context.Background(), clusterId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService UpdateKafkaClusterConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		httpRes, err := apiClient.ConfigsV3Api.UpdateKafkaClusterConfigs(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService UpdateKafkaTopicConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string
		var name string

		httpRes, err := apiClient.ConfigsV3Api.UpdateKafkaTopicConfig(context.Background(), clusterId, topicName, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsV3ApiService UpdateKafkaTopicConfigBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var topicName string

		httpRes, err := apiClient.ConfigsV3Api.UpdateKafkaTopicConfigBatch(context.Background(), clusterId, topicName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
