openapi: 3.0.0
info:
  contact:
    email: support@confluent.io
    name: Confluent Cloud
    url: https://www.confluent.io/cloud-contact-us/
  description: "# Introduction\n\n<div class=\"status-info\">\n<p class=\"status-info-title\"\
    >Note</p>\nThis documents the collection of Confluent Cloud APIs. Each API documents\
    \ its\n<a href=\"#section/Versioning/API-Lifecycle-Policy\">lifecycle phase</a>.\
    \ APIs\nmarked as Early Access or Preview are not ready for production usage.\
    \ We're currently\nworking with a select group of customers to get feedback and\
    \ iterate on these APIs.\n</div>\n\nConfluent Cloud APIs are a core building block\
    \ of Confluent Cloud. You can use the APIs to\nmanage your own account or to integrate\
    \ Confluent into your product.\n\nMost of the APIs are organized around\n<a href=\"\
    http://en.wikipedia.org/wiki/Representational_State_Transfer\" target=\"_blank\"\
    >REST</a>\nand the resources which make up Confluent Cloud. The APIs have predictable\n\
    resource-oriented URLs, transport data using JSON, and use standard HTTP verbs,\n\
    response codes, authentication, and design principles.\n\n# Object Model\n\n<div\
    \ class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis section\
    \ describes the object model for many Confluent Cloud APIs, but not all.\nThe\
    \ Connect v1 API group has a different object model. You can review the example\n\
    request and response bodies in <a href=\"#tag/Connectors-(v1)\">Connect v1 API</a>\n\
    to see its object model.\n</div>\n\nConfluent Cloud APIs are primarily designed\
    \ to be declarative and intent-oriented. In other words, \ntell the API what you\
    \ want (for example, throughput or SLOs) and it will figure out how to make it\
    \ happen \n(for example, cluster sizing). A Confluent object acts as a \"record\
    \ of intent\" — after you create the\nobject, Confluent Cloud will work tirelessly\
    \ in the background to ensure that the object exists\nas specified.\n\nConfluent\
    \ APIs represent objects in JSON with media-type `application/json`.\n\nMany objects\
    \ follow a model consisting of `spec` and `status`. An object's `spec` tells\n\
    Confluent the _desired state_ (specification) of the resource. The object may\
    \ not be\nimmediately available or changes may not be immediately applied. For\
    \ this reason,\nmany objects also have a\_`status` property that provides info\
    \ about the\n_current state_ of the resource. Confluent Cloud is continuously\
    \ and actively managing\neach resource's current state to match it's desired state.\n\
    \nAll Confluent objects share a set of common properties:\n\n* **api_version**\_\
    –\_API objects have an `api_version`\_field indicating their API version.\n* **kind**\_\
    –\_API objects have a\_`kind`\_field indicating the kind of\_object it is.\n*\
    \ **id** –\_Each object in the API will have an identifier, indicated via its\_\
    `id` field,\n  and should be treated as an opaque string unless otherwise specified.\n\
    \nThere are a number of other [standard properties](#standard-properties) and\
    \ that you'll encounter\nused by many API objects. And of course, objects have\
    \ plenty of non-standard fields that are\nspecific to each object _kind_... this\
    \ is what makes them interesting!\n\n# Authentication\n\nConfluent uses API keys\
    \ and Java Web Tokens (JWTs) to integrate your applications\nand workflows to\
    \ your Confluent Cloud resources using the Confluent Cloud REST APIs.\nYour applications\
    \ and workflows must be authenticated and authorized in order to\naccess and manage\
    \ Confluent Cloud resources.\n\n## API keys\n\nYou can create and manage your\
    \ API keys using the Confluent Cloud Console or\nConfluent CLI. For more information,\
    \ see [Use API Keys to Control Access in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/api-keys/api-keys.html).\n\
    \nConfluent Cloud uses the following two categories of API keys:\n\n* A **Cloud\
    \ API key** grants access to the Confluent Cloud Management APIs,\n  such as for\
    \ Provisioning and Metrics integrations.\n* A **resource-specific API key** grants\
    \ access to a Confluent Kafka cluster\n  (Kafka API key), a Confluent Cloud Schema\
    \ Registry (Schema Registry API key),\n  or a ksqlDB application.\n\nEach Confluent\
    \ Cloud API key is associated with a principal (specific user or\nservice account)\
    \ and inherits the permissions granted to the owner.\n\n* For example, if service\
    \ account `Armageddon` is granted ACLs on Kafka cluster\n  `neptune`, then a Kafka\
    \ API Key for `neptune` owned by `Armageddon` will have\n  these ACLs enforced.\n\
    * **Note:** API keys are automatically deleted when the associated user or service\n\
    \  account is deleted (for example, when an employee leaves the company or moves\
    \ to\n  a new department and an SSO integration removes the Confluent Cloud user\
    \ as they\n  no longer require access).\n* Confluent **strongly recommends** that\
    \ you use service accounts for all\n  production-critical access.\n\nConfluent\
    \ Cloud API keys grant access to Confluent Cloud resources, so **keep them secure**!\n\
    Do not share your API keys and secrets in publicly-accessible locations, such\
    \ as \nGitHub or client-side code.\n\nAll API requests must be made over HTTPS.\
    \ Calls made over plain HTTP will fail.\nAPI requests without authentication will\
    \ also fail.\n\nTo use an API key, you must send it in an `Authorization: Basic\
    \ {credentials}` header.\nRemember that HTTP Basic authentication requires you\
    \ to provide your credentials as\nthe API key ID and associated API secret separated\
    \ by a colon and encoded using Base64\nformat. For example, if your API key ID\
    \ is `ABCDEFGH123456789` and the API key Secret \nis `XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO`,\
    \ then the authorization header is:\n\n```text​\nAuthorization: Basic QUJDREVGR0gxMjM0NTY3ODk6WE5DSVc5M0kyTDFTUVBKU0o4MjNLMUxTOTAyS0xERk1DWlBXRU8=\n\
    ```\n\nYou can generate this header example from the API key:\n\nmacOS:\n\n```shell\n\
    $ echo -n \"ABCDEFGH123456789:XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO\" | base64\n\
    \n```\n\nLinux:\n\n```shell\n$ echo -n \"ABCDEFGH123456789:XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO\"\
    \ | base64 -w 0\n```\n\n## External OAuth\n\nYou can use [OAuth/OIDC support for\
    \ Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html)\n\
    to authenticate and authorize access to applications and workloads for the\nfollowing\
    \ Confluent Cloud REST APIs:\n\n* **Kafka REST API**: [Kafka REST API for Clusters(V3)](https://docs.confluent.io/cloud/current/api.html#tag/Cluster-(v3)).\n\
    \  For an API overview and examples, see [Cluster Management with Kafka REST API](https://docs.confluent.io/cloud/current/kafka-rest/kafka-rest-cc.html).\n\
    * **Schema Registry REST API**: [Schema Registry REST API for Schemas(V1)](https://docs.confluent.io/cloud/current/api.html#tag/Schemas-(v1))\n\
    \  and [Subjects](https://docs.confluent.io/cloud/current/api.html#tag/Subjects-(v1)).\n\
    \  For an API overview and examples, see [Schema Registry REST API for Confluent\
    \ Cloud](https://docs.confluent.io/cloud/current/sr/sr-rest-apis.html).\n\n##\
    \ Confluent STS tokens\n\nConfluent Security Token Service (STS) issues access\
    \ tokens (`confluent-sts-access-token`)\nby exchanging an external token for a\
    \ `confluent-sts-access-token`. You can use\nConfluent STS tokens to authenticate\
    \ to Confluent Cloud APIs that support the\n`confluent-sts-access-token` notation.\n\
    \nTo find out an API operation supports Confluent STS tokens, look in the **AUTHORIZATIONS**\n\
    listing for `confluent-sts-access-token`.\n\n## Partner OAuth\n\nApproved partners\
    \ can fetch Partner tokens (`oauth`) that validate their identity\nand grant access\
    \ to the Partner API (`partner/v2`), which lets them sign up\nan organization\
    \ on behalf of a customer, manage entitlements (create, read, and list),\nand\
    \ read or list organizations they have signed up.\n\n<!-- TODO: port this back\
    \ to the Confluent API Design Guide -->\n\n<SecurityDefinitions />\n\n# Errors\n\
    \n<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis section\
    \ describes the structure of error responses for many Confluent Cloud APIs, but\
    \ not all.\nThe Connect v1 API group has a different set of structures for error\
    \ responses. Please review the example\nrequest and response bodies in the Connect\
    \ v1 API documentation <a href=\"#tag/Connectors-(v1)\">below</a>\nto see its\
    \ error behaviour.\n</div>\n\nConfluent uses conventional [HTTP status codes](#section/HTTP-Guidelines/Status-Codes)\
    \ to\nindicate the success or failure of an API request.\n\nFailures follow a\
    \ standard model to tell you about what went wrong. They may include\none or more\
    \ error objects with the following fields:\n\n| Field      | Type    | Description\n\
    |------------|---------|--------------------------------------\n| id*        |\
    \ UUID    | A unique identifier for this particular occurrence of the problem.\n\
    | status     | String  | The HTTP status code applicable to this problem.\n| code\
    \       | String  | An application-specific error code.\n| title      | String\
    \  | A short, human-readable summary of the problem that **should not** change\
    \ from occurrence to occurrence of the problem, except for purposes of localization.\n\
    | detail*    | String  | A human-readable explanation specific to this occurrence\
    \ of the problem. Like title, this field’s value can be localized.\n| source \
    \    | Object  | An object that references the source of the error, and optionally\
    \ includes any of the following members:\n| &nbsp;&nbsp;pointer   | String  |\
    \ A <a href=\"https://tools.ietf.org/html/rfc6901\" target=\"_blank\">JSON Pointer</a>\
    \ to the associated entity in the request document (e.g. `\"/spec/title\"` for\
    \ a specific attribute).\n| &nbsp;&nbsp;parameter | String  | A string indicating\
    \ which URI query parameter caused the error.\n| meta       | Object  | A meta\
    \ object that contains non-standard meta-information about the error.\n| resolution\
    \ | String  | Instructions for the end-user for correcting the error.\n\n\\* indicates\
    \ a required field\n\nAll errors include an `id` and some `detail` message. The\
    \ `id` is a unique identifier — use it\nwhen you're working with Confluent support\
    \ to debug a problem with a specific API call. The\n`detail` describes what went\
    \ wrong.\n\nSome errors that could be handled programmatically (e.g., a Kafka\
    \ cluster config is invalid)\nmay include an error `code` that briefly explains\
    \ the error reported.\n\nValidation issues and similar errors include a `source`\
    \ which tells you exactly\nwhat in the request was responsible for the error.\n\
    \nFor example, a failure may look like\n\n    {\n      \"errors\": [{\n      \
    \  \"status\": \"422\",\n        \"code\": \"invalid_configuration\",\n      \
    \  \"id\": \"30ce6058-87da-11e4-b116-123b93f75cba\",\n        \"title\": \"The\
    \ Kafka cluster configuration is invalid\",\n        \"detail\": \"The property\
    \ '/cluster/storage_size' of type string did not match the following type: integer\"\
    ,\n        \"source\": {\n          \"pointer\": \"/cluster/storage_size\"\n \
    \       }\n      }]\n    }\n\nIf a request fails validation, it will return an\
    \ HTTP `422 Unprocessable Entity`\nwith a list of fields that failed validation.\n\
    \n# Pagination\n\n<div class=\"status-info\">\n<p class=\"status-info-title\"\
    >Note</p>\nThis section describes the pagination behavior of “list” operations\
    \ for many Confluent Cloud APIs, but not all.\nThe Connect v1 API list operations\
    \ do not support pagination.\n</div>\n\nAll API resources have support for bulk\
    \ reads via \"list\" API operations. For example,\nyou can \"list Kafka clusters\"\
    , \"list api keys\", and \"list environments\". These \"list\"\noperations require\
    \ pagination; by requesting smaller subsets of data, API clients\nreceive a response\
    \ much faster than requesting the entire, potentially large, data set.\n\nAll\
    \ \"list\" operations follow the same pattern with the following parameters:\n\
    \n* `page_size` –  client-provided max number of items per page, only valid on\
    \ the first request.\n* `page_token` –  server-generated token used for traversing\
    \ through the result set.\n\nA paginated response may include any of the following\
    \ pagination links. API clients may\nfollow the respective link to page forward\
    \ or backward through the result set as desired.\n\n| [Link Relation](https://www.iana.org/assignments/link-relations/link-relations.xml)\
    \ | Description\n|---------|---------------------------------------\n| `next`\
    \  | A link to the next page of results. A response that does not contain a next\
    \ link does not have further data to fetch.\n| `prev`  | A link to the previous\
    \ page of results. A response that does not contain a prev link has no previous\
    \ data. This link is **optional** for collections that cannot be traversed backward.\n\
    | `first` | A link to the first page of results. This link is **optional** for\
    \ collections that cannot be indexed directly to a given page.\n| `last`  | A\
    \ link to the last page of results. This link is **optional** for collections\
    \ that cannot be indexed directly to a given page.\n\nAPI clients must treat pagination\
    \ links and the `page_token` parameter in particular as an opaque string. \n\n\
    An example paginated list response may look like\n```\n{\n    \"api_version\"\
    : \"v2\",\n    \"kind\": \"KafkaClusterList\",\n    \"metadata\": {\n        \"\
    next\": \"https://api.confluent.cloud/kafka-clusters?page_token=ABCDEFGHIJKLMNOP1234567890\"\
    \n    }\n    \"data\": [\n        {\n            \"metadata\": {\n           \
    \     \"id\": \"lkc-abc123\",\n                \"self\": \"https://api.confluent.cloud/kafka-clusters/lkc-abc123\"\
    ,\n                \"resource_name\": \"crn://confluent.cloud/kafka=lkc-abc123\"\
    ,\n            }\n            \"spec\": {\n                \"display_name\": \"\
    My Kafka Cluster\",\n                <snip>\n            },\n            \"status\"\
    : {\n                \"phase\": \"RUNNING\",\n                <snip>\n       \
    \     }\n        },\n        <snip>\n    ]\n}\n```\n\n# Rate Limiting\n\nTo protect\
    \ the stability of the API and keep it available to all users, Confluent employs\n\
    multiple safeguards. If you send too many requests in quick succession or perform\
    \ too many\nconcurrent operations, you may be throttled or have your request rejected\
    \ with an error.\n\nWhen a rate limit is breached, an HTTP `429 Too Many Requests`\
    \ error is returned.\n<!-- with\nthe following header:\n\n| Header           \
    \       | Description\n|-------------------------|----------------------------------------\n\
    | `Retry-After`           | The number of seconds to wait until the rate limit\
    \ window resets. Only sent when the rate limit is reached.\n\n-->\n<!-- TODO make\
    \ this true\n\nConfluent enforces multiple kinds of limits, including request\
    \ rate and concurrency limits, both\nper user and organization wide. Unauthenticated\
    \ requests are associated with the originating\nIP address, and not the user making\
    \ requests.\n\n-->\n\nIntegrations should gracefully handle these limits by watching\
    \ for `429` error responses and\nbuilding in a retry mechanism. This mechanism\
    \ should follow a capped exponential backoff policy to\nprevent [retry amplification](https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/)\n\
    (\"retry storms\") and also introduce some randomness (\"jitter\") to avoid the\n\
    [thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\
    \n\nIf you’re running into this error and think you need a higher rate limit,\
    \ contact Confluent at\n[support@confluent.io](mailto:support@confluent.io).\n\
    \n# Identifiers and URLs\n\nMost resources have multiple identifiers:\n* `id`\
    \ is the \"natural identifier\" for an object. It is only unique within its parent\
    \ resource.\n  The `id` is unique across time: the ID will not be reclaimed and\
    \ reused after an object is deleted.\n* `resource_name` is a Uniform Resource\
    \ Identifier (URI) that is globally unique across all resources.\n  This encompasses\
    \ all parent resource `kind`s and `id`s necessary to uniquely identify a particular\n\
    \  instance of this object `kind`. Because it uses object `id`s, the CRN will\
    \ not be reclaimed and\n  reused after an object is deleted. It is represented\
    \ as a Confluent Resource Name (see below). \n* `self` is a Uniform Resource Locator\
    \ (URL) at which an object can be addressed.\n  This URL encodes the service location,\
    \ API version, and other particulars necessary to\n  locate the resource at a\
    \ point in time.\n\nTo see how these relate to each other, consider `KafkaBroker`\
    \ with `broker.id=2` in a `KafkaCluster`\nin Confluent Cloud identified as `lkc-xsi8201`.\
    \ In such an example, the `KafkaBroker` has `id=2`,\nthe `resource_name` is `crn://confluent.cloud/kafka=lkc-xsi8201/broker=2`\
    \ and the `self` URL may be\nsomething like `https://pkc-8wlk2n.us-west-2.aws.confluent.cloud`.\
    \ Note that different identifiers\ncarry different information for different purposes,\
    \ but the `resource_name` is the most complete\nand canonical identifier.\n\n\
    ## Confluent Resource Names (CRNs)\n\n*Confluent Resource Names* (CRNs) are used\
    \ to uniquely identify all Confluent resources.\n\nA CRN is a valid URI having\
    \ an \"authority\" of `confluent.cloud` or a self-managed\n<a href=\"https://docs.confluent.io/current/security/rbac/configure-mds/index.html\"\
    \ target=\"_blank\">\nmetadata service URL</a>, followed by the minimal hierarchical\
    \ set of key-value\npairs necessary to uniquely identify a resource.\n\nHere are\
    \ some examples for basic resources in Confluent Cloud:\n\n| Resource        \
    \           | Example CRN                                                    \
    \                                                                            \
    \                              |\n|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\
    | Organization               | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a\
    \                                                                            \
    \                      |\n| Environment                | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy\
    \                                                                            |\n\
    | User                       | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-rst9876\
    \                                                                            \
    \       |\n| API Key                    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-zyx98/api-key=ABCDEFG9876543210\
    \                                                           |\n| Service Account\
    \            | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/service-account=sa-abc1234\
    \                                                                       |\n| Kafka\
    \ Cluster              | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc\
    \                                  |\n| Kafka Topic                | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc/topic=my_kafka_topic\
    \             |\n| Consumer Group             | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc/group=confluent_cli_consumer_123\
    \ |\n| Network                    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc\
    \                                                           |\n| Peering     \
    \               | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/peering=p-123abc\
    \                                          |\n| Private Link Access        | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/private-link-access=pla-123abc\
    \                            |\n| Transit Gateway Attachment | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/transit-gateway-attachment=tgwa-123abc\
    \                    |\n| Schema Registry Cluster    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/schema-registry=lsrc-789qw\
    \                                                 |\n| Schema Subject        \
    \     | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/schema-registry=lsrc-789qw/subject=test\
    \                                    |\n\n# Data Types\n\n## Primitive Types\n\
    \n| Data Type  | Representation\n|------------|---------------------\n| Integers\
    \   | Each API may specify the type as `int32` or `int64`. Note that many languages,\
    \ including JavaScript, are limited to a max size of approx `2**53` and don't\
    \ correctly handle large `int64` values with their default JSON parser.\n| Dates\
    \      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC\
    \ 3339</a> formatted string. UTC timezones are assumed, unless otherwise given.\n\
    | Times      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\"\
    >RFC 3339</a> formatted string. UTC timezones are assumed, unless otherwise given.\n\
    | Durations  | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\"\
    >RFC 3339</a> formatted string.\n| Periods    | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\"\
    \ target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed,\
    \ unless otherwise given.\n| Ranges     | All ranges are represented using half-open\
    \ intervals with naming conventions like `[start_XXX, end_XXX)` such as `[start_time,\
    \ end_time)`.\n| Enums      | Most APIs use <a href=\"https://opensource.zalando.com/restful-api-guidelines/#112\"\
    \ target=\"_blank\">`x-extensible-enum`</a> as an open-ended list of values. This\
    \ improves compatibility compared with a standard `enum` which by definition represents\
    \ a closed set. All enums have a `0`-valued entry which either serves as the default\
    \ for common cases, or represents `UNSPECIFIED` when no default exists and results\
    \ in an error.\n\n<!-- TODO\n### Standard Objects\n\n| Money Object | https://schema.org/MonetaryAmount\
    \ or https://opensource.zalando.com/restful-api-guidelines/#173\n| Price Specification\
    \ | https://schema.org/PriceSpecification -> https://schema.org/UnitPriceSpecification\
    \ and https://schema.org/PaymentChargeSpecification\n-->\n\n### Standard Properties\n\
    \nConfluent uses this set of standard properties to ensure common concepts use\n\
    the same name and semantics across different APIs.\n\n| Name             | Description\n\
    |------------------|------------------------------------------\n| **api_version**\_\
    \ | Many API objects have an `api_version`\_field indicating their API version.\
    \ See the [Object Model](#section/Object-Model).\n| **kind**\_        | Many API\
    \ objects have a\_`kind`\_field indicating the\_kind of object it is. See the\
    \ [Object Model](#section/Object-Model).\n| **id**           | Many objects in\
    \ the API will have an identifier, indicated via its\_`id`\_field, and should\
    \ be treated as an opaque string unless otherwise specified. See the [Object Model](#section/Object-Model).\n\
    | **name**         | Objects which support a client-provided unique identifier\
    \ instead of a generated `id` will indicate this identifier via its `name` field.\n\
    | **display_name** | The human-readable display name of an API object.\n| **title**\
    \        | The official name of an API object, such as a company name. It should\
    \ be treated as the formal version of\_`display_name`.\n| **description**  | One\
    \ or more paragraphs of text description of an entity.\n| **created_at**\_  |\
    \ The date and time the object was created, represented as a string in <a href=\"\
    https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n\
    | **updated_at**  \_| The date and time the object was last modified, represented\
    \ as a string in <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\"\
    >RFC 3339</a> format.\n| **deleted_at**   | If present, the date and time after\
    \ which the object was/will be deleted,\_represented as a string in <a href=\"\
    https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n\
    | **page_token**   | The pagination token in the List request. See [Pagination](#section/Pagination).\n\
    | **page_size**    | The pagination size in the List request. See [Pagination](#section/Pagination).\n\
    | **total_size**   | The total count of items in the list irrespective of pagination.\
    \ See [Pagination](#section/Pagination).\n| **spec**         | The _desired state_\
    \ specification of the resource, as observed by Confluent Cloud.\n| **status**\
    \       | The _current state_ of the resource, as observed by Confluent Cloud.\n\
    \n# Versioning\n\nConfluent APIs ensure stability for your integrations by avoiding\
    \ the introduction\nof breaking changes to customers unexpectedly. Confluent will\
    \ make non-breaking\nAPI changes without advance notice. Thus, API clients **must**\
    \  follow the\n[Compatibility Policy](#section/Versioning/Compatibility-Policy)\
    \ below to ensure your\ningtegration remains stable. All APIs follow the API Lifecycle\
    \ Policy described below,\nwhich describes the guarantees API clients can rely\
    \ on.\n\nBreaking changes will be [widely communicated](#communication) in advance\
    \ in accordance\nwith the Confluent [Deprecation Policy](#section/Versioning/Deprecation-Policy).\
    \ Confluent will provide \ntimelines and a migration path for all API changes,\
    \ where available. Be sure to subscribe\nto one or more [communication channels](#communication)\
    \ so you don't miss any updates!\n\nOne exception to these guidelines is for critical\
    \ security issues. Confluent will take any necessary\nactions to mitigate any\
    \ critical security issue as soon as possible, which may include disabling\nthe\
    \ vulnerable functionality until a proper solution is available.\n\nDo not consume\
    \ any Confluent API unless it is documented in the API Reference. All undocumented\n\
    endpoints should be considered private, subject to change without notice, and\
    \ not covered by any\nagreements.\n\n> Note: The version in the URL (e.g. \"v1\"\
    \ or \"v2\") is not a \"major version\" in the\n[Semantic Versioning](https://semver.org/)\
    \ sense. It is a \"generational version\" or \"meta version\", as seen in\nAPIs\
    \ like <a href=\"https://developer.github.com/v3/versions/\" target=\"_blank\"\
    >Github API</a> or the\n<a href=\"https://stripe.com/docs/api/versioning\" target=\"\
    _blank\">Stripe API</a>.\n\n## API Groups\n\nConfluent APIs are divided into API\
    \ Groups, such as the Cluster Management for Apache Kafka (CMK) API group,\nthe\
    \ Connect API group, and the Data Catalog API group. Each group has its own set\
    \ of endpoints and resources,\nas well as its own API group version.\n\nBecause\
    \ different API groups have different versions, there is no single version for\
    \ the \"Confluent Cloud API\".\nThe latest version of the Connect API group may\
    \ be `connect/v1`, while the latest version of the CMK API group\nmay be `cmk/v2`.\n\
    \nWhen a breaking change is introduced into one API group, Confluent will increase\
    \ the API version for that API group\nonly, leaving the other API groups' versions\
    \ unchanged. This makes it easier for you to understand whether a given\nbreaking\
    \ change impacts your usage of the APIs.\n\n## Known Issues\n\nDuring the Early\
    \ Access and Preview periods, we have a few known issues.\n\n| Issue         \
    \ | Description                                                              \
    \     | Proposed Resolution\n|----------------|-------------------------------------------------------------------------------|-----------------------------------------------------\n\
    | Quota Exceeded | Some \"Quota Exceeded\" errors will be returned as HTTP 400\
    \ instead of HTTP 402 | Return 402 consistently for \"Quota Exceeded\" errors\
    \ \n\n## API Lifecycle Policy\n\nThe following status labels are applicable to\
    \ APIs, features, and SDK versions, based on\nthe current support status of each:\n\
    \n* **Early Access** – May change at any time. Not recommended for production\
    \ usage. Not officially supported by\n  Confluent. Intended for user feedback\
    \ only. Users must be granted explicit access to the API by Confluent.\n* **Preview**\
    \ – Unlikely to change between Preview and General Availability. Not recommended\
    \ for production usage.\n  Officially supported by Confluent for non-production\
    \ usage. Accessible to all users.\n* **Limited Availability (LA)** - Available\
    \ to key select customers in a subset of regions/providers/networks and recommended\
    \ for production usage.  \n* **Generally Available (GA)** – Will not change at\
    \ short notice. Recommended for production usage.\n  Officially supported by Confluent\
    \ for non-production and production usage.\n* **Deprecated** – Still supported,\
    \ but no longer under active development. Existing usage will continue to function\n\
    \  but migration following the upgrade guide is strongly recommended. New use\
    \ cases should be built against the new\n  version. Deprecated feature or version\
    \ will be removed in the future at the announced date.\n* **Sunset** – Removed,\
    \ and no longer supported or available.\n\nAn API is \"Generally Available\" unless\
    \ explicitly marked otherwise.\n\n## Compatibility Policy\n\nConfluent Cloud APIs\
    \ are governed by\n<a href=\"https://docs.confluent.io/cloud/current/clusters/upgrade-policy.html\"\
    \ target=\"_blank\">\nConfluent Cloud Upgrade Policy</a>, which means that backward\
    \ incompatible changes and\ndeprecations will be made approximately once per year,\
    \ and 180 days notice will be provided via email to all\nregistered Confluent\
    \ Cloud users.\n\n### Backward Compatibility\n\n> _An API version is backward\
    \ compatible if a program written against the previous version of the API will\
    \ continue to work the same way, without modification, against this version of\
    \ the API._\n\nConfluent considers the following changes to be backward compatible:\n\
    \n* Adding new API resources.\n* Adding new optional parameters to existing API\
    \ requests (e.g., query string).\n* Adding new properties to existing API resources\
    \ (e.g., request body).\n* Changing the order of properties in existing API responses.\n\
    * Changing the length or format of object IDs or other opaque strings.\n  * Unless\
    \ otherwise documented, you can safely assume object IDs generated by Confluent\
    \ will never exceed 255\n    characters, but you should be able to handle IDs\
    \ of up to that length. If you're using MySQL,\n    for example, you should store\
    \ IDs in a `VARCHAR(255) COLLATE utf8_bin` column.\n  * This includes adding or\
    \ removing fixed prefixes (such as `lkc-` on Kafka cluster IDs).\n  * This includes\
    \ API keys, API tokens, and similar authentication mechanisms.\n  * This includes\
    \ all strings described as \"opaque\" in the docs, such as pagination cursors.\n\
    * Adding new API event types.\n* Adding new properties to existing API event types.\n\
    * Omitting properties with null values from existing API responses.\n\n### Forward\
    \ Compatibility\n\n> _An API version is forward compatible if a program written\
    \ against the next version of the API\n> will continue to work the same way, without\
    \ modification, against this version of the API._\n\nIn other words, a forward\
    \ compatible API will accept input intended for a later version of itself.\n\n\
    Confluent does not guarantee the forward compatibility of the APIs, but Confluent\
    \ does generally follow the guidelines\ngiven by the [Robustness principle](https://en.wikipedia.org/wiki/Robustness_principle).\n\
    This means that the API determines what to do with a request based only on the\
    \ parts that it recognizes.\n\nThis is often referred to as the MUST IGNORE rule.\n\
    \n* Request parameters that are not recognized will be ignored (e.g., query string).\n\
    * Request properties that are not recognized will be ignored (e.g., request body).\n\
    * Request metadata that are not recognized will be ignored (e.g., request headers).\n\
    \nAPI clients must also follow the MUST IGNORE rule.\n\n* Response properties\
    \ that are not recognized must be ignored (e.g., response body).\n* Response metadata\
    \ that are not recognized must be ignored (e.g., response headers).\n\nAdditionally,\
    \ there is a more subtle related rule called the MUST FORWARD rule. Any parts\
    \ of\na request that an API doesn't recognize must be forwarded unchanged.\n\n\
    * Response properties that are not recognized must be included in any input subsequent\
    \ updates (e.g., request body)\n  * This includes future `PUT` requests in a read/modify/write\
    \ operation.\n    (This isn't required for `PATCH` partial updates, which is why\
    \ Confluent APIs use `PATCH`.)\n* Event processors must not strip unknown properties\
    \ before forwarding messages.\n\n### Client Responsibilities\n\n* Resource and\
    \ rate limits, and the default and maximum sizes of paginated data **are not**\n\
    \  considered part of the API contract and may change (possibly dynamically).\
    \ It is the client's\n  responsibility to read the road signs and obey the speed\
    \ limit.\n* If a property has a primitive type and the API documentation does\
    \ not explicitly limit its\n  possible values, clients **must not** assume the\
    \ values are constrained to a particular set\n  of possible responses.\n* If a\
    \ property of an object is not explicitly declared as mandatory in the API, clients\n\
    \  **must not** assume it will be present.\n* A resource **may** be modified to\
    \ return a \"redirection\" response (e.g. `301`, `307`) instead of\n  directly\
    \ returning the resource. Clients **must** handle HTTP-level redirects, and respect\
    \ HTTP\n  headers (e.g. `Location`).\n\n## Deprecation Policy\n\nConfluent will\
    \ announce deprecations at least 180 days in advance of a breaking change\nand\
    \ will continue to maintain the deprecated APIs in their original form during\
    \ this time.\n\nExceptions to this policy apply in case of critical security vulnerabilities\
    \ or functional defects.\n\n### Communication\n\nWhen a deprecation is announced,\
    \ the details and any relevant migration\ninformation will be available on one\
    \ or more of the following channels:\n\n* Announcements on the <a href=\"https://www.confluent.io/blog/\"\
    \ target=\"_blank\">Developer Blog</a>,\n  <a href=\"https://confluentcommunity.slack.com\"\
    \ target=\"_blank\">Community Slack</a>\n  (<a href=\"https://slackpass.io/confluentcommunity\"\
    \ target=\"_blank\">join!</a>),\n  <a href=\"https://groups.google.com/forum/#!forum/confluent-platform\"\
    \ target=\"_blank\">Google Group</a>,\n  the <a href=\"https://twitter.com/ConfluentInc\"\
    \ target=\"_blank\">@ConfluentInc twitter</a>\n  account, and similar channels\n\
    * Enterprise customers may receive information by email to their specified Confluent\
    \ contact, if applicable.\n\n<!-- TODO:\n### Discoverability\n-->\n\n# HTTP Guidelines\n\
    \n## Status Codes\n\nConfluent respects the meanings and behavior of HTTP status\
    \ codes as defined\nin <a href=\"https://tools.ietf.org/html/rfc2616\">RFC2616</a>\
    \ and elsewhere.\n\n* Codes in the `2xx` range indicate success\n* Codes in the\
    \ `3xx` range indicate redirection\n* Codes in the `4xx` range indicate an error\
    \ caused by the client request\n  (e.g., a required parameter was omitted, an\
    \ invalid cluster configuration was provided, etc.)\n* Codes in the `5xx` range\
    \ indicate an error with Confluent's servers (these are rare)\n\nThe various HTTP\
    \ status codes that might be returned are listed below.\n\n| Code | Title    \
    \              | Description\n|------|------------------------|--------------------------------\n\
    | 200  | OK                     | Everything worked as expected.\n| 201  | Created\
    \                | The resource was created. Follow the `Location` header.\n|\
    \ 204  | No Content             | Everything worked and there is no content to\
    \ return.\n| 400  | Bad Request\t        | The request was unacceptable, often\
    \ due to malformed syntax, or a missing or malformed parameter.\n| 401  | Unauthorized\
    \           | No valid credentials provided. or the credentials are unsuitable,\
    \ invalid, or unauthorized.\n| 402  | Over Quota             | The request was\
    \ valid, but you've exceeded your plan quota or limits.\n| 404  | Not Found  \
    \            | The requested resource doesn't exist or you're unauthorized to\
    \ know it exists.\n| 409  | Conflict               | The request conflicts with\
    \ another request (perhaps it already exists or was based on a stale version of\
    \ data).\n| 422  | Validation Failed      | The request was parsed correctly but\
    \ failed some sort of validation.\n| 429  | Too Many Requests      | Too many\
    \ requests hit the API too quickly. Confluent recommends an exponential backoff\
    \ of your requests.\n| 500, 502, 503, 504 | Server Errors | Something went wrong\
    \ on Confluent's end. (These are rare.)\n\nThis list is not exhaustive; other\
    \ standard HTTP error codes may be used,\nincluding `304`, `307`, `308`, `405`,\
    \ `406`, `408`, `410`, and `415`.\n\nFor more details, see https://httpstatuses.com.\n\
    \n<!--\n\n## Method Overriding\n\nSome firewalls and HTTP clients restrict the\
    \ use of verbs other than `GET` and `POST`. In those\nenvironments, Confluent\
    \ API operations that require `PUT`, `PATCH`, and `DELETE` verbs will be inaccessible.\n\
    \nTo avoid this issue, Confluent APIs support the `X-HTTP-Method-Override` header,\
    \ allowing clients to\n\"tunnel\" `PUT`, `PATCH`, and `DELETE` requests via a\
    \ `POST` request.\n\nFor example, to call a Confluent `PATCH` resource via a `POST`\
    \ request, you can\ninclude `X-HTTP-Method-Override: PATCH` as a header.\n\n##\
    \ User Agent Required\n\nConfluent API requests **should** include a valid `User-Agent`\
    \ header. Requests with no `User-Agent`\nheader may be rejected. You should use\
    \ the name of your integration for the `User-Agent`\nheader value and include\
    \ contact information so that Confluent can contact you if there are problems.\n\
    \n> If your integration is acting as a proxy or gateway, you **should** forward\
    \ the User-Agent\n> of the originating client with your API requests.\n\nHere's\
    \ a complete example:\n\n    User-Agent: CoolToolName/1.2.3 (https://example.org/CoolTool/;\
    \ CoolTool@example.org) UsedBaseLibrary/2.1.0\n\nThe minimum user agent string\
    \ is the integration name and version: `name/version`.\nYou can string together\
    \ multiple values in a space-separated list. The full syntax is:\n\n    name/version\
    \ [(comments)] [name/version [(comments)]] [...]​\n\nFor the integration name,\
    \ use a string (without whitespace) that clearly and meaningfully\nidentifies\
    \ your integration.\n\n* Avoid ambiguous names: `Confluent-Integration`, `Kafka-Sink`\n\
    * Use clear and meaningful names: `ABCTools-ToolName`, `StackStorm-Confluent-Plugin`\n\
    \nFor the version, use a semantic version, build ID, commit hash, or other identifier\n\
    that is updated automatically when you release a new version.\n\nWrap comments\
    \ in parentheses `()` as a semi-colon separated list. Helpful comments to include:\n\
    \n* A public URL for your integration, such as a GitHub link or a page in your\n\
    \  docs site that describes the integration.\n* Contact information so that Confluent\
    \ can easily reach the integration publisher. This\n  information from the user\
    \ agent string will never be shared nor used by Confluent for\n  any purpose other\
    \ than discussing the integration with its publisher.\n\nIf you provide an invalid\
    \ `User-Agent` header, you may receive a `403 Forbidden` response.\n\n-->\n"
  title: Confluent Cloud APIs
  version: ""
  x-api-id: 46234552-5833-42eb-ba0f-883ad3f70d2b
  x-audience: external-public
  x-logo:
    url: https://assets.confluent.io/m/5ec23aa91903c00b/
servers:
- description: Confluent Cloud API
  url: https://api.confluent.cloud
tags:
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
    of API keys represent access to a single cluster/resource such as a Kafka cluster,
    Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
    that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

    The API allows you to list, create, update and delete your API Keys.


    Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

    ## The API Keys Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
  name: API Keys (iam/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Environment` objects represent an isolated namespace for your Confluent resources
    for organizational purposes.

    The API allows you to create, delete, and update your environments. You can retrieve
    individual environments as well as a list of all your environments.


    Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

    ## The Environments Model
    <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `environments_per_org` | Environments in one Confluent Cloud organization |
  name: Environments (org/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Organization` objects represent a customer organization. An organization contains all customer
    resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
    agreement (including any annual commitment or support plan).

    The API allows you to list, view, and update your organizations.


    Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

    ## The Organizations Model
    <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
  name: Organizations (org/v2)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `User` objects represent individuals who may access your Confluent resources.

    The API allows you to retrieve, update, and delete individual users, as well as list of all your
    users. This API cannot be used to create new user accounts.


    Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

    ## The Users Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `users_per_org` | Users in one Confluent Cloud organization |
  name: Users (iam/v2)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `ServiceAccount` objects are typically used to represent applications and other non-human principals
    that may access your Confluent resources.

    The API allows you to create, retrieve, update, and delete individual service accounts, as well as
    list all your service accounts.


    Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

    ## The Service Accounts Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
  name: Service Accounts (iam/v2)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

    The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


    Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

    ## The Invitations Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `invitations_per_org` | Invitations in a Confluent Cloud organization |
  name: Invitations (iam/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    A role binding grants a Principal a role on resources that match a pattern.

    The API allows you to perform create, delete, and list operations on role bindings.


    Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

    ## The Role Bindings Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
  name: Role Bindings (iam/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Subscription` objects represent the intent of the customers to get notifications of particular types.
    A subscription is created for a particular `NotificationType` and the user will get notifications on the
    `Integrations` that are provided while creating the subscription.

    This API allows you to create, retrieve, and update subscriptions,
    as well as to view the list of all your subscriptions. You can also delete subscriptions
    with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


    Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

    ## The Subscriptions Model
    <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
  name: Subscriptions (notifications/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
    a subscription. Please note that you can only perform create, update and delete operations for integrations
    of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
    and `UserEmail`.


    Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

    ## The Integrations Model
    <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
  name: Integrations (notifications/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The type of notifications (and their corresponding metadata) supported by Confluent.


    Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

    ## The Notification Types Model
    <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
  name: Notification Types (notifications/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

    The API allows you to list, create, read, update, and delete your Kafka clusters.


    Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

    ## The Clusters Model
    <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
  name: Clusters (cmk/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
    It executes SQL statements and queries which under the hood get built into corresponding
    Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


    Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

    ## The Clusters Model
    <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
  name: Clusters (ksqldbcm/v2)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing connectors.

    The API allows you to list, create, get, update and delete your connectors.

    Connect metrics are available through [Metrics v2 API](https://api.telemetry.confluent.cloud/docs#tag/Version-2).

    Related guide: [Confluent Cloud API and Fully-Managed Connectors](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).
  name: Connectors (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing lifecycle of connectors. Operations currently supported are Pause and Resume.
  name: Lifecycle (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for requesting the status of a connector or the tasks of a connector.
  name: Status (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing connector plugins.
  name: Plugins (v1)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Cluster (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Configs (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: ACL (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Consumer Group (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Partition (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Topic (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Records (v3)
- description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
  name: Cluster Linking (v3)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
    Use this API to retrieve an individual quota or list of quotas for a given scope.


    Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

    ## The Applied Quotas Model
    <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
  name: Applied Quotas (service-quota/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    Gets a list of all available scopes for applied quotas.


    Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

    ## The Scopes Model
    <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
  name: Scopes (service-quota/v1)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Entitlement` objects represent metadata about a marketplace entitlement.

    An entitlement includes metadata about a marketplace purchase
    (start date, end date, billing information, partner IDs, etc).
    The API allows partners to create, read, and list entitlements. (Unless you
    need entitlement creation and customer registration to be separate,
    we recommend using the Signup API to create an organization and entitlement
    at the same time)

    The API only allows authorized partners to interact with the Entitlements API.
  name: Entitlements (partner/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
    The API allows you to list Schema Registry regions.


    Related guide: [Confluent Cloud Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-regions).

    ## The Regions Model
    <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
  name: Regions (srcm/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

    The API allows you to list, create, read, and delete your Schema Registry clusters.


    Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

    ## The Clusters Model
    <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
  name: Clusters (srcm/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to test schema compatibility.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Compatibility (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to manage and query schema compatibility settings and cluster configurations.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Config (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to retrieve information about schema contexts.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Contexts (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Modes (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schemas.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Schemas (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects and versions.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Subjects (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete catalog entities.

    Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  name: Entity (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to search for entities.

    Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  name: Search (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete catalog types such as tag definitions.

    Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  name: Types (v1)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Organizations` objects represent an entire Confluent Cloud organization.
    Partners are allowed to get an organization they have signed up or
    list all organizations they have signed up.
  name: Organizations (partner/v2)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Signup` APIs can only be performed by partners.
  name: Signup (partner/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
    provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
    Shared networks can contain any cluster type.

    The API allows you to list, create, read, update, and delete your networks.


    Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

    ## The Networks Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
  name: Networks (networking/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

    Related guide: [Peering Connections Overview](https://docs.confluent.io/cloud/current/networking/peering/overview.html).

    ## The Peerings Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `peerings_per_network` | Number of peerings per network |
  name: Peerings (networking/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    AWS Transit Gateway Attachments

    Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

    ## The Transit Gateway Attachments Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `tgw_attachments_per_network` | Number of TGW attachments per network |
  name: Transit Gateway Attachments (networking/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

    Related guide: [Private Links Overview](https://docs.confluent.io/cloud/current/networking/private-links/index.html).

    ## The Private Link Accesses Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `private_link_accounts_per_network` | Number of AWS accounts per network |
    | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
    | `private_service_connect_projects_per_network` | Number of GCP projects per network |
  name: Private Link Accesses (networking/v1)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    Network Link Service is associated with a Private Link Confluent Cloud Network.
    It enables connectivity from other Private Link Confluent Cloud Networks based on
    the configured accept policies.


    ## The Network Link Services Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkService" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `network_link_service_per_network` | Number of network link services per network |
  name: Network Link Services (networking/v1)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
    Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
    It enables connectivity between the origin network and the target network.
    It can only be associated with a Private Link network.


    ## The Network Link Endpoints Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `network_link_endpoints_per_network` | Number of network link endpoints per network |
  name: Network Link Endpoints (networking/v1)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    List of incoming Network Link Enpoints associated with the Network Link Service.


    ## The Network Link Service Associations Model
    <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
  name: Network Link Service Associations (networking/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `IdentityProvider` objects represent external OAuth/OpenID Connect providers within
    Confluent Cloud.

    The API allows you to list, create, read, update, and delete your Identity Provider.


    Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

    ## The Identity Providers Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `identity_providers_per_org` | Number of Identity Providers per organization |
    | `public_keys_per_provider` | Number of public keys saved per Identity Provider |
  name: Identity Providers (iam/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `JWKS` objects represent public key sets for a specific OAuth/OpenID Connect provider within
    Confluent Cloud.

    The API allows you to refresh JWKS public key data.


    Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

    ## The Jwks Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Jwks" />
  name: Jwks (iam/v2)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
    that authorizes them to Confluent Cloud resources.

    It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
    is then used to provide access to Confluent Resources.


    Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

    ## The Identity Pools Model
    <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
  name: Identity Pools (iam/v2)
- description: |
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    OAuth Token is a [JSON Web Token (JWT)](https://www.rfc-editor.org/rfc/rfc7519) that enables the use of
    external identities to access Confluent Cloud APIs
  name: OAuth Tokens (sts/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `ClientQuota` objects represent Client Quotas you can set at the service account level.

    The API allows you to list, create, read, update, and delete your client quotas.


    Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

    ## The Client Quotas Model
    <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
  name: Client Quotas (kafka-quotas/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
    The pipeline's content is available separately.

    The API allows you to create, retrieve, update, and delete your pipelines,
    as well as list all of your pipelines for the particular environment and Kafka cluster.


    Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

    ## The Pipelines Model
    <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
    | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
  name: Pipelines (sd/v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

    Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS and Azure.
    This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


    Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

    ## The Keys Model
    <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
  name: Keys (byok/v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    `Cost` objects represent the aggregated billing costs for an organization


    ## The Costs Model
    <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
  name: Costs (billing/v1)
paths:
  /iam/v2/api-keys:
    get:
      description: |
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all API keys.

        This can show all keys for a single owner (across resources - Kafka clusters), or all keys for a single
        resource (across owners). If no `owner` or `resource` filters are specified, returns all API Keys in the
        organization. You will only see the keys that are accessible to the account making the API request.
      operationId: listIamV2ApiKeys
      parameters:
      - description: Filter the results by exact match for spec.owner.
        explode: true
        in: query
        name: spec.owner
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.resource.
        explode: true
        in: query
        name: spec.resource
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2ApiKeys_200_response'
          description: API Key.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of API Keys
      tags:
      - API Keys (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/api-keys?spec.owner=SOME_STRING_VALUE&spec.resource=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an API key.
      operationId: createIamV2ApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2ApiKey_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2ApiKey_202_response'
          description: An API Key is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: ApiKey resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/api-keys/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create an API Key
      tags:
      - API Keys (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/api-keys \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"CI kafka access key","description":"This API key provides kafka access to cluster x","owner":{"id":"u-a83k9b"},"resource":{"id":"lkc-c29js0","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"u-a83k9b\"},\"resource\":{\"id\":\"lkc-c29js0\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/api-keys")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/api-keys\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"CI kafka access key\\\",\\\"description\\\":\\\"This API key provides\
          \ kafka access to cluster x\\\",\\\"owner\\\":{\\\"id\\\":\\\"u-a83k9b\\\
          \"},\\\"resource\\\":{\\\"id\\\":\\\"lkc-c29js0\\\",\\\"environment\\\"\
          :\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"u-a83k9b\"},\"resource\":{\"id\":\"lkc-c29js0\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/api-keys", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/api-keys",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'CI kafka access key',
              description: 'This API key provides kafka access to cluster x',
              owner: {id: 'u-a83k9b'},
              resource: {id: 'lkc-c29js0', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/api-keys");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"u-a83k9b\"},\"resource\":{\"id\":\"lkc-c29js0\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/api-keys");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"u-a83k9b\"},\"resource\":{\"id\":\"lkc-c29js0\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/api-keys/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an API key.
      operationId: deleteIamV2ApiKey
      parameters:
      - description: The unique identifier for the API key.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An API Key is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete an API Key
      tags:
      - API Keys (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/api-keys/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/api-keys/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an API key.
      operationId: getIamV2ApiKey
      parameters:
      - description: The unique identifier for the API key.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2ApiKey_200_response'
          description: API Key.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read an API Key
      tags:
      - API Keys (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/api-keys/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/api-keys/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an API key.

      operationId: updateIamV2ApiKey
      parameters:
      - description: The unique identifier for the API key.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.ApiKeyUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2ApiKey_200_response'
          description: API Key.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update an API Key
      tags:
      - API Keys (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"CI kafka access key","description":"This API key provides kafka access to cluster x","owner":{"id":"string"},"resource":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"string\"},\"resource\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"CI kafka access key\\\",\\\"description\\\":\\\"This API key provides\
          \ kafka access to cluster x\\\",\\\"owner\\\":{\\\"id\\\":\\\"string\\\"\
          },\\\"resource\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\
          \"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"string\"},\"resource\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/api-keys/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/api-keys/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'CI kafka access key',
              description: 'This API key provides kafka access to cluster x',
              owner: {id: 'string'},
              resource: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"string\"},\"resource\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/api-keys/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"CI kafka access key\",\"description\":\"This API key provides kafka access to cluster x\",\"owner\":{\"id\":\"string\"},\"resource\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /org/v2/environments:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all environments.
      operationId: listOrgV2Environments
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOrgV2Environments_200_response'
          description: Environment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Environments
      tags:
      - Environments (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/org/v2/environments \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/environments")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/environments\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/org/v2/environments", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/environments",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/environments");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/environments");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an environment.
      operationId: createOrgV2Environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrgV2Environment_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createOrgV2Environment_request'
          description: An Environment was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Environment resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/org/v2/environments/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create an Environment
      tags:
      - Environments (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/org/v2/environments \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"prod-finance01"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"prod-finance01\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/environments")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/environments\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"prod-finance01\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"prod-finance01\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/org/v2/environments", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/environments",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({display_name: 'prod-finance01'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/environments");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"prod-finance01\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/environments");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"prod-finance01\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /org/v2/environments/{id}:
    delete:
      description: |
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an environment.

        If successful, this request will also recursively delete all of the environment's associated resources,
        including all Kafka clusters, connectors, etc.
      operationId: deleteOrgV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Environment is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete an Environment
      tags:
      - Environments (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/org/v2/environments/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/environments/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/environments/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/org/v2/environments/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/environments/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/environments/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/environments/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an environment.
      operationId: getOrgV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrgV2Environment_200_response'
          description: Environment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read an Environment
      tags:
      - Environments (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/org/v2/environments/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/environments/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/environments/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/org/v2/environments/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/environments/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/environments/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/environments/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an environment.

      operationId: updateOrgV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org.v2.Environment'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrgV2Environment_200_response'
          description: Environment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update an Environment
      tags:
      - Environments (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/org/v2/environments/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"prod-finance01"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"prod-finance01\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/environments/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/environments/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"prod-finance01\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"prod-finance01\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/org/v2/environments/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/environments/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({display_name: 'prod-finance01'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/environments/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"prod-finance01\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/environments/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"prod-finance01\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /org/v2/organizations:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all organizations.
      operationId: listOrgV2Organizations
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listOrgV2Organizations_200_response'
          description: Organization.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Organizations
      tags:
      - Organizations (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/org/v2/organizations \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/organizations")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/organizations\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/org/v2/organizations", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/organizations",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/organizations");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/organizations");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /org/v2/organizations/{id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an organization.
      operationId: getOrgV2Organization
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrgV2Organization_200_response'
          description: Organization.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read an Organization
      tags:
      - Organizations (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/org/v2/organizations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/organizations/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/organizations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/org/v2/organizations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/organizations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/organizations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/organizations/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an organization.

      operationId: updateOrgV2Organization
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org.v2.Organization'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrgV2Organization_200_response'
          description: Organization.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update an Organization
      tags:
      - Organizations (org/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/org/v2/organizations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Finance Org"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"Finance Org\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/org/v2/organizations/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/org/v2/organizations/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Finance Org\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"Finance Org\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/org/v2/organizations/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/org/v2/organizations/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({display_name: 'Finance Org'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/org/v2/organizations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"Finance Org\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/org/v2/organizations/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"Finance Org\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/users:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all users.
      operationId: listIamV2Users
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2Users_200_response'
          description: User.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Users
      tags:
      - Users (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/users \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/users")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/users\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/users", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/users",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/users");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/users");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /iam/v2/users/{id}:
    delete:
      description: |
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a user.

        If successful, this request will also recursively delete all of the user's associated resources,
        including its cloud and cluster API keys.
      operationId: deleteIamV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A User is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a User
      tags:
      - Users (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/users/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/users/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/users/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/users/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/users/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/users/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/users/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a user.
      operationId: getIamV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2User_200_response'
          description: User.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a User
      tags:
      - Users (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/users/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/users/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/users/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/users/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/users/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/users/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/users/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a user.

      operationId: updateIamV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.UserUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2User_200_response'
          description: User.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a User
      tags:
      - Users (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/users/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"email":"marty.mcfly@example.com","full_name":"Marty McFly"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"email\":\"marty.mcfly@example.com\",\"full_name\":\"Marty McFly\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/users/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/users/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"marty.mcfly@example.com\\\
          \",\\\"full_name\\\":\\\"Marty McFly\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"email\":\"marty.mcfly@example.com\",\"full_name\":\"Marty McFly\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/users/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/users/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({email: 'marty.mcfly@example.com', full_name: 'Marty McFly'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/users/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"email\":\"marty.mcfly@example.com\",\"full_name\":\"Marty McFly\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/users/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"email\":\"marty.mcfly@example.com\",\"full_name\":\"Marty McFly\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/service-accounts:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all service accounts.
      operationId: listIamV2ServiceAccounts
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2ServiceAccounts_200_response'
          description: Service Account.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Service Accounts
      tags:
      - Service Accounts (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/service-accounts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/service-accounts")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/service-accounts\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/service-accounts", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/service-accounts",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/service-accounts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/service-accounts");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a service account.
      operationId: createIamV2ServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2ServiceAccount_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2ServiceAccount_request'
          description: A Service Account was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: ServiceAccount resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/service-accounts/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Service Account
      tags:
      - Service Accounts (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/service-accounts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"DeLorean_auto_repair","description":"Doc'\''s repair bot for the DeLorean"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/service-accounts")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/service-accounts\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"DeLorean_auto_repair\\\
          \",\\\"description\\\":\\\"Doc's repair bot for the DeLorean\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/service-accounts", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/service-accounts",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'DeLorean_auto_repair',
            description: 'Doc\'s repair bot for the DeLorean'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/service-accounts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/service-accounts");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/service-accounts/{id}:
    delete:
      description: |
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a service account.

        If successful, this request will also recursively delete all of the service account's associated resources,
        including its cloud and cluster API keys.
      operationId: deleteIamV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Service Account is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Service Account
      tags:
      - Service Accounts (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/service-accounts/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/service-accounts/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a service account.
      operationId: getIamV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2ServiceAccount_200_response'
          description: Service Account.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Service Account
      tags:
      - Service Accounts (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/service-accounts/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/service-accounts/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a service account.

      operationId: updateIamV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.ServiceAccountUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2ServiceAccount_200_response'
          description: Service Account.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Service Account
      tags:
      - Service Accounts (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"DeLorean_auto_repair","description":"Doc'\''s repair bot for the DeLorean"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"DeLorean_auto_repair\\\
          \",\\\"description\\\":\\\"Doc's repair bot for the DeLorean\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/service-accounts/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/service-accounts/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'DeLorean_auto_repair',
            description: 'Doc\'s repair bot for the DeLorean'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/service-accounts/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/invitations:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all invitations.
      operationId: listIamV2Invitations
      parameters:
      - description: Filter the results by exact match for email.
        example: johndoe@confluent.io
        explode: true
        in: query
        name: email
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for status.
        example: INVITE_STATUS_SENT
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for user.
        example: u-j93dy8
        explode: true
        in: query
        name: user
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for creator.
        example: u-m2r9o7
        explode: true
        in: query
        name: creator
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2Invitations_200_response'
          description: Invitation.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Invitations
      tags:
      - Invitations (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/invitations?email=johndoe%40confluent.io&status=INVITE_STATUS_SENT&user=u-j93dy8&creator=u-m2r9o7");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an invitation.

        The newly invited user will not have any permissions. Give the user permission by assigning them to one or
        more roles by creating
        [role bindings](https://docs.confluent.io/cloud/current/api.html#tag/Role-Bindings-(iamv2))
        for the created `user`.
      operationId: createIamV2Invitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2Invitation_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2Invitation_request'
          description: An Invitation was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Invitation resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/invitations/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create an Invitation
      tags:
      - Invitations (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/invitations \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"email":"johndoe@confluent.io","auth_type":"AUTH_TYPE_SSO"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"email\":\"johndoe@confluent.io\",\"auth_type\":\"AUTH_TYPE_SSO\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/invitations")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/invitations\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"johndoe@confluent.io\\\
          \",\\\"auth_type\\\":\\\"AUTH_TYPE_SSO\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"email\":\"johndoe@confluent.io\",\"auth_type\":\"AUTH_TYPE_SSO\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/invitations", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/invitations",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({email: 'johndoe@confluent.io', auth_type: 'AUTH_TYPE_SSO'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/invitations");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"email\":\"johndoe@confluent.io\",\"auth_type\":\"AUTH_TYPE_SSO\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/invitations");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"email\":\"johndoe@confluent.io\",\"auth_type\":\"AUTH_TYPE_SSO\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/invitations/{id}:
    delete:
      description: |
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an invitation.

        Delete will deactivate the user if the user didn't accept the invitation yet.
      operationId: deleteIamV2Invitation
      parameters:
      - description: The unique identifier for the invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Invitation is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete an Invitation
      tags:
      - Invitations (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/invitations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/invitations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an invitation.
      operationId: getIamV2Invitation
      parameters:
      - description: The unique identifier for the invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2Invitation_200_response'
          description: Invitation.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read an Invitation
      tags:
      - Invitations (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/invitations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/invitations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/invitations/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /iam/v2/role-bindings:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all role bindings.
      operationId: listIamV2RoleBindings
      parameters:
      - description: Filter the results by exact match for principal.
        example: User:u-111aaa
        explode: true
        in: query
        name: principal
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for role_name.
        example: CloudClusterAdmin
        explode: true
        in: query
        name: role_name
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by a partial search of crn_pattern.
        example: crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa
        explode: true
        in: query
        name: crn_pattern
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 1000
          type: integer
          x-max-page-items: 1000
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2RoleBindings_200_response'
          description: Role Binding.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Role Bindings
      tags:
      - Role Bindings (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/role-bindings?principal=User%3Au-111aaa&role_name=CloudClusterAdmin&crn_pattern=crn%3A%2F%2Fconfluent.cloud%2Forganization%3D1111aaaa-11aa-11aa-11aa-111111aaaaaa%2Fenvironment%3Denv-aaa1111%2Fcloud-cluster%3Dlkc-1111aaa");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a role binding.
      operationId: createIamV2RoleBinding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2RoleBinding_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2RoleBinding_request'
          description: A Role Binding was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: RoleBinding resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/role-bindings/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Role Binding
      tags:
      - Role Bindings (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/role-bindings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"principal":"User:u-111aaa","role_name":"CloudClusterAdmin","crn_pattern":"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"principal\":\"User:u-111aaa\",\"role_name\":\"CloudClusterAdmin\",\"crn_pattern\":\"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/role-bindings")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/role-bindings\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"principal\\\":\\\"User:u-111aaa\\\
          \",\\\"role_name\\\":\\\"CloudClusterAdmin\\\",\\\"crn_pattern\\\":\\\"\
          crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"principal\":\"User:u-111aaa\",\"role_name\":\"CloudClusterAdmin\",\"crn_pattern\":\"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/role-bindings", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/role-bindings",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            principal: 'User:u-111aaa',
            role_name: 'CloudClusterAdmin',
            crn_pattern: 'crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/role-bindings");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"principal\":\"User:u-111aaa\",\"role_name\":\"CloudClusterAdmin\",\"crn_pattern\":\"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/role-bindings");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"principal\":\"User:u-111aaa\",\"role_name\":\"CloudClusterAdmin\",\"crn_pattern\":\"crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/role-bindings/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a role binding.
      operationId: deleteIamV2RoleBinding
      parameters:
      - description: The unique identifier for the role binding.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2RoleBinding_200_response'
          description: A Role Binding is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Role Binding
      tags:
      - Role Bindings (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/role-bindings/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/role-bindings/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a role binding.
      operationId: getIamV2RoleBinding
      parameters:
      - description: The unique identifier for the role binding.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2RoleBinding_200_response'
          description: Role Binding.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Role Binding
      tags:
      - Role Bindings (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/role-bindings/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/role-bindings/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/role-bindings/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /notifications/v1/subscriptions:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all subscriptions.
      operationId: listNotificationsV1Subscriptions
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 250
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNotificationsV1Subscriptions_200_response'
          description: Subscription.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Subscriptions
      tags:
      - Subscriptions (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/subscriptions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/subscriptions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/subscriptions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/subscriptions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/subscriptions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/subscriptions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/subscriptions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a subscription.
      operationId: createNotificationsV1Subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNotificationsV1Subscription_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationsV1Subscription_request'
          description: A Subscription was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Subscription resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/notifications/v1/subscriptions/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Subscription
      tags:
      - Subscriptions (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/notifications/v1/subscriptions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"current_state":"ENABLED","notification_type":{"id":"string"},"integrations":[{"id":"string"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/subscriptions")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/subscriptions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"current_state\\\":\\\"ENABLED\\\
          \",\\\"notification_type\\\":{\\\"id\\\":\\\"string\\\"},\\\"integrations\\\
          \":[{\\\"id\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/notifications/v1/subscriptions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/subscriptions",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            current_state: 'ENABLED',
            notification_type: {id: 'string'},
            integrations: [{id: 'string'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/subscriptions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/subscriptions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notifications/v1/subscriptions/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a subscription.
      operationId: deleteNotificationsV1Subscription
      parameters:
      - description: The unique identifier for the subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Subscription is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Subscription
      tags:
      - Subscriptions (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/notifications/v1/subscriptions/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/subscriptions/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a subscription.
      operationId: getNotificationsV1Subscription
      parameters:
      - description: The unique identifier for the subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationsV1Subscription_200_response'
          description: Subscription.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Subscription
      tags:
      - Subscriptions (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/subscriptions/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/subscriptions/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a subscription.

      operationId: updateNotificationsV1Subscription
      parameters:
      - description: The unique identifier for the subscription.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications.v1.SubscriptionUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationsV1Subscription_200_response'
          description: Subscription.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update a Subscription
      tags:
      - Subscriptions (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"current_state":"ENABLED","notification_type":{"id":"string"},"integrations":[{"id":"string"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"current_state\\\":\\\"ENABLED\\\
          \",\\\"notification_type\\\":{\\\"id\\\":\\\"string\\\"},\\\"integrations\\\
          \":[{\\\"id\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/notifications/v1/subscriptions/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/subscriptions/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            current_state: 'ENABLED',
            notification_type: {id: 'string'},
            integrations: [{id: 'string'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/subscriptions/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"current_state\":\"ENABLED\",\"notification_type\":{\"id\":\"string\"},\"integrations\":[{\"id\":\"string\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notifications/v1/integrations:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all integrations.
      operationId: listNotificationsV1Integrations
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 250
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNotificationsV1Integrations_200_response'
          description: Integration.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Integrations
      tags:
      - Integrations (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/integrations \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/integrations", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an integration.
      operationId: createNotificationsV1Integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNotificationsV1Integration_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationsV1Integration_request'
          description: An Integration was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Integration resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/notifications/v1/integrations/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create an Integration
      tags:
      - Integrations (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/notifications/v1/integrations \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Slack integration","description":"A Slack channel integration","target":{"kind":"Slack","webhook_url":"https://hooks.slack.com/services/{id}/{id}/{id}"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Slack integration\\\
          \",\\\"description\\\":\\\"A Slack channel integration\\\",\\\"target\\\"\
          :{\\\"kind\\\":\\\"Slack\\\",\\\"webhook_url\\\":\\\"https://hooks.slack.com/services/{id}/{id}/{id}\\\
          \"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/notifications/v1/integrations", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'Slack integration',
            description: 'A Slack channel integration',
            target: {kind: 'Slack', webhook_url: 'https://hooks.slack.com/services/{id}/{id}/{id}'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notifications/v1/integrations/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an integration.
      operationId: deleteNotificationsV1Integration
      parameters:
      - description: The unique identifier for the integration.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Integration is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete an Integration
      tags:
      - Integrations (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/notifications/v1/integrations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an integration.
      operationId: getNotificationsV1Integration
      parameters:
      - description: The unique identifier for the integration.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationsV1Integration_200_response'
          description: Integration.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read an Integration
      tags:
      - Integrations (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/integrations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an integration.

      operationId: updateNotificationsV1Integration
      parameters:
      - description: The unique identifier for the integration.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications.v1.Integration'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationsV1Integration_200_response'
          description: Integration.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update an Integration
      tags:
      - Integrations (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Slack integration","description":"A Slack channel integration","target":{"kind":"Slack","webhook_url":"https://hooks.slack.com/services/{id}/{id}/{id}"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Slack integration\\\
          \",\\\"description\\\":\\\"A Slack channel integration\\\",\\\"target\\\"\
          :{\\\"kind\\\":\\\"Slack\\\",\\\"webhook_url\\\":\\\"https://hooks.slack.com/services/{id}/{id}/{id}\\\
          \"}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/notifications/v1/integrations/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'Slack integration',
            description: 'A Slack channel integration',
            target: {kind: 'Slack', webhook_url: 'https://hooks.slack.com/services/{id}/{id}/{id}'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notifications/v1/integrations:test:
    post:
      description: |
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Sends a test notification to validate the integration. This is supported only for Webhook, Slack
        and MsTeams targets
      operationId: testNotificationsV1Integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNotificationsV1Integration_request'
      responses:
        "204":
          description: Notification sent to test integration.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: "Test a Webhook, Slack or Microsoft Teams integration"
      tags:
      - Integrations (notifications/v1)
      x-name: notifications.v1.Integration
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/notifications/v1/integrations:test \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Slack integration","description":"A Slack channel integration","target":{"kind":"Slack","webhook_url":"https://hooks.slack.com/services/{id}/{id}/{id}"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/integrations:test")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/integrations:test\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Slack integration\\\
          \",\\\"description\\\":\\\"A Slack channel integration\\\",\\\"target\\\"\
          :{\\\"kind\\\":\\\"Slack\\\",\\\"webhook_url\\\":\\\"https://hooks.slack.com/services/{id}/{id}/{id}\\\
          \"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/notifications/v1/integrations:test", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/integrations:test",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'Slack integration',
            description: 'A Slack channel integration',
            target: {kind: 'Slack', webhook_url: 'https://hooks.slack.com/services/{id}/{id}/{id}'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/integrations:test");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/integrations:test");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"Slack integration\",\"description\":\"A Slack channel integration\",\"target\":{\"kind\":\"Slack\",\"webhook_url\":\"https://hooks.slack.com/services/{id}/{id}/{id}\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notifications/v1/notification-types:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all notification types.
      operationId: listNotificationsV1NotificationTypes
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 250
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNotificationsV1NotificationTypes_200_response'
          description: Notification Type.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Notification Types
      tags:
      - Notification Types (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/notification-types \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/notification-types")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/notification-types\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/notification-types", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/notification-types",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/notification-types");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/notification-types");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /notifications/v1/notification-types/{id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a notification type.
      operationId: getNotificationsV1NotificationType
      parameters:
      - description: The unique identifier for the notification type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationsV1NotificationType_200_response'
          description: Notification Type.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Notification Type
      tags:
      - Notification Types (notifications/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/notifications/v1/notification-types/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/notifications/v1/notification-types/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/notifications/v1/notification-types/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/notifications/v1/notification-types/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/notifications/v1/notification-types/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/notifications/v1/notification-types/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/notifications/v1/notification-types/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /cmk/v2/clusters:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all clusters.
      operationId: listCmkV2Clusters
      parameters:
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listCmkV2Clusters_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Clusters
      tags:
      - Clusters (cmk/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/cmk/v2/clusters?environment=env-00000&spec.network=n-00000%2Cn-00001");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a cluster.
      operationId: createCmkV2Cluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCmkV2Cluster_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCmkV2Cluster_202_response'
          description: A Cluster is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Cluster resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/cmk/v2/clusters/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Cluster
      tags:
      - Clusters (cmk/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/cmk/v2/clusters \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"ProdKafkaCluster","availability":"SINGLE_ZONE","cloud":"GCP","region":"us-east4","config":{"kind":"Basic"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"n-00000","environment":"string"},"byok":{"id":"cck-00000"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"byok\":{\"id\":\"cck-00000\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/cmk/v2/clusters")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/cmk/v2/clusters\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"ProdKafkaCluster\\\",\\\"availability\\\":\\\"SINGLE_ZONE\\\",\\\"\
          cloud\\\":\\\"GCP\\\",\\\"region\\\":\\\"us-east4\\\",\\\"config\\\":{\\\
          \"kind\\\":\\\"Basic\\\"},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\
          \",\\\"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"\
          n-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"byok\\\":{\\\"id\\\"\
          :\\\"cck-00000\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"byok\":{\"id\":\"cck-00000\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/cmk/v2/clusters", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/cmk/v2/clusters",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'ProdKafkaCluster',
              availability: 'SINGLE_ZONE',
              cloud: 'GCP',
              region: 'us-east4',
              config: {kind: 'Basic'},
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'n-00000', environment: 'string'},
              byok: {id: 'cck-00000'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/cmk/v2/clusters");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"byok\":{\"id\":\"cck-00000\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/cmk/v2/clusters");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"byok\":{\"id\":\"cck-00000\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /cmk/v2/clusters/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a cluster.
      operationId: deleteCmkV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Cluster is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Cluster
      tags:
      - Clusters (cmk/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/cmk/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/cmk/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a cluster.
      operationId: getCmkV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCmkV2Cluster_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Cluster
      tags:
      - Clusters (cmk/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/cmk/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/cmk/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a cluster.

      operationId: updateCmkV2Cluster
      parameters:
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCmkV2Cluster_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCmkV2Cluster_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Cluster
      tags:
      - Clusters (cmk/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"ProdKafkaCluster","availability":"SINGLE_ZONE","cloud":"GCP","region":"us-east4","config":{"kind":"Basic"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"string","environment":"string"},"byok":{"id":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"byok\":{\"id\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"ProdKafkaCluster\\\",\\\"availability\\\":\\\"SINGLE_ZONE\\\",\\\"\
          cloud\\\":\\\"GCP\\\",\\\"region\\\":\\\"us-east4\\\",\\\"config\\\":{\\\
          \"kind\\\":\\\"Basic\\\"},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\
          \",\\\"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"\
          string\\\",\\\"environment\\\":\\\"string\\\"},\\\"byok\\\":{\\\"id\\\"\
          :\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"byok\":{\"id\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/cmk/v2/clusters/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/cmk/v2/clusters/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'ProdKafkaCluster',
              availability: 'SINGLE_ZONE',
              cloud: 'GCP',
              region: 'us-east4',
              config: {kind: 'Basic'},
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'string', environment: 'string'},
              byok: {id: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"byok\":{\"id\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/cmk/v2/clusters/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"ProdKafkaCluster\",\"availability\":\"SINGLE_ZONE\",\"cloud\":\"GCP\",\"region\":\"us-east4\",\"config\":{\"kind\":\"Basic\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"byok\":{\"id\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /ksqldbcm/v2/clusters:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all clusters.
      operationId: listKsqldbcmV2Clusters
      parameters:
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listKsqldbcmV2Clusters_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Clusters
      tags:
      - Clusters (ksqldbcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/ksqldbcm/v2/clusters?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/ksqldbcm/v2/clusters?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/ksqldbcm/v2/clusters?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/ksqldbcm/v2/clusters?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/ksqldbcm/v2/clusters?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/ksqldbcm/v2/clusters?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/ksqldbcm/v2/clusters?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a cluster.
      operationId: createKsqldbcmV2Cluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createKsqldbcmV2Cluster_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createKsqldbcmV2Cluster_202_response'
          description: A Cluster is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Cluster resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/ksqldbcm/v2/clusters/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Cluster
      tags:
      - Clusters (ksqldbcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/ksqldbcm/v2/clusters \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"ksqlDB_cluster_0","use_detailed_processing_log":true,"csu":4,"kafka_cluster":{"id":"lkc-00000","environment":"string"},"credential_identity":{"id":"u-a83k9b"},"environment":{"id":"env-00000"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"ksqlDB_cluster_0\",\"use_detailed_processing_log\":true,\"csu\":4,\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"credential_identity\":{\"id\":\"u-a83k9b\"},\"environment\":{\"id\":\"env-00000\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/ksqldbcm/v2/clusters")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/ksqldbcm/v2/clusters\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"ksqlDB_cluster_0\\\",\\\"use_detailed_processing_log\\\":true,\\\"\
          csu\\\":4,\\\"kafka_cluster\\\":{\\\"id\\\":\\\"lkc-00000\\\",\\\"environment\\\
          \":\\\"string\\\"},\\\"credential_identity\\\":{\\\"id\\\":\\\"u-a83k9b\\\
          \"},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"}}}\")\n\n\treq, _\
          \ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"ksqlDB_cluster_0\",\"use_detailed_processing_log\":true,\"csu\":4,\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"credential_identity\":{\"id\":\"u-a83k9b\"},\"environment\":{\"id\":\"env-00000\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/ksqldbcm/v2/clusters", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/ksqldbcm/v2/clusters",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'ksqlDB_cluster_0',
              use_detailed_processing_log: true,
              csu: 4,
              kafka_cluster: {id: 'lkc-00000', environment: 'string'},
              credential_identity: {id: 'u-a83k9b'},
              environment: {id: 'env-00000'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/ksqldbcm/v2/clusters");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"ksqlDB_cluster_0\",\"use_detailed_processing_log\":true,\"csu\":4,\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"credential_identity\":{\"id\":\"u-a83k9b\"},\"environment\":{\"id\":\"env-00000\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/ksqldbcm/v2/clusters");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"ksqlDB_cluster_0\",\"use_detailed_processing_log\":true,\"csu\":4,\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"credential_identity\":{\"id\":\"u-a83k9b\"},\"environment\":{\"id\":\"env-00000\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /ksqldbcm/v2/clusters/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a cluster.
      operationId: deleteKsqldbcmV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Cluster is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Cluster
      tags:
      - Clusters (ksqldbcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a cluster.
      operationId: getKsqldbcmV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getKsqldbcmV2Cluster_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Cluster
      tags:
      - Clusters (ksqldbcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/ksqldbcm/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a list of "names" of the active connectors. You can then make a [read request](#operation/readConnectv1Connector) for a specific connector by name.
      operationId: listConnectv1Connectors
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - MyGcsLogsBucketConnector
              - MyS3BucketConnector
              - MyDatagenConnector
              schema:
                description: List of connector names
                items:
                  description: Connector name
                  type: string
                type: array
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Connectors
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a new connector. Returns the new connector information if successful.
      operationId: createConnectv1Connector
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              name: MyGcsLogsBucketConnector
              config:
                connector.class: GcsSink
                data.format: BYTES
                flush.size: "1000"
                gcs.bucket.name: APILogsBucket
                gcs.credentials.config: '****************'
                kafka.api.key: '****************'
                kafka.api.secret: '****************'
                name: MyGcsLogsBucketConnector
                tasks.max: "2"
                time.interval: DAILY
                topics: APILogsTopic
            schema:
              $ref: '#/components/schemas/createConnectv1Connector_request'
        description: ""
      responses:
        "201":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "1"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Created
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/createConnectv1Connector_400_response'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Failed to find any class that implements Connector and which
                  name matches io.confluent.connect.<connector-class>...
              schema:
                $ref: '#/components/schemas/createConnectv1Connector_500_response'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Connector
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"string","config":{"connector.class":"string","name":"string","kafka.api.key":"string","kafka.api.secret":"string","property1":"string","property2":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"string\",\"config\":{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"config\\\
          \":{\\\"connector.class\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\
          \"kafka.api.key\\\":\\\"string\\\",\\\"kafka.api.secret\\\":\\\"string\\\
          \",\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"name\":\"string\",\"config\":{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            name: 'string',
            config: {
              'connector.class': 'string',
              name: 'string',
              'kafka.api.key': 'string',
              'kafka.api.secret': 'string',
              property1: 'string',
              property2: 'string'
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"name\":\"string\",\"config\":{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"name\":\"string\",\"config\":{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors?expand=info,status,id:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve an object with the queried expansions of all connectors. Without `expand` query parameter, this list connector’s endpoint will return a [list of only the connector names](#operation/listConnectv1Connectors).
      operationId: listConnectv1ConnectorsWithExpansions
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          - id : Returns metadata of each connector such as id and id type.
          - info : Returns metadata of each connector such as the configuration, task
          information, and type of connector.
          - status : Returns additional state information of each connector including their status and tasks.
        explode: true
        in: query
        name: expand
        required: false
        schema:
          enum:
          - id
          - info
          - status
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                MyGcsLogsBucketConnector:
                  id:
                    id: lcc-xxxxx
                    id_type: ID
                  info:
                    name: MyGcsLogsBucketConnector
                    config:
                      cloud.environment: prod
                      cloud.provider: aws
                      connector.class: GcsSink
                      data.format: BYTES
                      flush.size: "1000"
                      gcs.bucket.name: APILogsBucket
                      gcs.credentials.config: '****************'
                      kafka.api.key: '****************'
                      kafka.api.secret: '****************'
                      kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                      kafka.region: us-west-2
                      name: MyGcsLogsBucketConnector
                      tasks.max: "1"
                      time.interval: DAILY
                      topics: APILogsTopic
                      type: sink
                  status:
                    name: MyGcsLogsBucketConnector
                    connector:
                      state: PROVISIONING
                      worker_id: MyGcsLogsBucketConnector
                      trace: ""
                    tasks: []
                    type: sink
                MyS3BucketConnector:
                  id:
                    id: lcc-xxxxx
                    id_type: ID
                  info:
                    name: MyS3BucketConnector
                    config:
                      cloud.environment: prod
                      cloud.provider: aws
                      connector.class: S3Sink
                      data.format: BYTES
                      flush.size: "1000"
                      s3.bucket: APILogsBucket
                      aws.access.key.id: '************'
                      aws.secret.access.key: '**********'
                      kafka.api.key: '****************'
                      kafka.api.secret: '****************'
                      kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                      kafka.region: us-west-2
                      name: MyS3BucketConnector
                      tasks.max: "1"
                      time.interval: DAILY
                      topics: APILogsTopic
                      type: source
                  status:
                    name: MyS3BucketConnector
                    connector:
                      state: FAILED
                      worker_id: MyS3BucketConnector
                      trace: |
                        There were some errors with your configuration:
                        topics: Provided Kafka ApiKey is invalid
                        kafka.api.secret: Provided Kafka ApiKey is invalid
                    tasks: []
                    type: sink
                MyDatagenConnector:
                  id:
                    id: lcc-xxxxx
                    id_type: ID
                  info:
                    name: MyDatagenConnector
                    config:
                      cloud.environment: prod
                      cloud.provider: aws
                      connector.class: DatagenSource
                      data.format: BYTES
                      flush.size: "1000"
                      quickstart: ORDERS
                      kafka.api.key: '****************'
                      kafka.api.secret: '****************'
                      kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                      kafka.region: us-west-2
                      name: MyDatagenConnector
                      tasks.max: "1"
                      time.interval: DAILY
                      topics: APILogsTopic
                      type: source
                  status:
                    name: MyDatagenConnector
                    connector:
                      state: RUNNING
                      worker_id: MyDatagenConnector
                      trace: ""
                    tasks:
                    - id: 0
                      msg: ""
                      state: RUNNING
                      worker_id: MyDatagenConnector
                    type: source
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorExpansionMap'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Connectors with Expansions
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors?expand=info%2Cstatus%2Cid");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/config:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get the configuration for the connector.
      operationId: getConnectv1ConnectorConfig
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                cloud.environment: prod
                cloud.provider: aws
                connector.class: GcsSink
                data.format: BYTES
                flush.size: "1000"
                gcs.bucket.name: APILogsBucket
                gcs.credentials.config: '****************'
                kafka.api.key: '****************'
                kafka.api.secret: '****************'
                kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                kafka.region: us-west-2
                name: MyGcsLogsBucketConnector
                tasks.max: "2"
                time.interval: DAILY
                topics: APILogsTopic
              schema:
                $ref: '#/components/schemas/getConnectv1ConnectorConfig_200_response'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Connector Configuration
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "Create a new connector using the given configuration, or update\
        \ the configuration for an existing connector. Returns information about the\
        \ connector after the change has been made."
      operationId: createOrUpdateConnectv1ConnectorConfig
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              connector.class: GcsSink
              data.format: BYTES
              flush.size: "1000"
              gcs.bucket.name: APILogsBucket
              gcs.credentials.config: '****************'
              kafka.api.key: '****************'
              kafka.api.secret: '****************'
              name: MyGcsLogsBucketConnector
              tasks.max: "2"
              time.interval: DAILY
              topics: APILogsTopic
            schema:
              $ref: '#/components/schemas/createOrUpdateConnectv1ConnectorConfig_request'
        description: Configuration parameters for the connector. All values should
          be strings.
      responses:
        "201":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "2"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                - connector: MyGcsLogsBucketConnector
                  task: 1
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Created
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Failed to find any class that implements Connector and which
                  name matches io.confluent.connect.<connector-class>...
              schema:
                $ref: '#/components/schemas/createConnectv1Connector_500_response'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create or Update a Connector Configuration
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"connector.class":"string","name":"string","kafka.api.key":"string","kafka.api.secret":"string","property1":"string","property2":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config")
            .put(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"connector.class\\\":\\\"string\\\
          \",\\\"name\\\":\\\"string\\\",\\\"kafka.api.key\\\":\\\"string\\\",\\\"\
          kafka.api.secret\\\":\\\"string\\\",\\\"property1\\\":\\\"string\\\",\\\"\
          property2\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            'connector.class': 'string',
            name: 'string',
            'kafka.api.key': 'string',
            'kafka.api.secret': 'string',
            property1: 'string',
            property2: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/config");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"connector.class\":\"string\",\"name\":\"string\",\"kafka.api.key\":\"string\",\"kafka.api.secret\":\"string\",\"property1\":\"string\",\"property2\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}:
    delete:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete a connector. Halts all tasks and deletes the connector configuration.
      operationId: deleteConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                error: null
              schema:
                $ref: '#/components/schemas/deleteConnectv1Connector_200_response'
          description: OK
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Connector
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get information about the connector.
      operationId: readConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "1"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Connector
      tags:
      - Connectors (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/pause:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Pause the connector and its tasks. Stops message processing until the connector is resumed. This call is asynchronous and the tasks will not transition to PAUSED state at the same time.
      operationId: pauseConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Accepted
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Pause a Connector
      tags:
      - Lifecycle (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause")
            .put(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause\"\
          \n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/pause");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/resume:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resume a paused connector or do nothing if the connector is not paused. This call is asynchronous and the tasks will not transition to RUNNING state at the same time.
      operationId: resumeConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Accepted
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Resume a Connector
      tags:
      - Lifecycle (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume")
            .put(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume\"\
          \n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/resume");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/status:
    get:
      description: "Get current status of the connector. This includes whether it\
        \ is running, failed, or paused. Also includes which worker it is assigned\
        \ to, error information if it has failed, and the state of all its tasks."
      operationId: readConnectv1ConnectorStatus
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                connector:
                  state: PROVISIONING
                  worker_id: MyGcsLogsBucketConnector
                  trace: ""
                tasks: []
                type: source
              schema:
                $ref: '#/components/schemas/readConnectv1ConnectorStatus_200_response'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Connector Status
      tags:
      - Status (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/status");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/tasks:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get a list of tasks currently running for the connector.
      operationId: listConnectv1ConnectorTasks
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - id:
                  connector: MyGcsLogsBucketConnector
                  task: 2
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "2"
                  time.interval: DAILY
                  topics: APILogsTopic
              schema:
                $ref: '#/components/schemas/connect.v1.Connectors'
          description: Connector Task.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Connector Tasks
      tags:
      - Status (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connectors/%7Bconnector_name%7D/tasks");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of connector plugins installed in the Kafka Connect cluster.
      operationId: listConnectv1ConnectorPlugins
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - class: BigQuerySink
                type: sink
              - class: KinesisSource
                type: source
                version: 0.1.0
              - class: PostgresSource
                type: source
                version: 0.1.0
              - class: S3_SINK
                type: sink
              - class: GcsSink
                type: sink
                version: 0.2.0
              schema:
                items:
                  $ref: '#/components/schemas/listConnectv1ConnectorPlugins_200_response_inner'
                type: array
          description: Connector Plugin.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Connector Plugins
      tags:
      - Plugins (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins/{plugin_name}/config/validate:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Validate the provided configuration values against the configuration definition. This API performs per config validation and returns suggested values and validation error messages.
      operationId: validateConnectv1ConnectorPlugin
      parameters:
      - description: The unique name of the connector plugin.
        explode: false
        in: path
        name: plugin_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              cloud.environment: prod
              cloud.provider: aws
              connector.class: GcsSink
              data.format: BYTES
              flush.size: "500"
              gcs.bucket.name: APILogsBucket
              gcs.credentials.config: '****************'
              kafka.api.key: '****************'
              kafka.api.secret: '****************'
              kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
              kafka.region: us-west-2
              name: MyGcsLogsBucketConnector
              tasks.max: "2"
              time.interval: DAILY
              topics: APILogsTopic
            schema:
              additionalProperties:
                description: Other configuration parameters for the connector. All
                  values should be strings. See the connector's docs for the list
                  of options.
                type: string
              description: Configuration parameters for the connector. All values
                should be strings.
              type: object
        description: Configuration parameters for the connector. All values should
          be strings.
      responses:
        "200":
          content:
            application/json:
              example:
                name: io.confluent.connect.gcs.GcsSinkConnector
                groups:
                - Organize my data by...
                - Which topics do you want to get data from?
                - Messages
                - How should we connect to your data?
                - Google Cloud Storage details
                - Kafka Cluster credentials
                - Number of tasks for this connector
                error_count: 1
                configs:
                - definition:
                    name: name
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Sets a name for your connector.
                    group: How should we connect to your data?
                    width: NONE
                    display_name: Connector name
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: name
                    value: "{{.logicalClusterId}}"
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: connector.class
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: How should we connect to your data?
                    width: NONE
                    display_name: Connector class
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: connector.class
                    value: io.confluent.connect.gcs.GcsSinkConnector
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: kafka.api.key
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Kafka Cluster credentials
                    width: NONE
                    display_name: Kafka API Key
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: kafka.api.key
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: kafka.api.secret
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Kafka Cluster credentials
                    width: NONE
                    display_name: Kafka API Secret
                    dependents:
                    - kafka.api.key
                    order: 2
                    alias: ""
                  value:
                    name: kafka.api.secret
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: topics
                    type: LIST
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Identifies the topic name or a comma-separated
                      list of topic names.
                    group: Which topics do you want to get data from?
                    width: NONE
                    display_name: Topic names
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: topics
                    value: test1
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: data.format
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: "Sets the input/output message format. Valid entries\
                      \ are AVRO, JSON, or BYTES"
                    group: Messages
                    width: NONE
                    display_name: Message format
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: data.format
                    value: BYTES
                    recommended_values:
                    - BYTES
                    - JSON
                    - AVRO
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: gcs.credentials.config
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Contents of the downloaded GCP service account
                      JSON file.
                    group: Google Cloud Storage details
                    width: NONE
                    display_name: Google Cloud Storage credentials.
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: gcs.credentials.config
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: gcs.bucket.name
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: A Google Cloud Storage bucket must be in the same
                      region as your Confluent Cloud cluster.
                    group: Google Cloud Storage details
                    width: NONE
                    display_name: Bucket name.
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: gcs.bucket.name
                    value: gmagare
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: time.interval
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Sets how your messages grouped in storage. Valid
                      entries are DAILY or HOURLY.
                    group: Organize my data by...
                    width: NONE
                    display_name: Time interval
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: time.interval
                    value: DAILY
                    recommended_values:
                    - DAILY
                    - HOURLY
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: tasks.max
                    type: INT
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Number of tasks for this connector
                    width: NONE
                    display_name: Tasks
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: tasks.max
                    value: "1"
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: flush.size
                    type: INT
                    required: true
                    default_value: "1000"
                    importance: HIGH
                    documentation: "This value defaults to 1000. For example, if you\
                      \ use the default setting of 1000 and your topic has six partitions,\
                      \ files start to be created in the storage bucket after more\
                      \ than 1000 records exist in each partition. Note that the default\
                      \ value of 1000 can be increased if needed."
                    group: Organize my data by...
                    width: NONE
                    display_name: Flush size
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: flush.size
                    value: "1"
                    recommended_values: []
                    errors:
                    - '"flush.size" should be greater than or equal to 1000'
                    visible: true
                  metadata: {}
              schema:
                $ref: '#/components/schemas/validateConnectv1ConnectorPlugin_200_response'
          description: Connector Plugin.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Validate a Connector Plugin
      tags:
      - Plugins (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"property1":"string","property2":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"property1\":\"string\",\"property2\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate")
            .put(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"property1\\\":\\\"string\\\",\\\
          \"property2\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"property1\":\"string\",\"property2\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({property1: 'string', property2: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"property1\":\"string\",\"property2\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/connect/v1/environments/%7Benvironment_id%7D/clusters/%7Bkafka_cluster_id%7D/connector-plugins/%7Bplugin_name%7D/config/validate");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"property1\":\"string\",\"property2\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the Kafka cluster with the specified ``cluster_id``.
      operationId: getKafkaCluster
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaCluster
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                  resource_name: crn:///kafka=cluster-1
                cluster_id: cluster-1
                controller:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                acls:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
                brokers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
                broker_configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                consumer_groups:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                topics:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: The Kafka cluster.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Cluster
      tags:
      - Cluster (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/acls:batch:
    post:
      description: Creates ACLs.
      operationId: batchCreateKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/BatchCreateAclRequest'
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                create_acls_cluster_name_invalid:
                  description: Thrown when creating an ACL for a CLUSTER resource
                    specifying the wrong resource name.
                  value:
                    error_code: 40002
                    message: The only valid name for the CLUSTER resource is kafka-cluster"
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Create ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"resource_type\\\
          \":\\\"UNKNOWN\\\",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\
          \":\\\"string\\\",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\
          \",\\\"operation\\\":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}]}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/acls:batch", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls:batch",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [
              {
                resource_type: 'UNKNOWN',
                resource_name: 'string',
                pattern_type: 'string',
                principal: 'string',
                host: 'string',
                operation: 'string',
                permission: 'string'
              }
            ]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/acls:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Deletes the list of ACLs that matches the search criteria.
      operationId: deleteKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: true
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: true
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: true
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: true
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: cluster-2
                  pattern_type: LITERAL
                  principal: alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/deleteKafkaAcls_200_response'
          description: The list of deleted ACLs.
        "400":
          content:
            application/json:
              examples:
                delete_acls_unspecified_resource_type:
                  description: Thrown when trying to delete ACLs without specifying
                    a valid resource type.
                  value:
                    error_code: 400
                    message: resource_type cannot be unspecified or UNKNOWN
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of ACLs that match the search criteria.
      operationId: getKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaAclList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=alice
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: cluster-2
                  pattern_type: LITERAL
                  principal: alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/AclDataList'
          description: The list of ACLs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Search ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Creates an ACL.
      operationId: createKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateAclRequest'
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                create_acls_cluster_name_invalid:
                  description: Thrown when creating an ACL for a CLUSTER resource
                    specifying the wrong resource name.
                  value:
                    error_code: 40002
                    message: The only valid name for the CLUSTER resource is kafka-cluster"
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create an ACL
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"resource_type\\\":\\\"UNKNOWN\\\
          \",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\":\\\"string\\\
          \",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\",\\\"operation\\\
          \":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/acls", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            resource_type: 'UNKNOWN',
            resource_name: 'string',
            pattern_type: 'string',
            principal: 'string',
            host: 'string',
            operation: 'string',
            permission: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/broker-configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of configuration parameters for the specified Kafka
        cluster.
      operationId: listKafkaClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                  next: null
                data:
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                    resource_name: crn:///kafka=cluster-1/broker-config=max.connections
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: max.connections
                  value: "1000"
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: max.connections
                    value: "1000"
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: max.connections
                    value: "2147483647"
                    source: DEFAULT_CONFIG
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                    resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Cluster Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/broker-configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates or deletes a set of Kafka cluster configuration parameters.
      operationId: updateKafkaClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterClusterConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Cluster Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/broker-configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/broker-configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resets the configuration parameter specified by ``name`` to its
        default value.
      operationId: deleteKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset Cluster Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the configuration parameter specified by ``name``.
      operationId: getKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                  resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                cluster_id: cluster-1
                config_type: BROKER
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigData'
          description: The cluster configuration parameter.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Cluster Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates the configuration parameter specified by ``name``.
      operationId: updateKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateClusterConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update Cluster Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of consumer groups that belong to the specified
        Kafka cluster.
      operationId: listKafkaConsumerGroups
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                  next: null
                data:
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                  state: STABLE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-2
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
                  state: PREPARING_REBALANCE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-3
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
                  state: DEAD
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupDataList'
          description: The list of consumer groups.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumer Groups
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the consumer group specified by the ``consumer_group_id``.
      operationId: getKafkaConsumerGroup
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroup
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                state: STABLE
                coordinator:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                consumers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                lag_summary:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupData'
          description: The consumer group.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Group
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of consumers that belong to the specified consumer
        group.
      operationId: listKafkaConsumers
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  next: null
                data:
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
              schema:
                $ref: '#/components/schemas/ConsumerDataList'
          description: The list of consumers.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumers
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Returns the max and total lag of the consumers belonging to the
        specified consumer group.
      operationId: getKafkaConsumerGroupLagSummary
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupLagSummary
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                  resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                max_lag_consumer_id: consumer-1
                max_lag_instance_id: consumer-instance-1
                max_lag_client_id: client-1
                max_lag_topic_name: topic-1
                max_lag_partition_id: 1
                max_lag: 100
                total_lag: 110
                max_lag_consumer:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                max_lag_partition:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              schema:
                $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
          description: The max and total consumer lag in a consumer group.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Group Lag Summary
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Returns a list of consumer lags of the consumers belonging to the
        specified consumer group.
      operationId: listKafkaConsumerLags
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLagList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
                  next: null
                data:
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  current_offset: 1
                  log_end_offset: 101
                  lag: 100
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 2
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  current_offset: 1
                  log_end_offset: 11
                  lag: 10
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 3
                  consumer_id: consumer-3
                  instance_id: consumer-instance-3
                  client_id: client-3
                  current_offset: 1
                  log_end_offset: 1
                  lag: 0
              schema:
                $ref: '#/components/schemas/ConsumerLagDataList'
          description: The list of consumer lags.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumer Lags
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Returns the consumer lag on a partition with the given `partition_id`.
      operationId: getKafkaConsumerLag
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLag
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                current_offset: 1
                log_end_offset: 101
                lag: 100
              schema:
                $ref: '#/components/schemas/ConsumerLagData'
          description: The consumer lag.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Lag
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the consumer specified by the ``consumer_id``.
      operationId: getKafkaConsumer
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer ID.
        example: consumer-1
        explode: false
        in: path
        name: consumer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumer
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                assignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              schema:
                $ref: '#/components/schemas/ConsumerData'
          description: The consumer.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of topics that belong to the specified Kafka cluster.
      operationId: listKafkaTopics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                  next: null
                data:
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  is_internal: false
                  replication_factor: 3
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                    resource_name: crn:///kafka=cluster-1/topic=topic-2
                  cluster_id: cluster-1
                  topic_name: topic-2
                  is_internal: true
                  replication_factor: 4
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                    resource_name: crn:///kafka=cluster-1/topic=topic-3
                  cluster_id: cluster-1
                  topic_name: topic-3
                  is_internal: false
                  replication_factor: 5
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicDataList'
          description: The list of topics.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Topics
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Creates a topic.
        Also supports a dry-run mode that only validates whether the topic creation would succeed
        if the ``validate_only`` request property is explicitly specified and set to true. Note that
        when dry-run mode is being used the response status would be 200 OK instead of 201 Created.
      operationId: createKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateTopicRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
                  resource_name: crn:///kafka=cluster-1/topic=topic-X
                cluster_id: cluster-1
                topic_name: topic-X
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The created topic.
        "201":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
                  resource_name: crn:///kafka=cluster-1/topic=topic-X
                cluster_id: cluster-1
                topic_name: topic-X
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The created topic.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                create_topic_replication_factor_too_large:
                  description: Thrown when trying to create a topic with a replication
                    factor larger than the number of brokers.
                  value:
                    error_code: 40002
                    message: "Replication factor: 2 larger than available brokers:\
                      \ 1."
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"topic_name":"string","partitions_count":0,"replication_factor":0,"configs":[{"name":"string","value":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"topic_name\\\":\\\"string\\\"\
          ,\\\"partitions_count\\\":0,\\\"replication_factor\\\":0,\\\"configs\\\"\
          :[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"validate_only\\\
          \":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\t\
          req.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            topic_name: 'string',
            partitions_count: 0,
            replication_factor: 0,
            configs: [{name: 'string', value: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Deletes the topic with the given `topic_name`.
      operationId: deleteKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: Specify if authorized operations should be included in the response.
        explode: true
        in: query
        name: include_authorized_operations
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the topic with the given `topic_name`.
      operationId: getKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: Specify if authorized operations should be included in the response.
        explode: true
        in: query
        name: include_authorized_operations
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The topic.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\
        \nIncreases number of partitions on a topic.  "
      operationId: updatePartitionCountKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: Specify if authorized operations should be included in the response.
        explode: true
        in: query
        name: include_authorized_operations
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCountRequestData'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The topic.
        "400":
          content:
            application/json:
              examples:
                topic_update_partitions_invalid:
                  description: Thrown when trying to update the number of partitions
                    incorrectly.
                  value:
                    error_code: 40002
                    message: Topic already has 1 partitions.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update partition count
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"partitions_count":0}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"partitions_count\":0}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"partitions_count\\\":0}\")\n\n\
          \treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"partitions_count\":0}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/kafka/v3/clusters/cluster-1/topics/topic-1", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({partitions_count: 0}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partitions_count\":0}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"partitions_count\":0}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configs that belong to the specified topic.
      operationId: listKafkaTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates or deletes a set of topic configs.
        Also supports a dry-run mode that only validates whether the operation would succeed if the
        ``validate_only`` request property is explicitly specified and set to true.
      operationId: updateKafkaTopicConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterTopicConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resets the config with given `name` to its default value.
      operationId: deleteKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the config with the given `name`.
      operationId: getKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                cluster_id: cluster-1
                topic_name: topic-1
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_TOPIC_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_TOPIC_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigData'
          description: The topic configuration parameter.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates the config with given `name`.
      operationId: updateKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateTopicConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of partitions that belong to the specified topic.
      operationId: listKafkaPartitions
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartitionList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  next: null
                data:
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 1
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 2
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 3
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
              schema:
                $ref: '#/components/schemas/PartitionDataList'
          description: The list of partitions.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Partitions
      tags:
      - Partition (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the partition with the given `partition_id`.
      operationId: getKafkaPartition
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartition
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                leader:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                replicas:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                reassignment:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              schema:
                $ref: '#/components/schemas/PartitionData'
          description: The partition
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Partition
      tags:
      - Partition (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/-/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns all topic configurations for topics hosted by the specified
        cluster.
      operationId: listKafkaAllTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get All Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/-/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/-/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/records:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\
        \nProduce records to the given topic, returning delivery reports for each\n\
        \            record produced. This API can be used in streaming mode by setting\
        \ \"Transfer-Encoding:\n            chunked\" header. For as long as the connection\
        \ is kept open, the server will\n            keep accepting records. Records\
        \ are streamed to and from the server as Concatenated \n            JSON.\
        \ For each record sent to the server, the server will\n            asynchronously\
        \ send back a delivery report, in the same order, each with its own\n    \
        \        error_code. An error_code of 200 indicates success. The HTTP status\
        \ code will be HTTP \n            200 OK as long as the connection is successfully\
        \ established. To identify records\n            that have encountered an error,\
        \ check the error_code of each delivery report."
      operationId: produceRecord
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ProduceRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                produce_record_success:
                  description: The record was successfully produced to the topic.
                  value:
                    error_code: 200
                    cluster_id: cluster-1
                    topic_name: topic-1
                    partition_id: 1
                    offset: 0
                    timestamp: 2021-02-05T19:14:42Z
                    key:
                      type: BINARY
                      size: 7
                    value:
                      type: JSON
                      size: 15
                produce_record_bad_binary_data:
                  description: Thrown when sending a BINARY value which is not a base64-encoded
                    string.
                  value:
                    error_code: 400
                    message: "Bad Request: data=1 is not a base64 string."
              schema:
                $ref: '#/components/schemas/ProduceResponse'
          description: |-
            The response containing a delivery report for a record produced to a topic. In streaming mode,
            for each record sent, a separate delivery report will be returned, in the same order,
            each with its own error_code.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "422":
          content:
            application/json:
              examples:
                produce_record_empty_request_body:
                  description: Thrown when the request body is empty.
                  value:
                    error_code: 422
                    message: Payload error. Request body is empty. Data is required.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Produce Records
      tags:
      - Records (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"partition_id":0,"headers":[{"name":"string","value":"string"}],"key":{"type":"string","data":null},"value":{"type":"string","data":null},"timestamp":"2019-08-24T14:15:22Z"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"partition_id\\\":0,\\\"headers\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"key\\\
          \":{\\\"type\\\":\\\"string\\\",\\\"data\\\":null},\\\"value\\\":{\\\"type\\\
          \":\\\"string\\\",\\\"data\\\":null},\\\"timestamp\\\":\\\"2019-08-24T14:15:22Z\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/records", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/records",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            partition_id: 0,
            headers: [{name: 'string', value: 'string'}],
            key: {type: 'string', data: null},
            value: {type: 'string', data: null},
            timestamp: '2019-08-24T14:15:22Z'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      operationId: listKafkaLinks
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
                  next: null
                data:
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                    resource_name: null
                  source_cluster_id: src-cluster-id
                  destination_cluster_id: null
                  link_name: my-new-link-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                  cluster_link_id: eEBkTffYSESld6EO898x3w
                  topic_names:
                  - topic-sb-1
                  - topic-sb-2
                  link_state: ACTIVE
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                    resource_name: null
                  source_cluster_id: src-cluster-id
                  destination_cluster_id: null
                  link_name: my-new-link-2
                  link_id: f749116e-f847-4bd2-b1f6-5c4e518a0678
                  cluster_link_id: 90kRbvhHS9Kx9lxOUYoGeA
                  topic_names:
                  - topic-db-1
                  - topic-db-2
                  link_state: UNAVAILABLE
                  link_error: AUTHENTICATION_ERROR
                  link_error_message: Please check your api key and secret
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-3
                    resource_name: null
                  source_cluster_id: null
                  destination_cluster_id: dest-cluster-id
                  link_name: my-new-link-3
                  link_id: 9cd1711e-a4ef-4390-a35e-dfd758d97a82
                  cluster_link_id: nNFxHqTvQ5CjXt_XWNl6gg
                  topic_names: null
                  link_state: ACTIVE
              schema:
                $ref: '#/components/schemas/ListLinksResponseDataList'
          description: A list of link names and properties
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List all cluster links in the dest cluster
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: createKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: true
        in: query
        name: link_name
        required: true
        schema:
          type: string
        style: form
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      - description: "To synchronously validate that the source cluster ID is expected\
          \ and the dest cluster has the permission to read topics in the source cluster.\
          \ Default: true"
        example: false
        explode: true
        in: query
        name: validate_link
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/CreateLinkRequest'
      responses:
        "204":
          description: "Operation succeeded, no content in the response"
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"source_cluster_id":"string","destination_cluster_id":"string","configs":[{"name":"name","value":"value"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"source_cluster_id\\\":\\\"string\\\
          \",\\\"destination_cluster_id\\\":\\\"string\\\",\\\"configs\\\":[{\\\"\
          name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            source_cluster_id: 'string',
            destination_cluster_id: 'string',
            configs: [{name: 'name', value: 'value'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}:
    delete:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: deleteKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "Force the action. Default: false"
        example: false
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: "Operation succeeded, no content in the response"
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      operationId: getKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                link_at_destination_cluster:
                  description: Link at destination cluster
                  value:
                    kind: KafkaLinkData
                    metadata:
                      self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                    resource_name: null
                    source_cluster_id: src-cluster-id
                    destination_cluster_id: null
                    link_name: my-new-link-1
                    link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                    cluster_link_id: eEBkTffYSESld6EO898x3w
                    topic_names:
                    - topic-db-1
                    - topic-db-2
                link_at_source_cluster:
                  description: Link at source cluster
                  value:
                    kind: KafkaLinkData
                    metadata:
                      self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                    resource_name: null
                    source_cluster_id: null
                    destination_cluster_id: dst-cluster-id
                    link_name: my-new-link-1
                    link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                    cluster_link_id: eEBkTffYSESld6EO898x3w
                    topic_names: null
              schema:
                $ref: '#/components/schemas/ListLinksResponseData'
          description: Single link name and properties
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/default-configs:
    get:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: listKafkaDefaultTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Default Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:
    get:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: listKafkaLinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
                  next: null
                data:
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: consumer.offset.sync.ms
                  value: "3825940"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - cosm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: acl.sync.ms
                  value: "5000"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - asm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List all configs of the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs/{config_name}:
    delete:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: deleteKafkaLinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Operation succeeded, no content in the response"
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset the given config to default value
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: getKafkaLinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                  resource_name: null
                cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                name: consumer.offset.sync.ms
                value: "3825940"
                default: false
                read_only: false
                sensitive: false
                source: DYNAMIC_CLUSTER_LINK_CONFIG
                synonyms:
                - cosm
                link_name: link-db-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                topics:
                - topic-db-1
                - topic-db-2
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseData'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the config under the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: updateKafkaLinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateLinkConfigRequest'
      responses:
        "204":
          description: "Operation succeeded, no content in the response"
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Alter the config under the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:alter:
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Batch Alter Cluster Link Configs
      operationId: updateKafkaLinkConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterLinkConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Cluster Link Configs
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics under the link
      operationId: listKafkaMirrorTopicsUnderLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The status of the mirror topic. If not specified, all mirror\
          \ topics will be returned."
        example: ACTIVE
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: ACTIVE
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: STOPPED
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic in the destination cluster mirroring a topic in
        the source cluster
      operationId: createKafkaMirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateMirrorTopicRequest'
      responses:
        "204":
          description: "Operation succeeded, no content in the response"
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a mirror topic
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"source_topic_name":"string","mirror_topic_name":"string","replication_factor":0,"configs":[{"name":"name","value":"value"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"source_topic_name\\\":\\\"string\\\
          \",\\\"mirror_topic_name\\\":\\\"string\\\",\\\"replication_factor\\\":0,\\\
          \"configs\\\":[{\\\"name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            source_topic_name: 'string',
            mirror_topic_name: 'string',
            replication_factor: 0,
            configs: [{name: 'name', value: 'value'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/-/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics in the cluster
      operationId: listKafkaMirrorTopics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: "The status of the mirror topic. If not specified, all mirror\
          \ topics will be returned."
        example: ACTIVE
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: ACTIVE
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: STOPPED
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/-/mirrors", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/-/mirrors",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors/{mirror_topic_name}:
    get:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: readKafkaMirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: Cluster Linking mirror topic name
        example: topic-1
        explode: false
        in: path
        name: mirror_topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
                  resource_name: crn:///kafka=cluster-1
                link_name: link-sb-1
                mirror_topic_name: topic-1
                source_topic_name: topic-1
                num_partitions: 3
                mirror_lags:
                - partition: 0
                  lag: 0
                  last_source_fetch_offset: 0
                - partition: 1
                  lag: 10000
                  last_source_fetch_offset: 1000
                - partition: 2
                  lag: 40000
                  last_source_fetch_offset: 12030
                mirror_status: ACTIVE
                state_time_ms: 1612550939300
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          description: Metadata of the mirror topic
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the mirror topic
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:promote:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: updateKafkaMirrorTopicsPromote
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Promote the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string']}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:failover:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: updateKafkaMirrorTopicsFailover
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Failover the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string']}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:pause:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: updateKafkaMirrorTopicsPause
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Pause the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string']}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:resume:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)"
      operationId: updateKafkaMirrorTopicsResume
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: "To validate the action can be performed successfully or not.\
          \ Default: false"
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: "Cannot deserialize value of type `java.lang.Integer`\
                      \ from String \"A\": not a valid `java.lang.Integer` value"
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
                ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
                \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
                \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table>\
                \ <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
                \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
                \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
                \ </html>\"}"
              schema:
                type: string
          description: "Indicates that a rate limit threshold has been reached, and\
            \ the client should retry again later."
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Resume the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string']}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
      url: https://pkc-00000.region.provider.confluent.cloud
      x-audience: business-unit-internal
  /service-quota/v1/applied-quotas:
    get:
      description: |
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all applied quotas.

        Shows all quotas for a given scope.
      operationId: listServiceQuotaV1AppliedQuotas
      parameters:
      - description: |
          The applied scope the quota belongs to.
        example: ORGANIZATION
        explode: true
        in: query
        name: scope
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The environment ID the quota is associated with.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The network ID the quota is associated with.
        example: n-12034
        explode: true
        in: query
        name: network
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The kafka cluster ID the quota is associated with.
        example: lkc-00000
        explode: true
        in: query
        name: kafka_cluster
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The id (quota code) that this quota belongs to.
        example: iam.max_environments.per_org
        explode: true
        in: query
        name: id
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 200
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listServiceQuotaV1AppliedQuotas_200_response'
          description: Applied Quota.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Applied Quotas
      tags:
      - Applied Quotas (service-quota/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/service-quota/v1/applied-quotas?scope=ORGANIZATION&environment=env-00000&network=n-12034&kafka_cluster=lkc-00000&id=iam.max_environments.per_org");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /service-quota/v1/applied-quotas/{id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an applied quota.
      operationId: getServiceQuotaV1AppliedQuota
      parameters:
      - description: |
          The environment ID the quota is associated with.
          This field is only required when retrieving a single quota and
          the scope of quota is "ENVIRONMENT" or "NETWORK" or "KAFKA_CLUSTER".
        example: env-00000
        explode: true
        in: query
        name: environment
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The network ID the quota is associated with.
          This field is only required when retrieving a single quota and
          the scope of quota is "NETWORK".
        example: n-12034
        explode: true
        in: query
        name: network
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: |
          The kafka cluster ID the quota is associated with.
          This field is required only when the scope of quota is "KAFKA_CLUSTER".
        example: lkc-00000
        explode: true
        in: query
        name: kafka_cluster
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the applied quota.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServiceQuotaV1AppliedQuota_200_response'
          description: Applied Quota.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read an Applied Quota
      tags:
      - Applied Quotas (service-quota/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/service-quota/v1/applied-quotas/%7Bid%7D?environment=env-00000&network=n-12034&kafka_cluster=lkc-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /service-quota/v1/scopes:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all scopes.
      operationId: listServiceQuotaV1Scopes
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 200
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listServiceQuotaV1Scopes_200_response'
          description: Scope.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Scopes
      tags:
      - Scopes (service-quota/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/service-quota/v1/scopes \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/service-quota/v1/scopes")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/service-quota/v1/scopes\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/service-quota/v1/scopes", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/service-quota/v1/scopes",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/service-quota/v1/scopes");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/service-quota/v1/scopes");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /service-quota/v1/scopes/{id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a scope.
      operationId: getServiceQuotaV1Scope
      parameters:
      - description: The unique identifier for the scope.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServiceQuotaV1Scope_200_response'
          description: Scope.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Scope
      tags:
      - Scopes (service-quota/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/service-quota/v1/scopes/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/service-quota/v1/scopes/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/service-quota/v1/scopes/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/service-quota/v1/scopes/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/service-quota/v1/scopes/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/service-quota/v1/scopes/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/service-quota/v1/scopes/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /partner/v2/entitlements:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all entitlements.
      operationId: listPartnerV2Entitlements
      parameters:
      - description: Filter the results by exact match for organization.id.
        example: b3a17773-05cc-4431-9560-433fb4613da8
        explode: true
        in: query
        name: organization.id
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partner.v2.EntitlementList'
          description: Entitlement.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:describe
      summary: List of Entitlements
      tags:
      - Entitlements (partner/v2)
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements?organization.id=b3a17773-05cc-4431-9560-433fb4613da8");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create an entitlement.
      operationId: createPartnerV2Entitlement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPartnerV2Entitlement_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPartnerV2Entitlement_request'
          description: An Entitlement is being created.
          headers:
            Location:
              description: Entitlement resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/partner/v2/entitlements/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:create
      summary: Create an Entitlement
      tags:
      - Entitlements (partner/v2)
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/entitlements \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"external_id":"1111-2222-3333-4444","name":"Acme Prod Entitlement","plan_id":"confluent-cloud-payg-prod","product_id":"confluent-cloud-kafka-service-azure","usage_reporting_id":"1111-2222-3333-4444","resource_id":"1111-2222-3333-4444","organization":{"related":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"external_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"name\\\":\\\"Acme Prod Entitlement\\\",\\\"plan_id\\\":\\\"confluent-cloud-payg-prod\\\
          \",\\\"product_id\\\":\\\"confluent-cloud-kafka-service-azure\\\",\\\"usage_reporting_id\\\
          \":\\\"1111-2222-3333-4444\\\",\\\"resource_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"organization\\\":{\\\"related\\\":\\\"string\\\"}}\")\n\n\treq, _\
          \ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/entitlements", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            external_id: '1111-2222-3333-4444',
            name: 'Acme Prod Entitlement',
            plan_id: 'confluent-cloud-payg-prod',
            product_id: 'confluent-cloud-kafka-service-azure',
            usage_reporting_id: '1111-2222-3333-4444',
            resource_id: '1111-2222-3333-4444',
            organization: {related: 'string'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/entitlements \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"external_id":"1111-2222-3333-4444","name":"Acme Prod Entitlement","plan_id":"confluent-cloud-payg-prod","product_id":"confluent-cloud-kafka-service-azure","usage_reporting_id":"1111-2222-3333-4444","resource_id":"1111-2222-3333-4444","organization":{"id":"string","environment":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"external_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"name\\\":\\\"Acme Prod Entitlement\\\",\\\"plan_id\\\":\\\"confluent-cloud-payg-prod\\\
          \",\\\"product_id\\\":\\\"confluent-cloud-kafka-service-azure\\\",\\\"usage_reporting_id\\\
          \":\\\"1111-2222-3333-4444\\\",\\\"resource_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"organization\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\
          \"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/entitlements", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            external_id: '1111-2222-3333-4444',
            name: 'Acme Prod Entitlement',
            plan_id: 'confluent-cloud-payg-prod',
            product_id: 'confluent-cloud-kafka-service-azure',
            usage_reporting_id: '1111-2222-3333-4444',
            resource_id: '1111-2222-3333-4444',
            organization: {id: 'string', environment: 'string'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: Partner v2
  /partner/v2/entitlements/{id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an entitlement.
      operationId: getPartnerV2Entitlement
      parameters:
      - description: Scope the operation to the given organization.id.
        example: b3a17773-05cc-4431-9560-433fb4613da8
        explode: true
        in: query
        name: organization.id
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the entitlement.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPartnerV2Entitlement_request'
          description: Entitlement.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:describe
      summary: Read an Entitlement
      tags:
      - Entitlements (partner/v2)
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements/%7Bid%7D?organization.id=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements/%7Bid%7D?organization.id=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements/%7Bid%7D?organization.id=b3a17773-05cc-4431-9560-433fb4613da8");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-request-access-name: Partner v2
  /srcm/v2/regions:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all regions.
      operationId: listSrcmV2Regions
      parameters:
      - description: Filter the results by exact match for spec.cloud.
        example: AWS
        explode: true
        in: query
        name: spec.cloud
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.region_name.
        example: us-east-2
        explode: true
        in: query
        name: spec.region_name
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.packages. Pass multiple
          times to see results matching any of the values.
        example:
        - ESSENTIALS
        - ADVANCED
        explode: true
        in: query
        name: spec.packages
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSrcmV2Regions_200_response'
          description: Region.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Regions
      tags:
      - Regions (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/regions?spec.cloud=AWS&spec.region_name=us-east-2&spec.packages=ESSENTIALS%2CADVANCED");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /srcm/v2/regions/{id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a region.
      operationId: getSrcmV2Region
      parameters:
      - description: The unique identifier for the region.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSrcmV2Region_200_response'
          description: Region.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Region
      tags:
      - Regions (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/srcm/v2/regions/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/regions/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/regions/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/srcm/v2/regions/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/regions/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/regions/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/regions/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /srcm/v2/clusters:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all clusters.
      operationId: listSrcmV2Clusters
      parameters:
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSrcmV2Clusters_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Clusters
      tags:
      - Clusters (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/srcm/v2/clusters?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/clusters?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/clusters?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/srcm/v2/clusters?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/clusters?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/clusters?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/clusters?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a cluster.
      operationId: createSrcmV2Cluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSrcmV2Cluster_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSrcmV2Cluster_202_response'
          description: A Cluster is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Cluster resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/srcm/v2/clusters/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Cluster
      tags:
      - Clusters (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/srcm/v2/clusters \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"package":"ESSENTIALS","environment":{"id":"env-00000"},"region":{"id":"sgreg-00000"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"sgreg-00000\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/clusters")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/clusters\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"package\\\":\\\"\
          ESSENTIALS\\\",\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\"region\\\
          \":{\\\"id\\\":\\\"sgreg-00000\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"sgreg-00000\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/srcm/v2/clusters", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/clusters",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              package: 'ESSENTIALS',
              environment: {id: 'env-00000'},
              region: {id: 'sgreg-00000'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/clusters");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"sgreg-00000\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/clusters");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"sgreg-00000\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /srcm/v2/clusters/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a cluster.
      operationId: deleteSrcmV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Cluster is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Cluster
      tags:
      - Clusters (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/srcm/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a cluster.
      operationId: getSrcmV2Cluster
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSrcmV2Cluster_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Cluster
      tags:
      - Clusters (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/srcm/v2/clusters/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/clusters/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a cluster.

      operationId: updateSrcmV2Cluster
      parameters:
      - description: The unique identifier for the cluster.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSrcmV2Cluster_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSrcmV2Cluster_200_response'
          description: Cluster.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update a Cluster
      tags:
      - Clusters (srcm/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"package":"ESSENTIALS","environment":{"id":"env-00000"},"region":{"id":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"package\\\":\\\"\
          ESSENTIALS\\\",\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\"region\\\
          \":{\\\"id\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/srcm/v2/clusters/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/srcm/v2/clusters/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {package: 'ESSENTIALS', environment: {id: 'env-00000'}, region: {id: 'string'}}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/srcm/v2/clusters/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"package\":\"ESSENTIALS\",\"environment\":{\"id\":\"env-00000\"},\"region\":{\"id\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /clusterconfig:
    get:
      description: Retrieves cluster config information.
      operationId: getClusterConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
          description: The cluster config
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: "Oops, something went wrong"
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Get cluster config
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/clusterconfig \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/clusterconfig")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/clusterconfig\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/clusterconfig", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/clusterconfig",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/clusterconfig");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/clusterconfig");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      description: "Test input schema against a particular version of a subject's\
        \ schema for compatibility. The compatibility level applied for the check\
        \ is the configured compatibility level for the subject (http:get:: /config/(string:\
        \ subject)). If this subject's compatibility level was never changed, then\
        \ the global compatibility level applies (http:get:: /config)."
      operationId: testCompatibilityBySubjectName
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: "Version of the subject's schema against which compatibility\
          \ is to be tested. Valid values for versionId are between [1,2^31-1] or\
          \ the string \"latest\".\"latest\" checks compatibility of the input schema\
          \ with the last registered schema under the specified subject"
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. Error code 42202 indicates an invalid version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Test schema compatibility against a particular schema subject-version
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /compatibility/subjects/{subject}/versions:
    post:
      description: "Test input schema against a subject's schemas for compatibility,\
        \ based on the configured compatibility level of the subject. In other words,\
        \ it will perform the same compatibility check as register for that subject.\
        \ The compatibility level applied for the check is the configured compatibility\
        \ level for the subject (http:get:: /config/(string: subject)). If this subject's\
        \ compatibility level was never changed, then the global compatibility level\
        \ applies (http:get:: /config)."
      operationId: testCompatibilityForSubject
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42201 indicates an invalid
            schema or schema type. Error code 42202 indicates an invalid version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Test schema compatibility against all schemas under a subject
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/%7Bsubject%7D/versions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/%7Bsubject%7D/versions",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /config/{subject}:
    delete:
      description: Deletes the specified subject-level compatibility level config
        and reverts to the global default.
      operationId: deleteSubjectConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old compatibility level.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Delete subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves compatibility level for a subject.
      operationId: getSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global compatibility level  if subject
          compatibility level not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The subject compatibility level.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "Update compatibility level for the specified subject. On success,\
        \ echoes the original request back to the client."
      operationId: updateSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
      security:
      - api-key: []
      summary: Update subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"compatibility":"FULL_TRANSITIVE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"compatibility\":\"FULL_TRANSITIVE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"compatibility\":\"FULL_TRANSITIVE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({compatibility: 'FULL_TRANSITIVE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"compatibility\":\"FULL_TRANSITIVE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"compatibility\":\"FULL_TRANSITIVE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /config:
    delete:
      description: Deletes the global compatibility level config and reverts to the
        default.
      operationId: deleteTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old global compatibility level.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Delete global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the global compatibility level.
      operationId: getTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The global compatibility level.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "Updates the global compatibility level. On success, echoes the\
        \ original request back to the client."
      operationId: updateTopLevelConfig
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
      security:
      - api-key: []
      summary: Update global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"compatibility":"FULL_TRANSITIVE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"compatibility\":\"FULL_TRANSITIVE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"compatibility\":\"FULL_TRANSITIVE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({compatibility: 'FULL_TRANSITIVE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"compatibility\":\"FULL_TRANSITIVE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"compatibility\":\"FULL_TRANSITIVE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /contexts:
    get:
      description: Retrieves a list of contexts.
      operationId: listContexts
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: "."
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: "."
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: "."
                  type: string
                type: array
          description: The contexts.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. '
      security:
      - api-key: []
      summary: List contexts
      tags:
      - Contexts (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/contexts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/contexts")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/contexts\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/contexts", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/contexts",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/contexts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/contexts");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /mode/{subject}:
    delete:
      description: Deletes the specified subject-level mode and reverts to the global
        default.
      operationId: deleteSubjectMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: Operation succeeded. Returns old mode.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Delete subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/mode/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the subject mode.
      operationId: getMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global mode if subject mode not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The subject mode.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "Update mode for the specified subject. On success, echoes the\
        \ original request back to the client."
      operationId: updateMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
      security:
      - api-key: []
      summary: Update subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"READWRITE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"READWRITE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mode: 'READWRITE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /mode:
    get:
      description: Retrieves global mode.
      operationId: getTopLevelMode
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The global mode
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          description: Error code 50001 -- Error in the backend data store
      security:
      - api-key: []
      summary: Get global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/mode \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: "Update global mode. On success, echoes the original request back\
        \ to the client."
      operationId: updateTopLevelMode
      parameters:
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
      security:
      - api-key: []
      summary: Update global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/mode \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"READWRITE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"READWRITE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mode: 'READWRITE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas/ids/{id}:
    get:
      description: Retrieves the schema string identified by the input ID.
      operationId: getSchema
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: "Desired output format, dependent on schema type"
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to fetch the maximum schema identifier that exists
        explode: true
        in: query
        name: fetchMaxId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/SchemaString'
          description: The schema string.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get schema string by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas/ids/{id}/schema:
    get:
      description: Retrieves the schema identified by the input ID.
      operationId: getSchemaOnly
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: "Desired output format, dependent on schema type"
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
            application/json; qs=0.5:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
          description: Raw schema string.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get schema by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/schema", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/schema",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas/types:
    get:
      description: Retrieve the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
          description: List of supported schema types.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List supported schema types
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/types \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/types")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/types\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/types", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/types",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/types");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/types");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas:
    get:
      description: Get the schemas matching the specified parameters.
      operationId: getSchemas
      parameters:
      - description: Filters results by the respective subject prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to return soft deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to return latest schema versions only for each matching
          subject
        explode: true
        in: query
        name: latestOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Pagination offset for results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Pagination size for results. Ignored if negative
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
          description: List of schemas matching the specified parameters.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List schemas
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas/ids/{id}/subjects:
    get:
      description: Retrieves all the subjects associated with a particular schema
        ID.
      operationId: getSubjects
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subjects where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: User
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List subjects associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/subjects", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/subjects",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /schemas/ids/{id}/versions:
    get:
      description: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subject versions where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
          description: List of subject versions matching the specified parameters.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List subject-versions associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/versions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/versions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects/{subject}/versions/{version}:
    delete:
      description: "Deletes a specific version of the schema registered under this\
        \ subject. This only deletes the version and the schema ID remains intact\
        \ making it still possible to decode data using the schema ID. This API is\
        \ recommended to be used only in development environments or under extreme\
        \ circumstances where-in, its required to delete a previously registered schema\
        \ for compatibility purposes or re-register previously registered schema."
      operationId: deleteSchemaVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: 1
                format: int32
                type: integer
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: 1
                format: int32
                type: integer
            application/json; qs=0.5:
              schema:
                example: 1
                format: int32
                type: integer
          description: Operation succeeded. Returns the schema version.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Delete schema version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves a specific version of the schema registered under this
        subject.
      operationId: getSchemaByVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get schema by version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      description: Retrieves the IDs of schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
          description: List of IDs for schemas that reference the specified schema.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List schemas referencing a schema
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects/{subject}/versions/{version}/schema:
    get:
      description: Retrieves the schema for the specified version of this subject.
        Only the unescaped schema string is returned.
      operationId: getSchemaOnly_1
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
            application/json; qs=0.5:
              schema:
                example: "{\"schema\": \"{\"type\": \"string\"}\"}"
                type: string
          description: The schema string.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Get schema string by version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects/{subject}/versions:
    get:
      description: Retrieves a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
          description: List of version numbers matching the specified parameters.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Not Found. Error code 40401 indicates subject not found. '
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List versions under subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.
        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config
        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.
      operationId: register
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to register the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
          description: Schema successfully registered.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Conflict. Incompatible schema.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. '
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.Error code 50002 indicates operation timed out.
            Error code 50003 indicates a failure forwarding the request to the primary.
      security:
      - api-key: []
      summary: Register schema under a subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/%7Bsubject%7D/versions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects/{subject}:
    delete:
      description: Deletes the specified subject and its associated compatibility
        level if registered. It is recommended to use this API only when a topic needs
        to be recycled or in development environment.
      operationId: deleteSubject
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
          description: Operation succeeded. Returns list of schema versions deleted
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: Delete subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: "Check if a schema has already been registered under the specified\
        \ subject. If so, this returns the schema string along with its globally unique\
        \ identifier, its version under this subject and the subject name."
      operationId: lookUpSchemaUnderSubject
      parameters:
      - description: Subject under which the schema will be registered
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to lookup the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to lookup deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40403 indicates schema not found.
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error.
      security:
      - api-key: []
      summary: Lookup schema under subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /subjects:
    get:
      description: Retrieves a list of registered subjects matching specified parameters.
      operationId: list
      parameters:
      - description: Subject name prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ':*:'
          type: string
        style: form
      - description: Whether to look up deleted subjects
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: User
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
      security:
      - api-key: []
      summary: List subjects
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint.
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/entity/tags:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to create multiple tags.
      operationId: createTags
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Tag'
              type: array
        description: The tags
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagResponse'
                type: array
          description: The tags. Errored tags will have an additional error property.
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Bulk Create Tags
      tags:
      - Entity (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags \
            --header 'content-type: application/json' \
            --data '[{"typeName":"string","attributes":{"property1":{},"property2":{}},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true,"entityType":"string","entityName":"string"}]'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags")
            .post(body)
            .addHeader("content-type", "application/json")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags\"\
          \n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\
          \"attributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"entityGuid\\\
          \":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\"\
          :true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\
          \":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\
          \":true,\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\
          \"}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]"

          headers = { 'content-type': "application/json" }

          conn.request("POST", "/catalog/v1/entity/tags", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/entity/tags",
            "headers": {
              "content-type": "application/json"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify([
            {
              typeName: 'string',
              attributes: {property1: {}, property2: {}},
              entityGuid: 'string',
              entityStatus: 'ACTIVE',
              propagate: true,
              validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
              removePropagationsOnEntityDelete: true,
              entityType: 'string',
              entityName: 'string'
            }
          ]));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to update multiple tags.
      operationId: updateTags
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Tag'
              type: array
        description: The tags
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagResponse'
                type: array
          description: The tags. Errored tags will have an additional error property.
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Bulk Update Tags
      tags:
      - Entity (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags \
            --header 'content-type: application/json' \
            --data '[{"typeName":"string","attributes":{"property1":{},"property2":{}},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true,"entityType":"string","entityName":"string"}]'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags")
            .put(body)
            .addHeader("content-type", "application/json")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags\"\
          \n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\
          \"attributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"entityGuid\\\
          \":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\"\
          :true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\
          \":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\
          \":true,\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\
          \"}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]"

          headers = { 'content-type': "application/json" }

          conn.request("PUT", "/catalog/v1/entity/tags", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/entity/tags",
            "headers": {
              "content-type": "application/json"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify([
            {
              typeName: 'string',
              attributes: {property1: {}, property2: {}},
              entityGuid: 'string',
              entityStatus: 'ACTIVE',
              propagate: true,
              validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
              removePropagationsOnEntityDelete: true,
              entityType: 'string',
              entityName: 'string'
            }
          ]));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Fetch complete definition of an entity given its type and unique attribute.
      operationId: getByUniqueAttributes
      parameters:
      - description: The type of the entity
        explode: false
        in: path
        name: typeName
        required: true
        schema:
          type: string
        style: simple
      - description: The qualified name of the entity
        explode: false
        in: path
        name: qualifiedName
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to populate on header and schema attributes
        explode: true
        in: query
        name: minExtInfo
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to ignore relationships
        explode: true
        in: query
        name: ignoreRelationships
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityWithExtInfo'
          description: The entity
        "400":
          description: Bad Request
        "404":
          description: Entity not found
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Read an Entity
      tags:
      - Entity (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Gets the list of tags for a given entity represented by a qualified name.
      operationId: getTags
      parameters:
      - description: The type of the entity
        explode: false
        in: path
        name: typeName
        required: true
        schema:
          type: string
        style: simple
      - description: The qualified name of the entity
        explode: false
        in: path
        name: qualifiedName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagResponse'
                type: array
          description: The tags
        "400":
          description: Bad Request
        "404":
          description: Entity not found
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Read Tags for an Entity
      tags:
      - Entity (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete a tag for an entity.
      operationId: deleteTag
      parameters:
      - description: The type of the entity
        explode: false
        in: path
        name: typeName
        required: true
        schema:
          type: string
        style: simple
      - description: The qualified name of the entity
        explode: false
        in: path
        name: qualifiedName
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the tag
        explode: false
        in: path
        name: tagName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Delete a Tag for an Entity
      tags:
      - Entity (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D")
            .delete(null)
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("DELETE", "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/%7BtypeName%7D/name/%7BqualifiedName%7D/tags/%7BtagName%7D");
          var request = new RestRequest(Method.DELETE);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/search/attribute:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve data for the specified attribute search query.
      operationId: searchUsingAttribute
      parameters:
      - description: Limit the result to only entities of specified types
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: One of more additional attributes to return in the response
        explode: true
        in: query
        name: attr
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The attribute to search
        explode: true
        in: query
        name: attrName
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The prefix for the attribute value to search
        explode: true
        in: query
        name: attrValuePrefix
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Limit the result to only entities tagged with the given tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: An attribute to sort by
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: "Sort order, either ASCENDING (default) or DESCENDING"
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ASCENDING
          - DESCENDING
          type: string
        style: form
      - description: Whether to include deleted entities
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      - description: Limit the result set to only include the specified number of
          entries
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Start offset of the result set (useful for pagination)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: "On successful search query with some results, might return\
            \ an empty list if execution succeeded without any results"
        "400":
          description: Invalid wildcard or query parameters
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Search by Attribute
      tags:
      - Search (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/search/attribute")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/search/attribute",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/search/basic:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve data for the specified fulltext query.
      operationId: searchUsingBasic
      parameters:
      - description: The full-text query
        explode: true
        in: query
        name: query
        required: false
        schema:
          type: string
        style: form
      - description: Limit the result to only entities of specified types
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: One of more additional attributes to return in the response
        explode: true
        in: query
        name: attr
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Limit the result to only entities tagged with the given tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: An attribute to sort by
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: "Sort order, either ASCENDING (default) or DESCENDING"
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ASCENDING
          - DESCENDING
          type: string
        style: form
      - description: Whether to include deleted entities
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      - description: Limit the result set to only include the specified number of
          entries
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Start offset of the result set (useful for pagination)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: "On successful fulltext query with some results, might return\
            \ an empty list if execution succeeded without any results"
        "400":
          description: Invalid fulltext or query parameters
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Search by Fulltext Query
      tags:
      - Search (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/search/basic")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/search/basic",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/types/tagdefs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk retrieval API for retrieving tag definitions.
      operationId: getAllTagDefs
      parameters:
      - description: The prefix of a tag definition name
        explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagDefResponse'
                type: array
          description: The tag definitions
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Bulk Read Tag Definitions
      tags:
      - Types (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/types/tagdefs")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/types/tagdefs",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk create API for tag definitions.
      operationId: createTagDefs
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/TagDef'
              type: array
        description: The tag definitions to create
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagDefResponse'
                type: array
          description: The tag definitions. Errored tag definitions will have an additional
            error property.
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Bulk Create Tag Definitions
      tags:
      - Types (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs \
            --header 'content-type: application/json' \
            --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}],"superTypes":["string"],"entityTypes":["string"],"subTypes":["string"]}]'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
            .post(body)
            .addHeader("content-type", "application/json")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\
          \n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\"\
          ,\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\
          \":\\\"string\\\",\\\"createTime\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"updateTime\\\
          \":\\\"2019-08-24T14:15:22Z\\\",\\\"version\\\":0,\\\"name\\\":\\\"string\\\
          \",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\"\
          ,\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\
          \"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\
          \"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\
          \":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"\
          valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"\
          includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"\
          description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\"\
          :\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"\
          params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\"\
          :{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"\
          displayName\\\":\\\"string\\\"}],\\\"superTypes\\\":[\\\"string\\\"],\\\"\
          entityTypes\\\":[\\\"string\\\"],\\\"subTypes\\\":[\\\"string\\\"]}]\")\n\
          \n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]"

          headers = { 'content-type': "application/json" }

          conn.request("POST", "/catalog/v1/types/tagdefs", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/types/tagdefs",
            "headers": {
              "content-type": "application/json"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify([
            {
              category: 'PRIMITIVE',
              guid: 'string',
              createdBy: 'string',
              updatedBy: 'string',
              createTime: '2019-08-24T14:15:22Z',
              updateTime: '2019-08-24T14:15:22Z',
              version: 0,
              name: 'string',
              description: 'string',
              typeVersion: 'string',
              serviceType: 'string',
              options: {property1: 'string', property2: 'string'},
              attributeDefs: [
                {
                  name: 'string',
                  typeName: 'string',
                  isOptional: true,
                  cardinality: 'SINGLE',
                  valuesMinCount: 0,
                  valuesMaxCount: 0,
                  isUnique: true,
                  isIndexable: true,
                  includeInNotification: true,
                  defaultValue: 'string',
                  description: 'string',
                  searchWeight: 0,
                  indexType: 'DEFAULT',
                  constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                  options: {property1: 'string', property2: 'string'},
                  displayName: 'string'
                }
              ],
              superTypes: ['string'],
              entityTypes: ['string'],
              subTypes: ['string']
            }
          ]));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk update API for tag definitions.
      operationId: updateTagDefs
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/TagDef'
              type: array
        description: The tag definitions to update
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TagDefResponse'
                type: array
          description: The tag definitions. Errored tag definitions will have an additional
            error property.
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Bulk Update Tag Definitions
      tags:
      - Types (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs \
            --header 'content-type: application/json' \
            --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":"2019-08-24T14:15:22Z","updateTime":"2019-08-24T14:15:22Z","version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}],"superTypes":["string"],"entityTypes":["string"],"subTypes":["string"]}]'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
            .put(body)
            .addHeader("content-type", "application/json")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\
          \n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\"\
          ,\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\
          \":\\\"string\\\",\\\"createTime\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"updateTime\\\
          \":\\\"2019-08-24T14:15:22Z\\\",\\\"version\\\":0,\\\"name\\\":\\\"string\\\
          \",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\"\
          ,\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\
          \"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\
          \"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\
          \":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"\
          valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"\
          includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"\
          description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\"\
          :\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"\
          params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\"\
          :{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"\
          displayName\\\":\\\"string\\\"}],\\\"superTypes\\\":[\\\"string\\\"],\\\"\
          entityTypes\\\":[\\\"string\\\"],\\\"subTypes\\\":[\\\"string\\\"]}]\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]"

          headers = { 'content-type': "application/json" }

          conn.request("PUT", "/catalog/v1/types/tagdefs", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/types/tagdefs",
            "headers": {
              "content-type": "application/json"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify([
            {
              category: 'PRIMITIVE',
              guid: 'string',
              createdBy: 'string',
              updatedBy: 'string',
              createTime: '2019-08-24T14:15:22Z',
              updateTime: '2019-08-24T14:15:22Z',
              version: 0,
              name: 'string',
              description: 'string',
              typeVersion: 'string',
              serviceType: 'string',
              options: {property1: 'string', property2: 'string'},
              attributeDefs: [
                {
                  name: 'string',
                  typeName: 'string',
                  isOptional: true,
                  cardinality: 'SINGLE',
                  valuesMinCount: 0,
                  valuesMaxCount: 0,
                  isUnique: true,
                  isIndexable: true,
                  includeInNotification: true,
                  defaultValue: 'string',
                  description: 'string',
                  searchWeight: 0,
                  indexType: 'DEFAULT',
                  constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                  options: {property1: 'string', property2: 'string'},
                  displayName: 'string'
                }
              ],
              superTypes: ['string'],
              entityTypes: ['string'],
              subTypes: ['string']
            }
          ]));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":\"2019-08-24T14:15:22Z\",\"updateTime\":\"2019-08-24T14:15:22Z\",\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /catalog/v1/types/tagdefs/{tagName}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete API for tag definition identified by its name.
      operationId: deleteTagDef
      parameters:
      - description: The name of the tag definition
        explode: false
        in: path
        name: tagName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Delete Tag Definition
      tags:
      - Types (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D")
            .delete(null)
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("DELETE", "/catalog/v1/types/tagdefs/%7BtagName%7D")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/types/tagdefs/%7BtagName%7D",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D");
          var request = new RestRequest(Method.DELETE);
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get the tag definition with the given name.
      operationId: getTagDefByName
      parameters:
      - description: The name of the tag definiton
        explode: false
        in: path
        name: tagName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDef'
          description: The tag definition
        "400":
          description: Bad Request
        "404":
          description: Tag definition not found
        "429":
          description: Rate Limit Error
        "500":
          description: Internal Server Error
      summary: Read Tag Definition
      tags:
      - Types (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D")
            .get()
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          conn.request("GET", "/catalog/v1/types/tagdefs/%7BtagName%7D")

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/catalog/v1/types/tagdefs/%7BtagName%7D",
            "headers": {}
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/%7BtagName%7D");
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
    servers:
    - description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
      url: https://psrc-00000.region.provider.confluent.cloud
  /partner/v2/organizations/{id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an organization.
      operationId: getPartnerV2Organization
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPartnerV2Organization_200_response'
          description: Organization.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - marketplace::describe
      summary: Read an Organization
      tags:
      - Organizations (partner/v2)
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/organizations/{id}' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations/{id}")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations/{id}",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/partner/v2/organizations/%7Bid%7D \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations/%7Bid%7D",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-request-access-name: Partner v2
  /partner/v2/organizations:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all organizations.
      operationId: listPartnerV2Organizations
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partner.v2.OrganizationList'
          description: Organization.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - marketplace::describe
      summary: List of Organizations
      tags:
      - Organizations (partner/v2)
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/partner/v2/organizations \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-request-access-name: Partner v2
  /partner/v2/signup:
    post:
      description: "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\
        \ [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\
        \nCreate an organization for a customer. You must pass in either an entitlement\
        \ object reference (a url to \na previously created entitlement) or entitlement\
        \ details. If you pass in an entitlement object reference, we will link with\
        \ the \ncreated entitlement. If you pass in the entitlement details, we will\
        \ create the entitlement with the organization \nin a single transaction.\
        \ If you pass in user details (email, given name, and family name), we will\n\
        create a user as well. If you do not pass in user details, you MUST call `/partner/v2/signup/activate`\n\
        with user details to complete signup."
      operationId: signup
      parameters:
      - description: "If true, only perform validation of signup"
        explode: true
        in: query
        name: dry_run
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerSignupRequest'
        description: A JSON object containing signup information
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSignupResponse'
          description: Successful signup.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:create
      summary: Signup an Organization on behalf of a Customer
      tags:
      - Signup (partner/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/signup \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"organization":{"name":"Acme Organization","sso_config":{"kind":"AzureSSOConfig","tenant_id":"b3a17773-05cc-4431-9560-433fb4613da8"}},"user":{},"entitlement":{"external_id":"1111-2222-3333-4444","name":"Acme Prod Entitlement","plan_id":"confluent-cloud-payg-prod","product_id":"confluent-cloud-kafka-service-azure","usage_reporting_id":"1111-2222-3333-4444","resource_id":"1111-2222-3333-4444","organization":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"user\":{},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/signup")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/signup\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"organization\\\":{\\\"name\\\"\
          :\\\"Acme Organization\\\",\\\"sso_config\\\":{\\\"kind\\\":\\\"AzureSSOConfig\\\
          \",\\\"tenant_id\\\":\\\"b3a17773-05cc-4431-9560-433fb4613da8\\\"}},\\\"\
          user\\\":{},\\\"entitlement\\\":{\\\"external_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"name\\\":\\\"Acme Prod Entitlement\\\",\\\"plan_id\\\":\\\"confluent-cloud-payg-prod\\\
          \",\\\"product_id\\\":\\\"confluent-cloud-kafka-service-azure\\\",\\\"usage_reporting_id\\\
          \":\\\"1111-2222-3333-4444\\\",\\\"resource_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"organization\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\
          \"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"user\":{},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/signup", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/signup",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            organization: {
              name: 'Acme Organization',
              sso_config: {kind: 'AzureSSOConfig', tenant_id: 'b3a17773-05cc-4431-9560-433fb4613da8'}
            },
            user: {},
            entitlement: {
              external_id: '1111-2222-3333-4444',
              name: 'Acme Prod Entitlement',
              plan_id: 'confluent-cloud-payg-prod',
              product_id: 'confluent-cloud-kafka-service-azure',
              usage_reporting_id: '1111-2222-3333-4444',
              resource_id: '1111-2222-3333-4444',
              organization: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/signup");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"user\":{},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/signup");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"user\":{},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /partner/v2/signup/activate:
    post:
      description: "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\
        \ [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\
        \nCreates a user in the organization previously created in `/partner/v2/signup`.\
        \ This completes the signup\nprocess if you did not pass in user details to\
        \ `/partner/v2/signup`. Calling this endpoint if the signup \nprocess has\
        \ been completed will result in a `409 Conflict` error."
      operationId: activateSignup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivatePartnerSignupRequest'
        description: A JSON object containing signup information
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSignupResponse'
          description: Successful signup activation. User is being created.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:create
      summary: Activate an Incomplete Signup
      tags:
      - Signup (partner/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/signup/activate \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"user":{},"organization_id":"b3a17773-05cc-4431-9560-433fb4613da8"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"user\":{},\"organization_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/signup/activate")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/signup/activate\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"user\\\":{},\\\"organization_id\\\
          \":\\\"b3a17773-05cc-4431-9560-433fb4613da8\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\
          \n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\t\
          body, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"user\":{},\"organization_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/signup/activate", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/signup/activate",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({user: {}, organization_id: 'b3a17773-05cc-4431-9560-433fb4613da8'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/signup/activate");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"user\":{},\"organization_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/signup/activate");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"user\":{},\"organization_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /partner/v2/signup/link:
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Signup a customer by linking a new entitlement to an existing Confluent Cloud organization.
      operationId: signupPartnerV2Link
      parameters:
      - description: "If true, only perform validation of signup"
        explode: true
        in: query
        name: dry_run
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerLinkRequest'
        description: A JSON object containing signup information
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSignupResponse'
          description: Successful signup.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - oauth:
        - partner:create
      summary: Signup a Customer by Linking to an Existing Organization
      tags:
      - Signup (partner/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/signup/link \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c","organization":{"name":"Acme Organization","sso_config":{"kind":"AzureSSOConfig","tenant_id":"b3a17773-05cc-4431-9560-433fb4613da8"}},"entitlement":{"external_id":"1111-2222-3333-4444","name":"Acme Prod Entitlement","plan_id":"confluent-cloud-payg-prod","product_id":"confluent-cloud-kafka-service-azure","usage_reporting_id":"1111-2222-3333-4444","resource_id":"1111-2222-3333-4444","organization":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/signup/link")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/signup/link\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"token\\\":\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\\\
          \",\\\"organization\\\":{\\\"name\\\":\\\"Acme Organization\\\",\\\"sso_config\\\
          \":{\\\"kind\\\":\\\"AzureSSOConfig\\\",\\\"tenant_id\\\":\\\"b3a17773-05cc-4431-9560-433fb4613da8\\\
          \"}},\\\"entitlement\\\":{\\\"external_id\\\":\\\"1111-2222-3333-4444\\\"\
          ,\\\"name\\\":\\\"Acme Prod Entitlement\\\",\\\"plan_id\\\":\\\"confluent-cloud-payg-prod\\\
          \",\\\"product_id\\\":\\\"confluent-cloud-kafka-service-azure\\\",\\\"usage_reporting_id\\\
          \":\\\"1111-2222-3333-4444\\\",\\\"resource_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"organization\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\
          \"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/signup/link", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/signup/link",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
            organization: {
              name: 'Acme Organization',
              sso_config: {kind: 'AzureSSOConfig', tenant_id: 'b3a17773-05cc-4431-9560-433fb4613da8'}
            },
            entitlement: {
              external_id: '1111-2222-3333-4444',
              name: 'Acme Prod Entitlement',
              plan_id: 'confluent-cloud-payg-prod',
              product_id: 'confluent-cloud-kafka-service-azure',
              usage_reporting_id: '1111-2222-3333-4444',
              resource_id: '1111-2222-3333-4444',
              organization: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/signup/link");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/signup/link");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\"organization\":{\"name\":\"Acme Organization\",\"sso_config\":{\"kind\":\"AzureSSOConfig\",\"tenant_id\":\"b3a17773-05cc-4431-9560-433fb4613da8\"}},\"entitlement\":{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/networks:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all networks.
      operationId: listNetworkingV1Networks
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-gcp-us-central1
        - prod-aws-us-east1
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for spec.cloud. Pass multiple
          times to see results matching any of the values.
        example:
        - GCP
        - AWS
        explode: true
        in: query
        name: spec.cloud
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for spec.region. Pass multiple
          times to see results matching any of the values.
        example:
        - us-central1
        - us-east-1
        explode: true
        in: query
        name: spec.region
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for spec.cidr. Pass multiple
          times to see results matching any of the values.
        example:
        - 10.200.0.0/16
        explode: true
        in: query
        name: spec.cidr
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - PROVISIONING
        - READY
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for connection_type. Pass multiple
          times to see results matching any of the values.
        example:
        - peering
        - privatelink
        explode: true
        in: query
        name: connection_type
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1Networks_200_response'
          description: Network.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Networks
      tags:
      - Networks (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/networks?spec.display_name=prod-gcp-us-central1%2Cprod-aws-us-east1&spec.cloud=GCP%2CAWS&spec.region=us-central1%2Cus-east-1&spec.cidr=10.200.0.0%2F16&status.phase=PROVISIONING%2CREADY&environment=env-00000&connection_type=peering%2Cprivatelink");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a network.
      operationId: createNetworkingV1Network
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1Network_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1Network_202_response'
          description: A Network is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Network resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/networks/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Network
      tags:
      - Networks (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/networks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-aws-us-east1","cloud":"AWS","region":"us-east-1","connection_types":["PRIVATELINK"],"cidr":"10.200.0.0/16","zones":["use1-az1","use1-az2","use1-az3"],"zones_info":[{"zone_id":"use1-az3","cidr":"10.20.0.0/27"},{"zone_id":"use1-az3","cidr":"10.20.0.0/27"},{"zone_id":"use1-az3","cidr":"10.20.0.0/27"}],"dns_config":{"resolution":"CHASED_PRIVATE"},"reserved_cidr":"172.20.255.0/24","environment":{"id":"env-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/networks")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/networks\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-aws-us-east1\\\",\\\"cloud\\\":\\\"AWS\\\",\\\"region\\\":\\\"\
          us-east-1\\\",\\\"connection_types\\\":[\\\"PRIVATELINK\\\"],\\\"cidr\\\"\
          :\\\"10.200.0.0/16\\\",\\\"zones\\\":[\\\"use1-az1\\\",\\\"use1-az2\\\"\
          ,\\\"use1-az3\\\"],\\\"zones_info\\\":[{\\\"zone_id\\\":\\\"use1-az3\\\"\
          ,\\\"cidr\\\":\\\"10.20.0.0/27\\\"},{\\\"zone_id\\\":\\\"use1-az3\\\",\\\
          \"cidr\\\":\\\"10.20.0.0/27\\\"},{\\\"zone_id\\\":\\\"use1-az3\\\",\\\"\
          cidr\\\":\\\"10.20.0.0/27\\\"}],\\\"dns_config\\\":{\\\"resolution\\\":\\\
          \"CHASED_PRIVATE\\\"},\\\"reserved_cidr\\\":\\\"172.20.255.0/24\\\",\\\"\
          environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\
          \"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/networks", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/networks",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-aws-us-east1',
              cloud: 'AWS',
              region: 'us-east-1',
              connection_types: ['PRIVATELINK'],
              cidr: '10.200.0.0/16',
              zones: ['use1-az1', 'use1-az2', 'use1-az3'],
              zones_info: [
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'},
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'},
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'}
              ],
              dns_config: {resolution: 'CHASED_PRIVATE'},
              reserved_cidr: '172.20.255.0/24',
              environment: {id: 'env-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/networks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/networks");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/networks/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a network.
      operationId: deleteNetworkingV1Network
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Network is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Network
      tags:
      - Networks (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/networks/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/networks/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a network.
      operationId: getNetworkingV1Network
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1Network_200_response'
          description: Network.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Network
      tags:
      - Networks (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/networks/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/networks/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a network.

      operationId: updateNetworkingV1Network
      parameters:
      - description: The unique identifier for the network.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1Network_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1Network_200_response'
          description: Network.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Network
      tags:
      - Networks (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/networks/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-aws-us-east1","cloud":"AWS","region":"us-east-1","connection_types":["PRIVATELINK"],"cidr":"10.200.0.0/16","zones":["use1-az1","use1-az2","use1-az3"],"zones_info":[{"zone_id":"use1-az3","cidr":"10.20.0.0/27"},{"zone_id":"use1-az3","cidr":"10.20.0.0/27"},{"zone_id":"use1-az3","cidr":"10.20.0.0/27"}],"dns_config":{"resolution":"CHASED_PRIVATE"},"reserved_cidr":"172.20.255.0/24","environment":{"id":"env-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/networks/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-aws-us-east1\\\",\\\"cloud\\\":\\\"AWS\\\",\\\"region\\\":\\\"\
          us-east-1\\\",\\\"connection_types\\\":[\\\"PRIVATELINK\\\"],\\\"cidr\\\"\
          :\\\"10.200.0.0/16\\\",\\\"zones\\\":[\\\"use1-az1\\\",\\\"use1-az2\\\"\
          ,\\\"use1-az3\\\"],\\\"zones_info\\\":[{\\\"zone_id\\\":\\\"use1-az3\\\"\
          ,\\\"cidr\\\":\\\"10.20.0.0/27\\\"},{\\\"zone_id\\\":\\\"use1-az3\\\",\\\
          \"cidr\\\":\\\"10.20.0.0/27\\\"},{\\\"zone_id\\\":\\\"use1-az3\\\",\\\"\
          cidr\\\":\\\"10.20.0.0/27\\\"}],\\\"dns_config\\\":{\\\"resolution\\\":\\\
          \"CHASED_PRIVATE\\\"},\\\"reserved_cidr\\\":\\\"172.20.255.0/24\\\",\\\"\
          environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\
          \"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/networks/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/networks/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-aws-us-east1',
              cloud: 'AWS',
              region: 'us-east-1',
              connection_types: ['PRIVATELINK'],
              cidr: '10.200.0.0/16',
              zones: ['use1-az1', 'use1-az2', 'use1-az3'],
              zones_info: [
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'},
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'},
                {zone_id: 'use1-az3', cidr: '10.20.0.0/27'}
              ],
              dns_config: {resolution: 'CHASED_PRIVATE'},
              reserved_cidr: '172.20.255.0/24',
              environment: {id: 'env-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/networks/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/networks/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-aws-us-east1\",\"cloud\":\"AWS\",\"region\":\"us-east-1\",\"connection_types\":[\"PRIVATELINK\"],\"cidr\":\"10.200.0.0/16\",\"zones\":[\"use1-az1\",\"use1-az2\",\"use1-az3\"],\"zones_info\":[{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"},{\"zone_id\":\"use1-az3\",\"cidr\":\"10.20.0.0/27\"}],\"dns_config\":{\"resolution\":\"CHASED_PRIVATE\"},\"reserved_cidr\":\"172.20.255.0/24\",\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/peerings:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all peerings.
      operationId: listNetworkingV1Peerings
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-peering-uscentral1
        - prod-peering-use1
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - PROVISIONING
        - READY
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1Peerings_200_response'
          description: Peering.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Peerings
      tags:
      - Peerings (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/peerings?spec.display_name=prod-peering-uscentral1%2Cprod-peering-use1&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a peering.
      operationId: createNetworkingV1Peering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1Peering_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1Peering_202_response'
          description: A Peering is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Peering resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/peerings/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Peering
      tags:
      - Peerings (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/peerings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-peering-use1","cloud":{"kind":"AwsPeering","account":"000000000000","vpc":"vpc-00000000000000000","routes":["10.108.16.0/21"],"customer_region":"us-east-1"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"n-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/peerings")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/peerings\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-peering-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsPeering\\\"\
          ,\\\"account\\\":\\\"000000000000\\\",\\\"vpc\\\":\\\"vpc-00000000000000000\\\
          \",\\\"routes\\\":[\\\"10.108.16.0/21\\\"],\\\"customer_region\\\":\\\"\
          us-east-1\\\"},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\
          \":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"n-00000\\\",\\\"environment\\\
          \":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/peerings", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/peerings",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-peering-use1',
              cloud: {
                kind: 'AwsPeering',
                account: '000000000000',
                vpc: 'vpc-00000000000000000',
                routes: ['10.108.16.0/21'],
                customer_region: 'us-east-1'
              },
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'n-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/peerings");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/peerings");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/peerings/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a peering.
      operationId: deleteNetworkingV1Peering
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the peering.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Peering is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Peering
      tags:
      - Peerings (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/peerings/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/peerings/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a peering.
      operationId: getNetworkingV1Peering
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the peering.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1Peering_200_response'
          description: Peering.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Peering
      tags:
      - Peerings (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/peerings/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/peerings/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a peering.

      operationId: updateNetworkingV1Peering
      parameters:
      - description: The unique identifier for the peering.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1Peering_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1Peering_200_response'
          description: Peering.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Peering
      tags:
      - Peerings (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-peering-use1","cloud":{"kind":"AwsPeering","account":"000000000000","vpc":"vpc-00000000000000000","routes":["10.108.16.0/21"],"customer_region":"us-east-1"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-peering-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsPeering\\\"\
          ,\\\"account\\\":\\\"000000000000\\\",\\\"vpc\\\":\\\"vpc-00000000000000000\\\
          \",\\\"routes\\\":[\\\"10.108.16.0/21\\\"],\\\"customer_region\\\":\\\"\
          us-east-1\\\"},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\
          \":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\
          \":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/peerings/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/peerings/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-peering-use1',
              cloud: {
                kind: 'AwsPeering',
                account: '000000000000',
                vpc: 'vpc-00000000000000000',
                routes: ['10.108.16.0/21'],
                customer_region: 'us-east-1'
              },
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/peerings/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-peering-use1\",\"cloud\":{\"kind\":\"AwsPeering\",\"account\":\"000000000000\",\"vpc\":\"vpc-00000000000000000\",\"routes\":[\"10.108.16.0/21\"],\"customer_region\":\"us-east-1\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/transit-gateway-attachments:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all transit gateway attachments.
      operationId: listNetworkingV1TransitGatewayAttachments
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-tgw-use1
        - prod-tgw-usw2
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - PROVISIONING
        - READY
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1TransitGatewayAttachments_200_response'
          description: Transit Gateway Attachment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Transit Gateway Attachments
      tags:
      - Transit Gateway Attachments (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/transit-gateway-attachments?spec.display_name=prod-tgw-use1%2Cprod-tgw-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a transit gateway attachment.
      operationId: createNetworkingV1TransitGatewayAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1TransitGatewayAttachment_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1TransitGatewayAttachment_202_response'
          description: A Transit Gateway Attachment is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: TransitGatewayAttachment resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/transit-gateway-attachments/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Transit Gateway Attachment
      tags:
      - Transit Gateway Attachments (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/transit-gateway-attachments \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-tgw-use1","cloud":{"kind":"AwsTransitGatewayAttachment","ram_share_arn":"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx","transit_gateway_id":"tgw-xxxxxxxxxxxxxxxxx","routes":["100.64.0.0/10","10.0.0.0/8","192.168.0.0/16","172.16.0.0/12"]},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"n-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/transit-gateway-attachments")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/transit-gateway-attachments\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-tgw-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsTransitGatewayAttachment\\\
          \",\\\"ram_share_arn\\\":\\\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\\\
          \",\\\"transit_gateway_id\\\":\\\"tgw-xxxxxxxxxxxxxxxxx\\\",\\\"routes\\\
          \":[\\\"100.64.0.0/10\\\",\\\"10.0.0.0/8\\\",\\\"192.168.0.0/16\\\",\\\"\
          172.16.0.0/12\\\"]},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\
          \"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"n-00000\\\
          \",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/transit-gateway-attachments", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/transit-gateway-attachments",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-tgw-use1',
              cloud: {
                kind: 'AwsTransitGatewayAttachment',
                ram_share_arn: 'arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx',
                transit_gateway_id: 'tgw-xxxxxxxxxxxxxxxxx',
                routes: ['100.64.0.0/10', '10.0.0.0/8', '192.168.0.0/16', '172.16.0.0/12']
              },
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'n-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/transit-gateway-attachments");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/transit-gateway-attachments");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/transit-gateway-attachments/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a transit gateway attachment.
      operationId: deleteNetworkingV1TransitGatewayAttachment
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the transit gateway attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Transit Gateway Attachment is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Transit Gateway Attachment
      tags:
      - Transit Gateway Attachments (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a transit gateway attachment.
      operationId: getNetworkingV1TransitGatewayAttachment
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the transit gateway attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1TransitGatewayAttachment_200_response'
          description: Transit Gateway Attachment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Transit Gateway Attachment
      tags:
      - Transit Gateway Attachments (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a transit gateway attachment.

      operationId: updateNetworkingV1TransitGatewayAttachment
      parameters:
      - description: The unique identifier for the transit gateway attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1TransitGatewayAttachment_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1TransitGatewayAttachment_200_response'
          description: Transit Gateway Attachment.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Transit Gateway Attachment
      tags:
      - Transit Gateway Attachments (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-tgw-use1","cloud":{"kind":"AwsTransitGatewayAttachment","ram_share_arn":"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx","transit_gateway_id":"tgw-xxxxxxxxxxxxxxxxx","routes":["100.64.0.0/10","10.0.0.0/8","192.168.0.0/16","172.16.0.0/12"]},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-tgw-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsTransitGatewayAttachment\\\
          \",\\\"ram_share_arn\\\":\\\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\\\
          \",\\\"transit_gateway_id\\\":\\\"tgw-xxxxxxxxxxxxxxxxx\\\",\\\"routes\\\
          \":[\\\"100.64.0.0/10\\\",\\\"10.0.0.0/8\\\",\\\"192.168.0.0/16\\\",\\\"\
          172.16.0.0/12\\\"]},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\",\\\
          \"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\"id\\\":\\\"string\\\
          \",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/transit-gateway-attachments/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/transit-gateway-attachments/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-tgw-use1',
              cloud: {
                kind: 'AwsTransitGatewayAttachment',
                ram_share_arn: 'arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx',
                transit_gateway_id: 'tgw-xxxxxxxxxxxxxxxxx',
                routes: ['100.64.0.0/10', '10.0.0.0/8', '192.168.0.0/16', '172.16.0.0/12']
              },
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/transit-gateway-attachments/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-tgw-use1\",\"cloud\":{\"kind\":\"AwsTransitGatewayAttachment\",\"ram_share_arn\":\"arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\",\"transit_gateway_id\":\"tgw-xxxxxxxxxxxxxxxxx\",\"routes\":[\"100.64.0.0/10\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/private-link-accesses:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all private link accesses.
      operationId: listNetworkingV1PrivateLinkAccesses
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-pl-use1
        - prod-pl-usw2
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - PROVISIONING
        - READY
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1PrivateLinkAccesses_200_response'
          description: Private Link Access.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Private Link Accesses
      tags:
      - Private Link Accesses (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/private-link-accesses?spec.display_name=prod-pl-use1%2Cprod-pl-usw2&status.phase=PROVISIONING%2CREADY&environment=env-00000&spec.network=n-00000%2Cn-00001");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a private link access.
      operationId: createNetworkingV1PrivateLinkAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1PrivateLinkAccess_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1PrivateLinkAccess_202_response'
          description: A Private Link Access is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: PrivateLinkAccess resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/private-link-accesses/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Private Link Access
      tags:
      - Private Link Accesses (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/private-link-accesses \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-pl-use1","cloud":{"kind":"AwsPrivateLinkAccess","account":"000000000000"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"n-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/private-link-accesses")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/private-link-accesses\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-pl-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsPrivateLinkAccess\\\
          \",\\\"account\\\":\\\"000000000000\\\"},\\\"environment\\\":{\\\"id\\\"\
          :\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\
          \"id\\\":\\\"n-00000\\\",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\t\
          req, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/private-link-accesses", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/private-link-accesses",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-pl-use1',
              cloud: {kind: 'AwsPrivateLinkAccess', account: '000000000000'},
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'n-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/private-link-accesses");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/private-link-accesses");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/private-link-accesses/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a private link access.
      operationId: deleteNetworkingV1PrivateLinkAccess
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the private link access.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Private Link Access is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Private Link Access
      tags:
      - Private Link Accesses (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a private link access.
      operationId: getNetworkingV1PrivateLinkAccess
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the private link access.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1PrivateLinkAccess_200_response'
          description: Private Link Access.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Private Link Access
      tags:
      - Private Link Accesses (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a private link access.

      operationId: updateNetworkingV1PrivateLinkAccess
      parameters:
      - description: The unique identifier for the private link access.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1PrivateLinkAccess_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1PrivateLinkAccess_200_response'
          description: Private Link Access.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Private Link Access
      tags:
      - Private Link Accesses (networking/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-pl-use1","cloud":{"kind":"AwsPrivateLinkAccess","account":"000000000000"},"environment":{"id":"env-00000","environment":"string"},"network":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-pl-use1\\\",\\\"cloud\\\":{\\\"kind\\\":\\\"AwsPrivateLinkAccess\\\
          \",\\\"account\\\":\\\"000000000000\\\"},\\\"environment\\\":{\\\"id\\\"\
          :\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"network\\\":{\\\
          \"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\treq,\
          \ _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/private-link-accesses/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/private-link-accesses/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-pl-use1',
              cloud: {kind: 'AwsPrivateLinkAccess', account: '000000000000'},
              environment: {id: 'env-00000', environment: 'string'},
              network: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/private-link-accesses/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-pl-use1\",\"cloud\":{\"kind\":\"AwsPrivateLinkAccess\",\"account\":\"000000000000\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /networking/v1/network-link-services:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all network link services.
      operationId: listNetworkingV1NetworkLinkServices
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-net-1-nls
        - dev-net-1-nls
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - READY
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1NetworkLinkServices_200_response'
          description: Network Link Service.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Network Link Services
      tags:
      - Network Link Services (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-services?spec.display_name=prod-net-1-nls%2Cdev-net-1-nls&status.phase=READY&environment=env-00000&spec.network=n-00000%2Cn-00001");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create a network link service.
      operationId: createNetworkingV1NetworkLinkService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1NetworkLinkService_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1NetworkLinkService_202_response'
          description: A Network Link Service is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: NetworkLinkService resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/network-link-services/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Network Link Service
      tags:
      - Network Link Services (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/network-link-services \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-net-1-nls","description":"Allow connections from analytics hub","accept":{"environments":["string"],"networks":["string"]},"environment":{"id":"env-00000"},"network":{"id":"n-00000","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-services")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-services\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-net-1-nls\\\",\\\"description\\\":\\\"Allow connections from analytics\
          \ hub\\\",\\\"accept\\\":{\\\"environments\\\":[\\\"string\\\"],\\\"networks\\\
          \":[\\\"string\\\"]},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\
          \"network\\\":{\\\"id\\\":\\\"n-00000\\\",\\\"environment\\\":\\\"string\\\
          \"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/network-link-services", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-services",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-net-1-nls',
              description: 'Allow connections from analytics hub',
              accept: {environments: ['string'], networks: ['string']},
              environment: {id: 'env-00000'},
              network: {id: 'n-00000', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-services");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-services");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /networking/v1/network-link-services/{id}:
    delete:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to delete a network link service.
      operationId: deleteNetworkingV1NetworkLinkService
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network link service.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Network Link Service is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Network Link Service
      tags:
      - Network Link Services (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/network-link-services/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-services/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read a network link service.
      operationId: getNetworkingV1NetworkLinkService
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network link service.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1NetworkLinkService_200_response'
          description: Network Link Service.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Network Link Service
      tags:
      - Network Link Services (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-services/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-services/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to update a network link service.

      operationId: updateNetworkingV1NetworkLinkService
      parameters:
      - description: The unique identifier for the network link service.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1NetworkLinkService_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1NetworkLinkService_200_response'
          description: Network Link Service.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Network Link Service
      tags:
      - Network Link Services (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-net-1-nls","description":"Allow connections from analytics hub","accept":{"environments":["string"],"networks":["string"]},"environment":{"id":"env-00000"},"network":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-net-1-nls\\\",\\\"description\\\":\\\"Allow connections from analytics\
          \ hub\\\",\\\"accept\\\":{\\\"environments\\\":[\\\"string\\\"],\\\"networks\\\
          \":[\\\"string\\\"]},\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\
          \"network\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\
          \"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/network-link-services/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-services/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-net-1-nls',
              description: 'Allow connections from analytics hub',
              accept: {environments: ['string'], networks: ['string']},
              environment: {id: 'env-00000'},
              network: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-services/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-net-1-nls\",\"description\":\"Allow connections from analytics hub\",\"accept\":{\"environments\":[\"string\"],\"networks\":[\"string\"]},\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /networking/v1/network-link-endpoints:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all network link endpoints.
      operationId: listNetworkingV1NetworkLinkEndpoints
      parameters:
      - description: Filter the results by exact match for spec.display_name. Pass
          multiple times to see results matching any of the values.
        example:
        - prod-net-1-nle
        - dev-net-1-nle
        explode: true
        in: query
        name: spec.display_name
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - READY
        - PENDING_ACCEPT
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network. Pass multiple
          times to see results matching any of the values.
        example:
        - n-00000
        - n-00001
        explode: true
        in: query
        name: spec.network
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network_link_service.
          Pass multiple times to see results matching any of the values.
        example:
        - nls-abcde
        - nls-00000
        explode: true
        in: query
        name: spec.network_link_service
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1NetworkLinkEndpoints_200_response'
          description: Network Link Endpoint.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Network Link Endpoints
      tags:
      - Network Link Endpoints (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-endpoints?spec.display_name=prod-net-1-nle%2Cdev-net-1-nle&status.phase=READY%2CPENDING_ACCEPT&environment=env-00000&spec.network=n-00000%2Cn-00001&spec.network_link_service=nls-abcde%2Cnls-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create a network link endpoint.
      operationId: createNetworkingV1NetworkLinkEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_202_response'
          description: A Network Link Endpoint is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: NetworkLinkEndpoint resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/networking/v1/network-link-endpoints/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a Network Link Endpoint
      tags:
      - Network Link Endpoints (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/networking/v1/network-link-endpoints \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-net-1-nle","description":"Connect to Network - analytics hub","environment":{"id":"env-00000"},"network":{"id":"n-00000","environment":"string"},"network_link_service":{"id":"nls-abcde","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"nls-abcde\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-endpoints")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-endpoints\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-net-1-nle\\\",\\\"description\\\":\\\"Connect to Network - analytics\
          \ hub\\\",\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\"network\\\
          \":{\\\"id\\\":\\\"n-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"\
          network_link_service\\\":{\\\"id\\\":\\\"nls-abcde\\\",\\\"environment\\\
          \":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"nls-abcde\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/networking/v1/network-link-endpoints", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-endpoints",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-net-1-nle',
              description: 'Connect to Network - analytics hub',
              environment: {id: 'env-00000'},
              network: {id: 'n-00000', environment: 'string'},
              network_link_service: {id: 'nls-abcde', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-endpoints");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"nls-abcde\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-endpoints");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"n-00000\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"nls-abcde\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /networking/v1/network-link-endpoints/{id}:
    delete:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to delete a network link endpoint.
      operationId: deleteNetworkingV1NetworkLinkEndpoint
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network link endpoint.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Network Link Endpoint is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete a Network Link Endpoint
      tags:
      - Network Link Endpoints (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read a network link endpoint.
      operationId: getNetworkingV1NetworkLinkEndpoint
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the network link endpoint.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1NetworkLinkEndpoint_200_response'
          description: Network Link Endpoint.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Network Link Endpoint
      tags:
      - Network Link Endpoints (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D?environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to update a network link endpoint.

      operationId: updateNetworkingV1NetworkLinkEndpoint
      parameters:
      - description: The unique identifier for the network link endpoint.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateNetworkingV1NetworkLinkEndpoint_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1NetworkLinkEndpoint_200_response'
          description: Network Link Endpoint.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update a Network Link Endpoint
      tags:
      - Network Link Endpoints (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"prod-net-1-nle","description":"Connect to Network - analytics hub","environment":{"id":"env-00000"},"network":{"id":"string","environment":"string"},"network_link_service":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"prod-net-1-nle\\\",\\\"description\\\":\\\"Connect to Network - analytics\
          \ hub\\\",\\\"environment\\\":{\\\"id\\\":\\\"env-00000\\\"},\\\"network\\\
          \":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\"},\\\"network_link_service\\\
          \":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\"}}}\")\n\
          \n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/networking/v1/network-link-endpoints/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-endpoints/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'prod-net-1-nle',
              description: 'Connect to Network - analytics hub',
              environment: {id: 'env-00000'},
              network: {id: 'string', environment: 'string'},
              network_link_service: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-endpoints/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"prod-net-1-nle\",\"description\":\"Connect to Network - analytics hub\",\"environment\":{\"id\":\"env-00000\"},\"network\":{\"id\":\"string\",\"environment\":\"string\"},\"network_link_service\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /networking/v1/network-link-service-associations:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all network link service associations.
      operationId: listNetworkingV1NetworkLinkServiceAssociations
      parameters:
      - description: Filter the results by exact match for status.phase. Pass multiple
          times to see results matching any of the values.
        example:
        - READY
        - PENDING_ACCEPT
        explode: true
        in: query
        name: status.phase
        required: false
        schema:
          $ref: '#/components/schemas/MultipleSearchFilter'
        style: form
      - description: Filter the results by exact match for spec.network_link_service.
        example: nls-abcde
        explode: true
        in: query
        name: spec.network_link_service
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listNetworkingV1NetworkLinkServiceAssociations_200_response'
          description: Network Link Service Association.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List of Network Link Service Associations
      tags:
      - Network Link Service Associations (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-service-associations?status.phase=READY%2CPENDING_ACCEPT&spec.network_link_service=nls-abcde&environment=env-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /networking/v1/network-link-service-associations/{id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Networking v1](https://img.shields.io/badge/-Request%20Access%20To%20Networking%20v1-%23bc8540)](mailto:ccloud-api-access+networking-v1-early-access@confluent.io?subject=Request%20to%20join%20networking/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20networking/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read a network link service association.
      operationId: getNetworkingV1NetworkLinkServiceAssociation
      parameters:
      - description: The unique identifier for the network link service association.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNetworkingV1NetworkLinkServiceAssociation_200_response'
          description: Network Link Service Association.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Read a Network Link Service Association
      tags:
      - Network Link Service Associations (networking/v1)
      x-request-access-name: Networking v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/networking/v1/network-link-service-associations/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/networking/v1/network-link-service-associations/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/networking/v1/network-link-service-associations/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/networking/v1/network-link-service-associations/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/networking/v1/network-link-service-associations/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/networking/v1/network-link-service-associations/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/networking/v1/network-link-service-associations/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-request-access-name: Networking v1
  /iam/v2/identity-providers:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all identity providers.
      operationId: listIamV2IdentityProviders
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 255
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2IdentityProviders_200_response'
          description: Identity Provider.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Identity Providers
      tags:
      - Identity Providers (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/identity-providers \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/identity-providers", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an identity provider.
      operationId: createIamV2IdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2IdentityProvider_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2IdentityProvider_request'
          description: An Identity Provider was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: IdentityProvider resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/identity-providers/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create an Identity Provider
      tags:
      - Identity Providers (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/identity-providers \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"My OIDC Provider","description":"string","issuer":"https://login.microsoftonline.com/{tenantid}/v2.0","jwks_uri":"https://login.microsoftonline.com/common/discovery/v2.0/keys"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"My OIDC Provider\\\
          \",\\\"description\\\":\\\"string\\\",\\\"issuer\\\":\\\"https://login.microsoftonline.com/{tenantid}/v2.0\\\
          \",\\\"jwks_uri\\\":\\\"https://login.microsoftonline.com/common/discovery/v2.0/keys\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/identity-providers", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'My OIDC Provider',
            description: 'string',
            issuer: 'https://login.microsoftonline.com/{tenantid}/v2.0',
            jwks_uri: 'https://login.microsoftonline.com/common/discovery/v2.0/keys'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/identity-providers/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an identity provider.
      operationId: deleteIamV2IdentityProvider
      parameters:
      - description: The unique identifier for the identity provider.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Identity Provider is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete an Identity Provider
      tags:
      - Identity Providers (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/identity-providers/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an identity provider.
      operationId: getIamV2IdentityProvider
      parameters:
      - description: The unique identifier for the identity provider.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2IdentityProvider_200_response'
          description: Identity Provider.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read an Identity Provider
      tags:
      - Identity Providers (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/identity-providers/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an identity provider.

      operationId: updateIamV2IdentityProvider
      parameters:
      - description: The unique identifier for the identity provider.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.IdentityProviderUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2IdentityProvider_200_response'
          description: Identity Provider.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update an Identity Provider
      tags:
      - Identity Providers (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"My OIDC Provider","description":"string","issuer":"https://login.microsoftonline.com/{tenantid}/v2.0","jwks_uri":"https://login.microsoftonline.com/common/discovery/v2.0/keys"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"My OIDC Provider\\\
          \",\\\"description\\\":\\\"string\\\",\\\"issuer\\\":\\\"https://login.microsoftonline.com/{tenantid}/v2.0\\\
          \",\\\"jwks_uri\\\":\\\"https://login.microsoftonline.com/common/discovery/v2.0/keys\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/identity-providers/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'My OIDC Provider',
            description: 'string',
            issuer: 'https://login.microsoftonline.com/{tenantid}/v2.0',
            jwks_uri: 'https://login.microsoftonline.com/common/discovery/v2.0/keys'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"My OIDC Provider\",\"description\":\"string\",\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/identity-providers/{provider_id}/jwks:
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to refresh the provider's JWKS

      operationId: refreshIamV2JsonWebKeySet
      parameters:
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.Jwks'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshIamV2JsonWebKeySet_200_response'
          description: Jwks.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Refresh a provider's JWKS
      tags:
      - Jwks (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/jwks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"jwks_status":"REFRESHED"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"jwks_status\":\"REFRESHED\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/jwks")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/jwks\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"jwks_status\\\"\
          :\\\"REFRESHED\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"jwks_status\":\"REFRESHED\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/identity-providers/%7Bprovider_id%7D/jwks", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/jwks",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({spec: {jwks_status: 'REFRESHED'}}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/jwks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"jwks_status\":\"REFRESHED\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/jwks");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"jwks_status\":\"REFRESHED\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/identity-providers/{provider_id}/identity-pools:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all identity pools.
      operationId: listIamV2IdentityPools
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 255
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIamV2IdentityPools_200_response'
          description: Identity Pool.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Identity Pools
      tags:
      - Identity Pools (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create an identity pool.
      operationId: createIamV2IdentityPool
      parameters:
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createIamV2IdentityPool_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createIamV2IdentityPool_request'
          description: An Identity Pool was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: IdentityPool resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/iam/v2/identity-providers/{provider_id}/identity-pools/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create an Identity Pool
      tags:
      - Identity Pools (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"My Identity Pool","description":"Prod Access to Kafka clusters to Release Engineering","identity_claim":"claims.sub","filter":"claims.aud==\"confluent\" && claims.group!=\"invalid_group\""}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"My Identity\
          \ Pool\\\",\\\"description\\\":\\\"Prod Access to Kafka clusters to Release\
          \ Engineering\\\",\\\"identity_claim\\\":\\\"claims.sub\\\",\\\"filter\\\
          \":\\\"claims.aud==\\\\\\\"confluent\\\\\\\" && claims.group!=\\\\\\\"invalid_group\\\
          \\\\\"\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'My Identity Pool',
            description: 'Prod Access to Kafka clusters to Release Engineering',
            identity_claim: 'claims.sub',
            filter: 'claims.aud=="confluent" && claims.group!="invalid_group"'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /iam/v2/identity-providers/{provider_id}/identity-pools/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete an identity pool.
      operationId: deleteIamV2IdentityPool
      parameters:
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the identity pool.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Identity Pool is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete an Identity Pool
      tags:
      - Identity Pools (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read an identity pool.
      operationId: getIamV2IdentityPool
      parameters:
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the identity pool.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2IdentityPool_200_response'
          description: Identity Pool.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read an Identity Pool
      tags:
      - Identity Pools (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update an identity pool.

      operationId: updateIamV2IdentityPool
      parameters:
      - description: The Provider
        explode: false
        in: path
        name: provider_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the identity pool.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iam.v2.IdentityPool'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIamV2IdentityPool_200_response'
          description: Identity Pool.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update an Identity Pool
      tags:
      - Identity Pools (iam/v2)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"My Identity Pool","description":"Prod Access to Kafka clusters to Release Engineering","identity_claim":"claims.sub","filter":"claims.aud==\"confluent\" && claims.group!=\"invalid_group\""}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"My Identity\
          \ Pool\\\",\\\"description\\\":\\\"Prod Access to Kafka clusters to Release\
          \ Engineering\\\",\\\"identity_claim\\\":\\\"claims.sub\\\",\\\"filter\\\
          \":\\\"claims.aud==\\\\\\\"confluent\\\\\\\" && claims.group!=\\\\\\\"invalid_group\\\
          \\\\\"\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'My Identity Pool',
            description: 'Prod Access to Kafka clusters to Release Engineering',
            identity_claim: 'claims.sub',
            filter: 'claims.aud=="confluent" && claims.group!="invalid_group"'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/iam/v2/identity-providers/%7Bprovider_id%7D/identity-pools/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"My Identity Pool\",\"description\":\"Prod Access to Kafka clusters to Release Engineering\",\"identity_claim\":\"claims.sub\",\"filter\":\"claims.aud==\\\"confluent\\\" && claims.group!=\\\"invalid_group\\\"\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /sts/v1/oauth2/token:
    post:
      description: |
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Use this operation to exchange an access token (JWT) issued by an external identity provider for
        an access token (JWT) issued by Confluent.This enables the use of external identities
        to access Confluent Cloud APIs.
      operationId: exchangeStsV1OauthToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/exchangeStsV1OauthToken_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sts.v1.TokenExchangeReply'
          description: |
            access token used to access public control plane api
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      summary: Exchange an OAuth Token
      tags:
      - OAuth Tokens (sts/v1)
      x-name: sts.v1.OauthToken
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/sts/v1/oauth2/token \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange \
            --data subject_token=test_jwt_token \
            --data identity_pool_id=pool_1 \
            --data subject_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt \
            --data requested_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Aaccess_token \
            --data expires_in=900
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
          RequestBody body = RequestBody.create(mediaType, "grant_type=urn%253Aietf%253Aparams%253Aoauth%253Agrant-type%253Atoken-exchange&subject_token=test_jwt_token&identity_pool_id=pool_1&subject_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Ajwt&requested_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Aaccess_token&expires_in=900");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sts/v1/oauth2/token")
            .post(body)
            .addHeader("content-type", "application/x-www-form-urlencoded")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sts/v1/oauth2/token\"\
          \n\n\tpayload := strings.NewReader(\"grant_type=urn%253Aietf%253Aparams%253Aoauth%253Agrant-type%253Atoken-exchange&subject_token=test_jwt_token&identity_pool_id=pool_1&subject_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Ajwt&requested_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Aaccess_token&expires_in=900\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/x-www-form-urlencoded\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "grant_type=urn%253Aietf%253Aparams%253Aoauth%253Agrant-type%253Atoken-exchange&subject_token=test_jwt_token&identity_pool_id=pool_1&subject_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Ajwt&requested_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Aaccess_token&expires_in=900"

          headers = { 'content-type': "application/x-www-form-urlencoded" }

          conn.request("POST", "/sts/v1/oauth2/token", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const qs = require("querystring");
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sts/v1/oauth2/token",
            "headers": {
              "content-type": "application/x-www-form-urlencoded"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(qs.stringify({
            grant_type: 'urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange',
            subject_token: 'test_jwt_token',
            identity_pool_id: 'pool_1',
            subject_token_type: 'urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt',
            requested_token_type: 'urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Aaccess_token',
            expires_in: '900'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sts/v1/oauth2/token");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/x-www-form-urlencoded");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "grant_type=urn%253Aietf%253Aparams%253Aoauth%253Agrant-type%253Atoken-exchange&subject_token=test_jwt_token&identity_pool_id=pool_1&subject_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Ajwt&requested_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Aaccess_token&expires_in=900");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sts/v1/oauth2/token");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/x-www-form-urlencoded");
          request.AddParameter("application/x-www-form-urlencoded", "grant_type=urn%253Aietf%253Aparams%253Aoauth%253Agrant-type%253Atoken-exchange&subject_token=test_jwt_token&identity_pool_id=pool_1&subject_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Ajwt&requested_token_type=urn%253Aietf%253Aparams%253Aoauth%253Atoken-type%253Aaccess_token&expires_in=900", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka-quotas/v1/client-quotas:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all client quotas.
      operationId: listKafkaQuotasV1ClientQuotas
      parameters:
      - description: Filter the results by exact match for spec.cluster.
        example: lkc-xxxxx
        explode: true
        in: query
        name: spec.cluster
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for environment.
        example: env-xxxxx
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listKafkaQuotasV1ClientQuotas_200_response'
          description: Client Quota.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Client Quotas
      tags:
      - Client Quotas (kafka-quotas/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/kafka-quotas/v1/client-quotas?spec.cluster=lkc-xxxxx&environment=env-xxxxx");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a client quota.
      operationId: createKafkaQuotasV1ClientQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_202_response'
          description: A Client Quota is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: ClientQuota resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/kafka-quotas/v1/client-quotas/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Client Quota
      tags:
      - Client Quotas (kafka-quotas/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/kafka-quotas/v1/client-quotas \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"QuotaForSA1","description":"This quota defines limits on how much the target principals can use cluster lkc-xxxxx","throughput":{"ingress_byte_rate":"5","egress_byte_rate":"5"},"cluster":{"id":"lkc-xxxxx","environment":"string"},"principals":[{"id":"string"}],"environment":[{"id":"env-xxxxx"}]}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"lkc-xxxxx\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":[{\"id\":\"env-xxxxx\"}]}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/kafka-quotas/v1/client-quotas")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/kafka-quotas/v1/client-quotas\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"QuotaForSA1\\\",\\\"description\\\":\\\"This quota defines limits on\
          \ how much the target principals can use cluster lkc-xxxxx\\\",\\\"throughput\\\
          \":{\\\"ingress_byte_rate\\\":\\\"5\\\",\\\"egress_byte_rate\\\":\\\"5\\\
          \"},\\\"cluster\\\":{\\\"id\\\":\\\"lkc-xxxxx\\\",\\\"environment\\\":\\\
          \"string\\\"},\\\"principals\\\":[{\\\"id\\\":\\\"string\\\"}],\\\"environment\\\
          \":[{\\\"id\\\":\\\"env-xxxxx\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"lkc-xxxxx\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":[{\"id\":\"env-xxxxx\"}]}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/kafka-quotas/v1/client-quotas", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/kafka-quotas/v1/client-quotas",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'QuotaForSA1',
              description: 'This quota defines limits on how much the target principals can use cluster lkc-xxxxx',
              throughput: {ingress_byte_rate: '5', egress_byte_rate: '5'},
              cluster: {id: 'lkc-xxxxx', environment: 'string'},
              principals: [{id: 'string'}],
              environment: [{id: 'env-xxxxx'}]
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/kafka-quotas/v1/client-quotas");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"lkc-xxxxx\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":[{\"id\":\"env-xxxxx\"}]}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/kafka-quotas/v1/client-quotas");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"lkc-xxxxx\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":[{\"id\":\"env-xxxxx\"}]}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka-quotas/v1/client-quotas/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a client quota.
      operationId: deleteKafkaQuotasV1ClientQuota
      parameters:
      - description: The unique identifier for the client quota.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Client Quota is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Client Quota
      tags:
      - Client Quotas (kafka-quotas/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka-quotas/v1/client-quotas/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/kafka-quotas/v1/client-quotas/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a client quota.
      operationId: getKafkaQuotasV1ClientQuota
      parameters:
      - description: The unique identifier for the client quota.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getKafkaQuotasV1ClientQuota_200_response'
          description: Client Quota.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Client Quota
      tags:
      - Client Quotas (kafka-quotas/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka-quotas/v1/client-quotas/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/kafka-quotas/v1/client-quotas/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a client quota.

      operationId: updateKafkaQuotasV1ClientQuota
      parameters:
      - description: The unique identifier for the client quota.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateKafkaQuotasV1ClientQuota_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getKafkaQuotasV1ClientQuota_200_response'
          description: Client Quota.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update a Client Quota
      tags:
      - Client Quotas (kafka-quotas/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"QuotaForSA1","description":"This quota defines limits on how much the target principals can use cluster lkc-xxxxx","throughput":{"ingress_byte_rate":"5","egress_byte_rate":"5"},"cluster":{"id":"string","environment":"string"},"principals":[{"id":"string"}],"environment":{"id":"env-00000"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":{\"id\":\"env-00000\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"QuotaForSA1\\\",\\\"description\\\":\\\"This quota defines limits on\
          \ how much the target principals can use cluster lkc-xxxxx\\\",\\\"throughput\\\
          \":{\\\"ingress_byte_rate\\\":\\\"5\\\",\\\"egress_byte_rate\\\":\\\"5\\\
          \"},\\\"cluster\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"\
          string\\\"},\\\"principals\\\":[{\\\"id\\\":\\\"string\\\"}],\\\"environment\\\
          \":{\\\"id\\\":\\\"env-00000\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":{\"id\":\"env-00000\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/kafka-quotas/v1/client-quotas/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/kafka-quotas/v1/client-quotas/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'QuotaForSA1',
              description: 'This quota defines limits on how much the target principals can use cluster lkc-xxxxx',
              throughput: {ingress_byte_rate: '5', egress_byte_rate: '5'},
              cluster: {id: 'string', environment: 'string'},
              principals: [{id: 'string'}],
              environment: {id: 'env-00000'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":{\"id\":\"env-00000\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/kafka-quotas/v1/client-quotas/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"QuotaForSA1\",\"description\":\"This quota defines limits on how much the target principals can use cluster lkc-xxxxx\",\"throughput\":{\"ingress_byte_rate\":\"5\",\"egress_byte_rate\":\"5\"},\"cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"principals\":[{\"id\":\"string\"}],\"environment\":{\"id\":\"env-00000\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /sd/v1/pipelines:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all pipelines.
      operationId: listSdV1Pipelines
      parameters:
      - description: Filter the results by exact match for environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for spec.kafka_cluster.
        example: lkc-00000
        explode: true
        in: query
        name: spec.kafka_cluster
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 100
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSdV1Pipelines_200_response'
          description: Pipeline.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Pipelines
      tags:
      - Pipelines (sd/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sd/v1/pipelines?environment=env-00000&spec.kafka_cluster=lkc-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a pipeline.
      operationId: createSdV1Pipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSdV1Pipeline_request'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSdV1Pipeline_202_response'
          description: A Pipeline is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Pipeline resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/sd/v1/pipelines/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Pipeline
      tags:
      - Pipelines (sd/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/sd/v1/pipelines \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"MyFirstPipeline","description":"My first pipeline","retained_topic_names":["topic1","topic2"],"activated":false,"activation_privilege":false,"source_code":{"sql":"CREATE STREAM `upstream` (id INTEGER, name STRING)
            WITH (kafka_topic = '\''topic'\'', partitions=1, value_format='\''JSON'\'');
          CREATE STREAM `downstream` AS SELECT * FROM upstream;
          "},"secrets":{"secret_name_1":"secret1","secret_name_2":"secret2"},"environment":{"id":"env-00000","environment":"string"},"kafka_cluster":{"id":"lkc-00000","environment":"string"},"ksql_cluster":{"id":"string","environment":"string"},"stream_governance_cluster":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sd/v1/pipelines")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sd/v1/pipelines\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"MyFirstPipeline\\\",\\\"description\\\":\\\"My first pipeline\\\",\\\
          \"retained_topic_names\\\":[\\\"topic1\\\",\\\"topic2\\\"],\\\"activated\\\
          \":false,\\\"activation_privilege\\\":false,\\\"source_code\\\":{\\\"sql\\\
          \":\\\"CREATE STREAM `upstream` (id INTEGER, name STRING)\\\n  WITH (kafka_topic\
          \ = 'topic', partitions=1, value_format='JSON');\\\nCREATE STREAM `downstream`\
          \ AS SELECT * FROM upstream;\\\n\\\"},\\\"secrets\\\":{\\\"secret_name_1\\\
          \":\\\"secret1\\\",\\\"secret_name_2\\\":\\\"secret2\\\"},\\\"environment\\\
          \":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"\
          kafka_cluster\\\":{\\\"id\\\":\\\"lkc-00000\\\",\\\"environment\\\":\\\"\
          string\\\"},\\\"ksql_cluster\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\
          \":\\\"string\\\"},\\\"stream_governance_cluster\\\":{\\\"id\\\":\\\"string\\\
          \",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/sd/v1/pipelines", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sd/v1/pipelines",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'MyFirstPipeline',
              description: 'My first pipeline',
              retained_topic_names: ['topic1', 'topic2'],
              activated: false,
              activation_privilege: false,
              source_code: {
                sql: 'CREATE STREAM `upstream` (id INTEGER, name STRING)
            WITH (kafka_topic = \'topic\', partitions=1, value_format=\'JSON\');
          CREATE STREAM `downstream` AS SELECT * FROM upstream;
          '
              },
              secrets: {secret_name_1: 'secret1', secret_name_2: 'secret2'},
              environment: {id: 'env-00000', environment: 'string'},
              kafka_cluster: {id: 'lkc-00000', environment: 'string'},
              ksql_cluster: {id: 'string', environment: 'string'},
              stream_governance_cluster: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sd/v1/pipelines");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sd/v1/pipelines");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"lkc-00000\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /sd/v1/pipelines/{id}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a pipeline.
      operationId: deleteSdV1Pipeline
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Scope the operation to the given spec.kafka_cluster.
        example: lkc-00000
        explode: true
        in: query
        name: spec.kafka_cluster
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the pipeline.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Pipeline is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Pipeline
      tags:
      - Pipelines (sd/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a pipeline.
      operationId: getSdV1Pipeline
      parameters:
      - description: Scope the operation to the given environment.
        example: env-00000
        explode: true
        in: query
        name: environment
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Scope the operation to the given spec.kafka_cluster.
        example: lkc-00000
        explode: true
        in: query
        name: spec.kafka_cluster
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the pipeline.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSdV1Pipeline_200_response'
          description: Pipeline.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Pipeline
      tags:
      - Pipelines (sd/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D?environment=env-00000&spec.kafka_cluster=lkc-00000");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to update a pipeline.

      operationId: updateSdV1Pipeline
      parameters:
      - description: The unique identifier for the pipeline.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSdV1Pipeline_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSdV1Pipeline_200_response'
          description: Pipeline.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Update a Pipeline
      tags:
      - Pipelines (sd/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"spec":{"display_name":"MyFirstPipeline","description":"My first pipeline","retained_topic_names":["topic1","topic2"],"activated":false,"activation_privilege":false,"source_code":{"sql":"CREATE STREAM `upstream` (id INTEGER, name STRING)
            WITH (kafka_topic = '\''topic'\'', partitions=1, value_format='\''JSON'\'');
          CREATE STREAM `downstream` AS SELECT * FROM upstream;
          "},"secrets":{"secret_name_1":"secret1","secret_name_2":"secret2"},"environment":{"id":"env-00000","environment":"string"},"kafka_cluster":{"id":"string","environment":"string"},"ksql_cluster":{"id":"string","environment":"string"},"stream_governance_cluster":{"id":"string","environment":"string"}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"display_name\\\"\
          :\\\"MyFirstPipeline\\\",\\\"description\\\":\\\"My first pipeline\\\",\\\
          \"retained_topic_names\\\":[\\\"topic1\\\",\\\"topic2\\\"],\\\"activated\\\
          \":false,\\\"activation_privilege\\\":false,\\\"source_code\\\":{\\\"sql\\\
          \":\\\"CREATE STREAM `upstream` (id INTEGER, name STRING)\\\n  WITH (kafka_topic\
          \ = 'topic', partitions=1, value_format='JSON');\\\nCREATE STREAM `downstream`\
          \ AS SELECT * FROM upstream;\\\n\\\"},\\\"secrets\\\":{\\\"secret_name_1\\\
          \":\\\"secret1\\\",\\\"secret_name_2\\\":\\\"secret2\\\"},\\\"environment\\\
          \":{\\\"id\\\":\\\"env-00000\\\",\\\"environment\\\":\\\"string\\\"},\\\"\
          kafka_cluster\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\":\\\"string\\\
          \"},\\\"ksql_cluster\\\":{\\\"id\\\":\\\"string\\\",\\\"environment\\\"\
          :\\\"string\\\"},\\\"stream_governance_cluster\\\":{\\\"id\\\":\\\"string\\\
          \",\\\"environment\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"\
          PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/sd/v1/pipelines/%7Bid%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/sd/v1/pipelines/%7Bid%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              display_name: 'MyFirstPipeline',
              description: 'My first pipeline',
              retained_topic_names: ['topic1', 'topic2'],
              activated: false,
              activation_privilege: false,
              source_code: {
                sql: 'CREATE STREAM `upstream` (id INTEGER, name STRING)
            WITH (kafka_topic = \'topic\', partitions=1, value_format=\'JSON\');
          CREATE STREAM `downstream` AS SELECT * FROM upstream;
          '
              },
              secrets: {secret_name_1: 'secret1', secret_name_2: 'secret2'},
              environment: {id: 'env-00000', environment: 'string'},
              kafka_cluster: {id: 'string', environment: 'string'},
              ksql_cluster: {id: 'string', environment: 'string'},
              stream_governance_cluster: {id: 'string', environment: 'string'}
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/sd/v1/pipelines/%7Bid%7D");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"display_name\":\"MyFirstPipeline\",\"description\":\"My first pipeline\",\"retained_topic_names\":[\"topic1\",\"topic2\"],\"activated\":false,\"activation_privilege\":false,\"source_code\":{\"sql\":\"CREATE STREAM `upstream` (id INTEGER, name STRING)\
            WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');\
          CREATE STREAM `downstream` AS SELECT * FROM upstream;\
          \"},\"secrets\":{\"secret_name_1\":\"secret1\",\"secret_name_2\":\"secret2\"},\"environment\":{\"id\":\"env-00000\",\"environment\":\"string\"},\"kafka_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"ksql_cluster\":{\"id\":\"string\",\"environment\":\"string\"},\"stream_governance_cluster\":{\"id\":\"string\",\"environment\":\"string\"}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /byok/v1/keys:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all keys.
      operationId: listByokV1Keys
      parameters:
      - description: Filter the results by exact match for provider.
        example: AWS
        explode: true
        in: query
        name: provider
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for state.
        example: IN_USE
        explode: true
        in: query
        name: state
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listByokV1Keys_200_response'
          description: Key.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Keys
      tags:
      - Keys (byok/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/byok/v1/keys?provider=AWS&state=IN_USE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/byok/v1/keys?provider=AWS&state=IN_USE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/byok/v1/keys?provider=AWS&state=IN_USE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/byok/v1/keys?provider=AWS&state=IN_USE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/byok/v1/keys?provider=AWS&state=IN_USE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/byok/v1/keys?provider=AWS&state=IN_USE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/byok/v1/keys?provider=AWS&state=IN_USE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to create a key.
      operationId: createByokV1Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createByokV1Key_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createByokV1Key_request'
          description: A Key was created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Key resource uri
              explode: false
              schema:
                example: "https://api.confluent.cloud/byok/v1/keys/{id}"
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: "The request would exceed the quota: kafka_clusters_per_environment"
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: "https://api.confluent.cloud/{object}/{id}"
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: "The property '/cluster/storage_size' of type string did\
                    \ not match the following type: integer"
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Key
      tags:
      - Keys (byok/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/byok/v1/keys \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"key":{"key_arn":"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab","kind":"AwsKey"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"key\":{\"key_arn\":\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\"kind\":\"AwsKey\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/byok/v1/keys")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/byok/v1/keys\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"key\\\":{\\\"key_arn\\\":\\\"\
          arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\\\
          \",\\\"kind\\\":\\\"AwsKey\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"key\":{\"key_arn\":\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\"kind\":\"AwsKey\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/byok/v1/keys", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/byok/v1/keys",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            key: {
              key_arn: 'arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab',
              kind: 'AwsKey'
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/byok/v1/keys");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"key\":{\"key_arn\":\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\"kind\":\"AwsKey\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/byok/v1/keys");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"key\":{\"key_arn\":\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\"kind\":\"AwsKey\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /byok/v1/keys/{id}:
    delete:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to delete a key.
      operationId: deleteByokV1Key
      parameters:
      - description: The unique identifier for the key.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Key is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Key
      tags:
      - Keys (byok/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://api.confluent.cloud/byok/v1/keys/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/byok/v1/keys/%7Bid%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/byok/v1/keys/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/byok/v1/keys/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/byok/v1/keys/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/byok/v1/keys/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/byok/v1/keys/%7Bid%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Make a request to read a key.
      operationId: getByokV1Key
      parameters:
      - description: The unique identifier for the key.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getByokV1Key_200_response'
          description: Key.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Key
      tags:
      - Keys (byok/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/byok/v1/keys/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/byok/v1/keys/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/byok/v1/keys/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/byok/v1/keys/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/byok/v1/keys/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/byok/v1/keys/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/byok/v1/keys/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /billing/v1/costs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a sorted, filtered, paginated list of all costs.
      operationId: listBillingV1Costs
      parameters:
      - description: Filter the results by exact match for start_date.
        example: 2022-10-12
        explode: true
        in: query
        name: start_date
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: Filter the results by exact match for end_date.
        example: 2022-10-15
        explode: true
        in: query
        name: end_date
        required: true
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 5000
          maximum: 10000
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBillingV1Costs_200_response'
          description: Cost.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: "Basic error=\"invalid_key\", error_description=\"The API Key\
                \ is invalid\""
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: "The DeLorean has run out of gas, but Doc Brown will fill\
                    \ 'er up for you asap"
              schema:
                $ref: '#/components/schemas/Failure'
          description: "Oops, something went wrong!"
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Costs
      tags:
      - Costs (billing/v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/billing/v1/costs?start_date=2022-10-12&end_date=2022-10-15");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
components:
  parameters:
    AclHost:
      description: The ACL host.
      explode: true
      in: query
      name: host
      required: false
      schema:
        type: string
      style: form
    AclOperation:
      description: The ACL operation.
      explode: true
      in: query
      name: operation
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
      style: form
    AclOperationRequired:
      description: The ACL operation.
      explode: true
      in: query
      name: operation
      required: true
      schema:
        $ref: '#/components/schemas/AclOperation'
      style: form
    AclPatternType:
      description: The ACL pattern type.
      explode: true
      in: query
      name: pattern_type
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
      style: form
    AclPatternTypeRequired:
      description: The ACL pattern type.
      explode: true
      in: query
      name: pattern_type
      required: true
      schema:
        $ref: '#/components/schemas/AclPatternType'
      style: form
    AclPermission:
      description: The ACL permission.
      explode: true
      in: query
      name: permission
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
      style: form
    AclPermissionRequired:
      description: The ACL permission.
      explode: true
      in: query
      name: permission
      required: true
      schema:
        $ref: '#/components/schemas/AclPermission'
      style: form
    AclPrincipal:
      description: The ACL principal.
      explode: true
      in: query
      name: principal
      required: false
      schema:
        type: string
      style: form
    AclResourceName:
      description: The ACL resource name.
      explode: true
      in: query
      name: resource_name
      required: false
      schema:
        type: string
      style: form
    AclResourceType:
      description: The ACL resource type.
      explode: true
      in: query
      name: resource_type
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
      style: form
    AclResourceTypeRequired:
      description: The ACL resource type.
      explode: true
      in: query
      name: resource_type
      required: true
      schema:
        $ref: '#/components/schemas/AclResourceType'
      style: form
    BrokerId:
      description: The Kafka broker ID.
      example: 1
      explode: false
      in: path
      name: broker_id
      required: true
      schema:
        type: integer
      style: simple
    ClusterId:
      description: The Kafka cluster ID.
      example: cluster-1
      explode: false
      in: path
      name: cluster_id
      required: true
      schema:
        type: string
      style: simple
    ConfigName:
      description: The configuration parameter name.
      example: compression.type
      explode: false
      in: path
      name: name
      required: true
      schema:
        type: string
      style: simple
    ConsumerGroupId:
      description: The consumer group ID.
      example: consumer-group-1
      explode: false
      in: path
      name: consumer_group_id
      required: true
      schema:
        type: string
      style: simple
    ConsumerId:
      description: The consumer ID.
      example: consumer-1
      explode: false
      in: path
      name: consumer_id
      required: true
      schema:
        type: string
      style: simple
    IncludeAuthorizedOperations:
      description: Specify if authorized operations should be included in the response.
      explode: true
      in: query
      name: include_authorized_operations
      required: false
      schema:
        type: boolean
      style: form
    PartitionId:
      description: The partition ID.
      example: 0
      explode: false
      in: path
      name: partition_id
      required: true
      schema:
        type: integer
      style: simple
    TopicName:
      description: The topic name.
      example: topic-1
      explode: false
      in: path
      name: topic_name
      required: true
      schema:
        type: string
      style: simple
    BrokerTaskType:
      description: The Kafka broker task type.
      example: remove-broker
      explode: false
      in: path
      name: task_type
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      style: simple
    ShouldShutdown:
      description: "To shutdown the broker or not, Default: true"
      example: true
      explode: true
      in: query
      name: should_shutdown
      required: false
      schema:
        type: boolean
      style: form
    ValidateOnly:
      description: "To validate the action can be performed successfully or not. Default:\
        \ false"
      example: false
      explode: true
      in: query
      name: validate_only
      required: false
      schema:
        type: boolean
      style: form
    ValidateLink:
      description: "To synchronously validate that the source cluster ID is expected\
        \ and the dest cluster has the permission to read topics in the source cluster.\
        \ Default: true"
      example: false
      explode: true
      in: query
      name: validate_link
      required: false
      schema:
        type: boolean
      style: form
    Force:
      description: "Force the action. Default: false"
      example: false
      explode: true
      in: query
      name: force
      required: false
      schema:
        type: boolean
      style: form
    LinkName:
      description: The link name
      example: link-sb1
      explode: false
      in: path
      name: link_name
      required: true
      schema:
        type: string
      style: simple
    LinkConfigName:
      description: The link config name
      example: consumer.offset.sync.enable
      explode: false
      in: path
      name: config_name
      required: true
      schema:
        type: string
      style: simple
    MirrorTopicStatus:
      description: "The status of the mirror topic. If not specified, all mirror topics\
        \ will be returned."
      example: ACTIVE
      explode: true
      in: query
      name: mirror_status
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      style: form
    MirrorTopicName:
      description: Cluster Linking mirror topic name
      example: topic-1
      explode: false
      in: path
      name: mirror_topic_name
      required: true
      schema:
        type: string
      style: simple
    QueryParamLinkName:
      description: The link name
      example: link-sb1
      explode: true
      in: query
      name: link_name
      required: true
      schema:
        type: string
      style: form
  requestBodies:
    AlterBrokerConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter broker configuration parameter batch request.
    AlterClusterConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter cluster configuration parameter batch request.
    AlterTopicConfigBatchRequest:
      content:
        application/json:
          examples:
            batch_alter_topic_configs:
              value:
                data:
                - name: cleanup.policy
                  operation: DELETE
                - name: compression.type
                  value: gzip
            validate_only_batch_alter_topic_configs:
              value:
                data:
                - name: cleanup.policy
                  operation: DELETE
                - name: compression.type
                  value: gzip
                validate_only: true
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter topic configuration parameter batch request.
    CreateAclRequest:
      content:
        application/json:
          example:
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: principalType:principalName
            host: '*'
            operation: DESCRIBE
            permission: DENY
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
      description: The ACL creation request.
    BatchCreateAclRequest:
      content:
        application/json:
          example:
            data:
            - resource_type: CLUSTER
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: principalType:principalName
              host: '*'
              operation: DESCRIBE
              permission: DENY
            - resource_type: TOPIC
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: principalType:principalName
              host: '*'
              operation: READ
              permission: ALLOW
          schema:
            $ref: '#/components/schemas/CreateAclRequestDataList'
      description: The batch ACL creation request.
    CreateTopicRequest:
      content:
        application/json:
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                - name: cleanup.policy
                  value: compact
                - name: compression.type
                  value: gzip
            dry_run_create_topic:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                validate_only: true
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
      description: The topic creation request. Note that Confluent Cloud allows only
        specific replication factor values. Because of that the replication factor
        field should either be omitted or it should use one of the allowed values
        (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).
    ProduceRequest:
      content:
        application/json:
          examples:
            binary_and_json:
              description: "If using type: \"BINARY\" or type: \"JSON\" type is required."
              value:
                partition_id: 1
                headers:
                - name: Header-1
                  value: SGVhZGVyLTE=
                - name: Header-2
                  value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: JSON
                  data:
                    foo: bar
                timestamp: 2021-02-05T19:14:42Z
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
          schema:
            $ref: '#/components/schemas/ProduceRequest'
      description: "A single record to be produced to Kafka. To produce multiple records\
        \ in the same request, simply concatenate the records. The delivery reports\
        \ are concatenated in the same order as the records are sent."
    UpdateBrokerConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The broker configuration parameter update request.
    UpdateClusterConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The cluster configuration parameter update request.
    UpdateTopicConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The topic configuration parameter update request.
    CreateLinkRequest:
      content:
        application/json:
          examples:
            destination_initiated_link:
              description: Create a destination initiated cluster link
              value:
                source_cluster_id: cluster-1
                configs:
                - name: bootstrap.servers
                  value: cluster-1-bootstrap-server
                - name: acl.sync.enable
                  value: "false"
                - name: consumer.offset.sync.ms
                  value: "30000"
            source_initiated_link_at_source_cluster:
              description: Create a source initiated cluster link at source cluster
              value:
                destination_cluster_id: cluster-2
                configs:
                - name: bootstrap.servers
                  value: cluster-2-bootstrap-server
                - name: link.mode
                  value: SOURCE
            source_initiated_link_at_destination_cluster:
              description: Create a source initiated cluster link at destination cluster
              value:
                source_cluster_id: cluster-1
                configs:
                - name: bootstrap.servers
                  value: cluster-1-bootstrap-server
                - name: link.mode
                  value: DESTINATION
                - name: connection.mode
                  value: INBOUND
                - name: acl.sync.enable
                  value: "false"
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
      description: Create a cluster link
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: "300000"
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: cleanup.policy
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      content:
        application/json:
          examples:
            generic_example:
              description: Generic example of creating a mirror topic
              value:
                source_topic_name: topic-1
                configs:
                - name: unclean.leader.election.enable
                  value: "true"
                replication_factor: 1
            example_with_mirror_topic_name:
              description: Example using optional mirror_topic_name flag
              value:
                source_topic_name: topic-1
                mirror_topic_name: link1_topic-1
                configs:
                - name: unclean.leader.election.enable
                  value: "true"
                replication_factor: 3
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
      description: Name and configs of the topics mirroring from and mirroring to.
        Note that Confluent Cloud allows only specific replication factor values.
        Because of that the replication factor field should either be omitted or it
        should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).
    AlterMirrorsRequest:
      content:
        application/json:
          example:
            mirror_topic_names:
            - topic-1
            - topic-2
            - topic-3
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
      description: Name of the topics to apply the changes
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
            - 1
            - 2
            - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      content:
        application/json:
          example:
            data:
            - broker_id: 1
              reason: The broker is to be removed.
            - broker_id: 2
              reason: The broker is to be removed.
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
      description: Alter Broker Replica Exclusions.
  responses:
    BadRequestError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "400"
              code: invalid_filter
              title: Invalid Filter
              detail: The 'delorean' resource can't be filtered by 'num_doors'
              source:
                parameter: num_doors
          schema:
            $ref: '#/components/schemas/Failure'
      description: Bad Request
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    UnauthenticatedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "401"
              code: user_unauthenticated
              title: Authentication Required
              detail: Valid authentication credentials must be provided
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request lacks valid authentication credentials for this resource.
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
        WWW-Authenticate:
          description: The unique identifier for the API request.
          example: "Basic error=\"invalid_key\", error_description=\"The API Key is\
            \ invalid\""
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Unauthorized
    OverQuotaError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "402"
              code: quota_exceeded
              title: Kafka Clusters Per Org Quota Exceeded
              detail: "The request would exceed the quota: kafka_clusters_per_environment"
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request would exceed one or more quotas.
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Over Quota
    UnauthorizedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "403"
              code: user_unauthorized
              title: User Access Unauthorized
              detail: The user 'mcfly' is not allowed to access the 'delorean' resource
                without the 'plutonium' role.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The access credentials were considered insufficient to grant access
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Forbidden
    ConflictError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "409"
              code: resource_already_exists
              title: Resource Already exists
              detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                exists.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request is in conflict with the current server state
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
        Location:
          description: Resource URI of conflicting resource
          explode: false
          schema:
            example: "https://api.confluent.cloud/{object}/{id}"
            format: uri
            type: string
          style: simple
      x-summary: Conflict
    NotFoundError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "404"
              title: Not Found
          schema:
            $ref: '#/components/schemas/Failure'
      description: Not Found
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    ValidationError:
      content:
        application/json:
          example:
            errors:
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: "The property '/cluster/storage_size' of type string did not\
                \ match the following type: integer"
              source:
                pointer: /cluster/storage_size
          schema:
            $ref: '#/components/schemas/Failure'
      description: Validation Failed
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    RateLimitError:
      description: Rate Limit Exceeded
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    DefaultSystemError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "500"
              code: out_of_gas
              title: DeLorean Out Of Gas
              detail: "The DeLorean has run out of gas, but Doc Brown will fill 'er\
                \ up for you asap"
          schema:
            $ref: '#/components/schemas/Failure'
      description: "Oops, something went wrong!"
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    connect.v1.UnauthenticatedError:
      content:
        application/json:
          example:
            error:
              code: 401
              message: Unauthorized
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Unauthorized
    connect.v1.AccountNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: account not found
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Not Found
    connect.v1.ResourceNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: resource not found
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Not Found
    connect.v1.DefaultSystemError:
      content:
        application/json:
          example:
            error:
              code: 500
              message: "Oops, something went wrong"
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Internal Server Error
    connect.v1.BadRequestError:
      content:
        application/json:
          example:
            error:
              code: 400
              message: Bad Request
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Bad Request
    connect.v1.OK:
      content:
        application/json:
          example:
            error: null
          schema:
            $ref: '#/components/schemas/deleteConnectv1Connector_200_response'
      description: OK
    CreateTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
              resource_name: crn:///kafka=cluster-1/topic=topic-X
            cluster_id: cluster-1
            topic_name: topic-X
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The created topic.
    DeleteAclsResponse:
      content:
        application/json:
          example:
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: cluster-2
              pattern_type: LITERAL
              principal: alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/deleteKafkaAcls_200_response'
      description: The list of deleted ACLs.
    GetBrokerConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
            cluster_id: cluster-1
            broker_id: 1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigData'
      description: The broker configuration parameter.
    GetBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBroker
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1
            cluster_id: cluster-1
            broker_id: 1
            host: localhost
            port: 9291
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
            partition_replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerData'
      description: The broker.
    GetClusterConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker-config=compression.type
            cluster_id: cluster-1
            config_type: BROKER
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_DEFAULT_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigData'
      description: The cluster configuration parameter.
    GetClusterResponse:
      content:
        application/json:
          example:
            kind: KafkaCluster
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
              resource_name: crn:///kafka=cluster-1
            cluster_id: cluster-1
            controller:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            acls:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
            brokers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
            broker_configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
            consumer_groups:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
            topics:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterData'
      description: The Kafka cluster.
    GetConsumerAssignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            topic_name: topic-1
            partition_id: 1
            partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
            lag:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentData'
      description: The consumer group assignment.
    GetConsumerGroupResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroup
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            is_simple: false
            partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
            state: STABLE
            coordinator:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            consumers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
            lag_summary:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupData'
      description: The consumer group.
    GetConsumerGroupLagSummaryResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupLagSummary
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            max_lag_consumer_id: consumer-1
            max_lag_instance_id: consumer-instance-1
            max_lag_client_id: client-1
            max_lag_topic_name: topic-1
            max_lag_partition_id: 1
            max_lag: 100
            total_lag: 110
            max_lag_consumer:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
            max_lag_partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
      description: The max and total consumer lag in a consumer group.
    GetConsumerLagResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLag
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            topic_name: topic-1
            partition_id: 1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            current_offset: 1
            log_end_offset: 101
            lag: 100
          schema:
            $ref: '#/components/schemas/ConsumerLagData'
      description: The consumer lag.
    GetConsumerResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumer
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            assignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
          schema:
            $ref: '#/components/schemas/ConsumerData'
      description: The consumer.
    GetPartitionResponse:
      content:
        application/json:
          example:
            kind: KafkaPartition
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            leader:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            reassignment:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
          schema:
            $ref: '#/components/schemas/PartitionData'
      description: The partition
    GetReassignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            adding_replicas:
            - 1
            - 2
            removing_replicas:
            - 3
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentData'
      description: The ongoing replicas reassignments.
    GetReplicaResponse:
      content:
        application/json:
          example:
            kind: KafkaReplica
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            broker_id: 1
            is_leader: true
            is_in_sync: true
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaData'
      description: The replica.
    GetTopicConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
              resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
            cluster_id: cluster-1
            topic_name: topic-1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_TOPIC_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_TOPIC_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigData'
      description: The topic configuration parameter.
    GetTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
              resource_name: crn:///kafka=cluster-1/topic=topic-1
            cluster_id: cluster-1
            topic_name: topic-1
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The topic.
    ListAllReassignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-2/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    ListBrokerConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              next: null
            data:
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker=1/config=max.connections
              cluster_id: cluster-1
              broker_id: 1
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
              cluster_id: cluster-1
              broker_id: 1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigDataList'
      description: The list of broker configs.
    ListBrokersResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              next: null
            data:
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1
              cluster_id: cluster-1
              broker_id: 1
              host: localhost
              port: 9291
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                resource_name: crn:///kafka=cluster-1/broker=2
              cluster_id: cluster-1
              broker_id: 2
              host: localhost
              port: 9292
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                resource_name: crn:///kafka=cluster-1/broker=3
              cluster_id: cluster-1
              broker_id: 3
              host: localhost
              port: 9293
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerDataList'
      description: The list of brokers.
    ListClusterConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              next: null
            data:
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker-config=max.connections
              cluster_id: cluster-1
              config_type: BROKER
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker-config=compression.type
              cluster_id: cluster-1
              config_type: BROKER
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigDataList'
      description: The list of cluster configs.
    ListClustersResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters
              next: null
            data:
            - kind: KafkaCluster
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                resource_name: crn:///kafka=cluster-1
              cluster_id: cluster-1
              controller:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              acls:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
              brokers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              broker_configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              consumer_groups:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              topics:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterDataList'
      description: The list of Kafka clusters.
    ListConsumerAssignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              next: null
            data:
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-1
              partition_id: 1
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-2/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=2/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-2
              partition_id: 2
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-2/partitions/2
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-3/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=3/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-3
              partition_id: 3
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-3/partitions/3
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentDataList'
      description: The list of consumer group assignments.
    ListConsumerGroupsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              next: null
            data:
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
              state: STABLE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-2
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
              state: PREPARING_REBALANCE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-3
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
              state: DEAD
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupDataList'
      description: The list of consumer groups.
    ListConsumerLagsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLagList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
              next: null
            data:
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              current_offset: 1
              log_end_offset: 101
              lag: 100
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 2
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              current_offset: 1
              log_end_offset: 11
              lag: 10
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 3
              consumer_id: consumer-3
              instance_id: consumer-instance-3
              client_id: client-3
              current_offset: 1
              log_end_offset: 1
              lag: 0
          schema:
            $ref: '#/components/schemas/ConsumerLagDataList'
      description: The list of consumer lags.
    ListConsumersResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              next: null
            data:
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
          schema:
            $ref: '#/components/schemas/ConsumerDataList'
      description: The list of consumers.
    ListPartitionsResponse:
      content:
        application/json:
          example:
            kind: KafkaPartitionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              next: null
            data:
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
          schema:
            $ref: '#/components/schemas/PartitionDataList'
      description: The list of partitions.
    ListReplicasResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 2
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 3
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    ListTopicConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              next: null
            data:
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
              cluster_id: cluster-1
              topic_name: topic-1
              name: cleanup.policy
              value: compact
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: cleanup.policy
                value: compact
                source: DYNAMIC_TOPIC_CONFIG
              - name: cleanup.policy
                value: delete
                source: DEFAULT_CONFIG
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
              cluster_id: cluster-1
              topic_name: topic-1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_TOPIC_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigDataList'
      description: The list of cluster configs.
    ListTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              next: null
            data:
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                resource_name: crn:///kafka=cluster-1/topic=topic-1
              cluster_id: cluster-1
              topic_name: topic-1
              is_internal: false
              replication_factor: 3
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                resource_name: crn:///kafka=cluster-1/topic=topic-2
              cluster_id: cluster-1
              topic_name: topic-2
              is_internal: true
              replication_factor: 4
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                resource_name: crn:///kafka=cluster-1/topic=topic-3
              cluster_id: cluster-1
              topic_name: topic-3
              is_internal: false
              replication_factor: 5
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicDataList'
      description: The list of topics.
    ProduceResponse:
      content:
        application/json:
          examples:
            produce_record_success:
              description: The record was successfully produced to the topic.
              value:
                error_code: 200
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                offset: 0
                timestamp: 2021-02-05T19:14:42Z
                key:
                  type: BINARY
                  size: 7
                value:
                  type: JSON
                  size: 15
            produce_record_bad_binary_data:
              description: Thrown when sending a BINARY value which is not a base64-encoded
                string.
              value:
                error_code: 400
                message: "Bad Request: data=1 is not a base64 string."
          schema:
            $ref: '#/components/schemas/ProduceResponse'
      description: |-
        The response containing a delivery report for a record produced to a topic. In streaming mode,
        for each record sent, a separate delivery report will be returned, in the same order,
        each with its own error_code.
    SearchAclsResponse:
      content:
        application/json:
          example:
            kind: KafkaAclList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=alice
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: cluster-2
              pattern_type: LITERAL
              principal: alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/AclDataList'
      description: The list of ACLs.
    SearchReassignmentsByTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    SearchReplicasByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/3/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/replica=1
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 3
              broker_id: 1
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 1
              broker_id: 1
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    BadRequestErrorResponse:
      content:
        application/json:
          examples:
            bad_request_cannot_deserialize:
              description: Thrown when trying to deserialize an integer from non-integer
                data.
              value:
                error_code: 400
                message: "Cannot deserialize value of type `java.lang.Integer` from\
                  \ String \"A\": not a valid `java.lang.Integer` value"
            unsupported_version_exception:
              description: Thrown when the version of this API is not supported in
                the underlying Kafka cluster.
              value:
                error_code: 40035
                message: The version of this API is not supported in the underlying
                  Kafka cluster.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_CreateAcls:
      content:
        application/json:
          examples:
            create_acls_cluster_name_invalid:
              description: Thrown when creating an ACL for a CLUSTER resource specifying
                the wrong resource name.
              value:
                error_code: 40002
                message: The only valid name for the CLUSTER resource is kafka-cluster"
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_CreateTopic:
      content:
        application/json:
          examples:
            create_topic_already_exists:
              description: Thrown when trying to create a topic with a name already
                used by an existing topic.
              value:
                error_code: 40002
                message: Topic 'my-topic' already exists.
            create_topic_replication_factor_too_large:
              description: Thrown when trying to create a topic with a replication
                factor larger than the number of brokers.
              value:
                error_code: 40002
                message: "Replication factor: 2 larger than available brokers: 1."
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_DeleteAcls:
      content:
        application/json:
          examples:
            delete_acls_unspecified_resource_type:
              description: Thrown when trying to delete ACLs without specifying a
                valid resource type.
              value:
                error_code: 400
                message: resource_type cannot be unspecified or UNKNOWN
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    UnprocessableEntity_ProduceRecord:
      content:
        application/json:
          examples:
            produce_record_empty_request_body:
              description: Thrown when the request body is empty.
              value:
                error_code: 422
                message: Payload error. Request body is empty. Data is required.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_UpdatePartitionCountTopic:
      content:
        application/json:
          examples:
            topic_update_partitions_invalid:
              description: Thrown when trying to update the number of partitions incorrectly.
              value:
                error_code: 40002
                message: Topic already has 1 partitions.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    UnauthorizedErrorResponse:
      content:
        application/json:
          examples:
            kafka_authentication_failed:
              description: Thrown when using Basic authentication with wrong Kafka
                credentials.
              value:
                error_code: 40101
                message: Authentication failed
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a client authentication error. Kafka authentication failures
        will contain error code 40101 in the response body.
    ForbiddenErrorResponse:
      content:
        application/json:
          examples:
            kafka_authorization_failed:
              description: Thrown when the caller is not authorized to perform the
                underlying operation.
              value:
                error_code: 40301
                message: Request is not authorized
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a client authorization error. Kafka authorization failures
        will contain error code 40301 in the response body.
    NotFoundErrorResponse:
      content:
        application/json:
          examples:
            endpoint_not_found:
              description: Thrown for generic HTTP 404 errors.
              value:
                error_code: 404
                message: HTTP 404 Not Found
            cluster_not_found:
              description: Thrown when using a non-existing cluster ID.
              value:
                error_code: 404
                message: Cluster my-cluster cannot be found.
            unknown_topic_or_partition:
              description: Thrown when using a non-existing topic name or partition
                ID.
              value:
                error_code: 40403
                message: This server does not host this topic-partition.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates attempted access to an unreachable or non-existing resource
        like e.g. an unknown topic or partition. GET requests to endpoints not allowed
        in the accesslists will also result in this response.
    TooManyRequestsErrorResponse:
      content:
        text/html:
          example: "{\"description\":\"A sample response from Jetty's DoSFilter.\"\
            ,\"value\":\"<html> <head> <meta http-equiv=\\\"Content-Type\\\" content=\\\
            \"text/html;charset=utf-8\\\"/> <title>Error 429 Too Many Requests</title>\
            \ </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table> <tr>\
            \ <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th>\
            \ <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td>\
            \ </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body>\
            \ </html>\"}"
          schema:
            type: string
      description: "Indicates that a rate limit threshold has been reached, and the\
        \ client should retry again later."
    ServerErrorResponse:
      content:
        application/json:
          examples:
            generic_internal_server_error:
              description: Thrown for generic HTTP 500 errors.
              value:
                error_code: 500
                message: Internal Server Error
          schema:
            $ref: '#/components/schemas/Error'
      description: A server-side problem that might not be addressable from the client
        side. Retriable Kafka errors will contain error code 50003 in the response
        body.
    ListReplicaStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaStatusList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic_1/partitions/0/replica-status
              resource_name: null
            data:
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/1/replica-status
              cluster_id: cluster-1
              topic_name: topic-1
              broker_id: 1
              partition_id: 0
              is_leader: true
              is_observer: false
              is_isr_eligible: true
              is_in_isr: true
              is_caught_up: true
              log_start_offset: 0
              log_end_offset: 0
              last_caught_up_time_ms: 100
              last_fetch_time_ms: 200
              link_name: test-link
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/2/replica-status
              cluster_id: cluster-1
              topic_name: topic-1
              broker_id: 2
              partition_id: 0
              is_leader: false
              is_observer: false
              is_isr_eligible: true
              is_in_isr: true
              is_caught_up: true
              log_start_offset: 0
              log_end_offset: 0
              last_caught_up_time_ms: 100
              last_fetch_time_ms: 200
              link_name: test-link
          schema:
            $ref: '#/components/schemas/ReplicaStatusDataList'
      description: The list of Replica Statuses.
    GetAnyUnevenLoadResponse:
      content:
        application/json:
          example:
            kind: KafkaAnyUnevenLoad
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/any-uneven-load
              resource_name: crn:///kafka=cluster-1/any-uneven-load
            cluster_id: cluster-1
            status: BALANCING
            previous_status: BALANCING_FAILED
            status_updated_at: 2019-10-12T07:20:50Z
            previous_status_updated_at: 2019-10-12T07:20:35Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation.
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/AnyUnevenLoadData'
      description: The AnyUnevenLoad status
    GetBalancerStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaBalancerStatus
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/balancer
              resource_name: crn:///kafka=cluster-1/balancer
            cluster_id: cluster-1
            status: ERROR
            error_code: 10014
            error_message: The Confluent Balancer failed to start as JBOD is enabled
              for the cluster.
            any_uneven_load:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/even-cluster-load
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/BalancerStatusData'
      description: The balancer status
    GetBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemoval
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1/
            cluster_id: cluster-1
            broker_id: 1
            broker_task:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalData'
      description: The single broker removal response
    ListBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemovalList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers:delete
              next: null
            data:
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalDataList'
      description: The multiple broker removal response
    GetBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
              resource_name: crn:///kafka=cluster-1/broker=1/task=1
            cluster_id: cluster-1
            broker_id: 1
            task_type: add-broker
            task_status: FAILED
            sub_task_statuses:
              partition_reassignment_status: ERROR
            created_at: 2019-10-12T07:20:50Z
            updated_at: 2019-10-12T07:20:55Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskData'
      description: The broker task
    ListBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: SUCCESS
              sub_task_statuses:
                partition_reassignment_status: COMPLETED
              created_at: 2019-10-12T10:20:40Z
              updated_at: 2019-10-12T10:20:45Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=remove-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: true
              sub_task_statuses:
                broker_replica_exclusion_status: COMPLETED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: "Error while computing the initial remove broker plan\
                \ for brokers [2] prior to shutdown."
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=remove-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: false
              sub_task_statuses:
                broker_replica_exclusion_status: EXCLUDED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: "Error while computing the initial remove broker plan\
                \ for brokers [1] prior to shutdown."
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByTaskTypeResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=add-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: add-broker
              task_status: FAILED
              sub_task_statuses:
                partition_reassignment_status: ERROR
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: "Error while computing the initial add broker plan for\
                \ brokers [2]"
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionDataList'
      description: The list of broker replica exclusions.
    GetBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusion
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
              next: null
            cluster_id: cluster-1
            broker_id: 1
            reason: Broker is to be removed.
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
      description: A Broker Replica Exclusion.
    ListCreateBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionErrorResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: 404
              error_message: No replica exclusion for broker 1 was present.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    GetRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
              resource_name: crn:///kafka=cluster-1/remove-broker-task=1
            cluster_id: cluster-1
            broker_id: 1
            shutdown_scheduled: false
            broker_replica_exclusion_status: COMPLETED
            partition_reassignment_status: FAILED
            broker_shutdown_status: CANCELED
            error_code: 10006
            error_message: "Error while computing the initial remove broker plan for\
              \ brokers [1] prior to shutdown."
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
      description: The remove broker task.
    ListRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks
              next: null
            data:
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
                resource_name: crn:///kafka=cluster-1/remove-broker-task=1
              cluster_id: cluster-1
              broker_id: 1
              shutdown_scheduled: true
              broker_replica_exclusion_status: COMPLETED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: "Error while computing the initial remove broker plan\
                \ for brokers [1] prior to shutdown."
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/2
                resource_name: crn:///kafka=cluster-1/remove-broker-task=2
              cluster_id: cluster-1
              broker_id: 2
              shutdown_scheduled: true
              broker_replica_exclusion_status: EXCLUDED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: "Error while computing the initial remove broker plan\
                \ for brokers [2] prior to shutdown."
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskDataList'
      description: The list of remove broker tasks.
    NoContentResponse:
      description: "Operation succeeded, no content in the response"
    ListLinksResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
              next: null
            data:
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                resource_name: null
              source_cluster_id: src-cluster-id
              destination_cluster_id: null
              link_name: my-new-link-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              cluster_link_id: eEBkTffYSESld6EO898x3w
              topic_names:
              - topic-sb-1
              - topic-sb-2
              link_state: ACTIVE
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                resource_name: null
              source_cluster_id: src-cluster-id
              destination_cluster_id: null
              link_name: my-new-link-2
              link_id: f749116e-f847-4bd2-b1f6-5c4e518a0678
              cluster_link_id: 90kRbvhHS9Kx9lxOUYoGeA
              topic_names:
              - topic-db-1
              - topic-db-2
              link_state: UNAVAILABLE
              link_error: AUTHENTICATION_ERROR
              link_error_message: Please check your api key and secret
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-3
                resource_name: null
              source_cluster_id: null
              destination_cluster_id: dest-cluster-id
              link_name: my-new-link-3
              link_id: 9cd1711e-a4ef-4390-a35e-dfd758d97a82
              cluster_link_id: nNFxHqTvQ5CjXt_XWNl6gg
              topic_names: null
              link_state: ACTIVE
          schema:
            $ref: '#/components/schemas/ListLinksResponseDataList'
      description: A list of link names and properties
    GetLinkResponse:
      content:
        application/json:
          examples:
            link_at_destination_cluster:
              description: Link at destination cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                resource_name: null
                source_cluster_id: src-cluster-id
                destination_cluster_id: null
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names:
                - topic-db-1
                - topic-db-2
            link_at_source_cluster:
              description: Link at source cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                resource_name: null
                source_cluster_id: null
                destination_cluster_id: dst-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names: null
          schema:
            $ref: '#/components/schemas/ListLinksResponseData'
      description: Single link name and properties
    ListLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
              next: null
            data:
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: consumer.offset.sync.ms
              value: "3825940"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - cosm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: acl.sync.ms
              value: "5000"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - asm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
      description: Config name and value
    GetLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
              resource_name: null
            cluster_id: 1Rh_4htxSuen7RYGvGmgNw
            name: consumer.offset.sync.ms
            value: "3825940"
            default: false
            read_only: false
            sensitive: false
            source: DYNAMIC_CLUSTER_LINK_CONFIG
            synonyms:
            - cosm
            link_name: link-db-1
            link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            topics:
            - topic-db-1
            - topic-db-2
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
      description: Config name and value
    ListMirrorTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
              next: null
            data:
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-1
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-1
              source_topic_name: topic-1
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_status: ACTIVE
              state_time_ms: 1612550939300
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-2
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              source_topic_name: topic-2
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_status: STOPPED
              state_time_ms: 1612551353640
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
      description: Metadata of mirror topics
    DescribeMirrorTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
              resource_name: crn:///kafka=cluster-1
            link_name: link-sb-1
            mirror_topic_name: topic-1
            source_topic_name: topic-1
            num_partitions: 3
            mirror_lags:
            - partition: 0
              lag: 0
              last_source_fetch_offset: 0
            - partition: 1
              lag: 10000
              last_source_fetch_offset: 1000
            - partition: 2
              lag: 40000
              last_source_fetch_offset: 12030
            mirror_status: ACTIVE
            state_time_ms: 1612550939300
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
      description: Metadata of the mirror topic
    AlterMirrorStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaPromoteMirror
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
            data:
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-sb
              error_code: null
              error_message: null
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              error_code: 400
              error_message: Topic 'topic-2' has already stopped its mirror from 'my-new-link-1'
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
          schema:
            $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
      description: Mirror status alternation result
    BadBrokerOrBalancerRequestErrorResponse:
      content:
        application/json:
          examples:
            IllegalBrokerRemoval:
              value:
                error_code: 400
                message: "Cannot remove broker 1 as there are partitions with replication\
                  \ factor equal to 1 on the broker. One such partition: test_topic_partition_0."
            BalancerOffline:
              value:
                error_code: 400
                message: The Confluent Balancer component is disabled or not started
                  yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad broker or balancer request
    BalancerOfflineErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Balancer offline
    BrokerNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: "Broker not found. Broker: 1 not found in the cluster: cluster-1"
          schema:
            $ref: '#/components/schemas/Error'
      description: Broker not found.
    UnrepresentableBrokerErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The given broker id -10 is invalid
          schema:
            $ref: '#/components/schemas/Error'
      description: Unrepresentable broker id.
    BalancerNotEnabledErrorResponse:
      content:
        application/json:
          example:
            error_code: 500
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Confluent Balancer disabled or not started.
    ClusterAuthorizationErrorResponse:
      content:
        application/json:
          example:
            error_code: 401
            message: "Not authorized: the authenticated user didn't have the right\
              \ access to the resource."
          schema:
            $ref: '#/components/schemas/Error'
      description: Operation not authorized.
    ClusterLinkNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: The cluster link doesn't exist.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidClusterLinkErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Cluster Link Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidConfigNameErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Config Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid Config Name.
    ClusterLinkExistsErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: A cluster link already exists with the provided link name
          schema:
            $ref: '#/components/schemas/Error'
      description: A cluster link already exists with the provided link name
    TimeoutErrorResponse:
      content:
        application/json:
          example:
            error_code: 408
            message: "The server received the request, but the operation timed out"
          schema:
            $ref: '#/components/schemas/Error'
      description: "The server received the request, but the operation timed out"
    schemaregistry.v1.BadRequestError:
      content:
        application/json:
          example:
            error:
              code: 400
              message: Bad Request
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Bad Request
    schemaregistry.v1.UnauthorizedError:
      content:
        application/json:
          example:
            error:
              code: 401
              message: Unauthorized
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Unauthorized
    schemaregistry.v1.ForbiddenError:
      content:
        application/json:
          example:
            error:
              code: 403
              message: Forbidden
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Forbidden
    schemaregistry.v1.AccountNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: account not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.ResourceNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: resource not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.DefaultSystemError:
      content:
        application/json:
          example:
            error:
              code: 500
              message: "Oops, something went wrong"
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Internal Server Error
  schemas:
    iam.v2.ApiKey:
      description: |-
        `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
        of API keys represent access to a single cluster/resource such as a Kafka cluster,
        Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
        that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

        The API allows you to list, create, update and delete your API Keys.


        Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

        ## The API Keys Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ApiKey
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ApiKey_metadata'
        spec:
          $ref: '#/components/schemas/iam.v2.ApiKeySpec'
      type: object
    SearchFilter:
      description: Filter a collection by a string search
      type: string
    iam.v2.ApiKeyList:
      description: |-
        `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
        of API keys represent access to a single cluster/resource such as a Kafka cluster,
        Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
        that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

        The API allows you to list, create, update and delete your API Keys.


        Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

        ## The API Keys Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ApiKeyList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ApiKeyList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_ApiKeyList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.ApiKeySpec:
      description: The desired state of the Api Key
      properties:
        secret:
          description: "The API key secret. Only provided in `create` responses, not\
            \ in `get` or `list`."
          example: R15hoiDIq8Nxu/lY4mPO3DwAVIfU5W7OI+efsB607mLgHTnVW5XJGVqX2ysDx987
          readOnly: true
          type: string
          x-redact: true
          x-immutable: true
        display_name:
          description: A human readable name for the API key
          example: CI kafka access key
          type: string
        description:
          description: A human readable description for the API key
          example: This API key provides kafka access to cluster x
          type: string
        owner:
          $ref: '#/components/schemas/iam_v2_ApiKeySpec_owner'
        resource:
          $ref: '#/components/schemas/iam_v2_ApiKeySpec_resource'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    ObjectMeta:
      description: "ObjectMeta is metadata that all persisted resources must have,\
        \ which includes all objects users must create."
      properties:
        self:
          description: "Self is a Uniform Resource Locator (URL) at which an object\
            \ can be addressed. This URL encodes the service location, API version,\
            \ and other particulars necessary to locate the resource at a point in\
            \ time"
          example: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
          format: uri
          readOnly: true
          type: string
        resource_name:
          description: Resource Name is a Uniform Resource Identifier (URI) that is
            globally unique across space and time. It is represented as a Confluent
            Resource Name
          example: crn://confluent.cloud/kafka=lkc-f3a90de
          format: uri
          readOnly: true
          type: string
        created_at:
          description: The date and time at which this object was created. It is represented
            in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this object was last updated. It
            is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        deleted_at:
          description: The date and time at which this object was (or will be) deleted.
            It is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
      - self
    ListMeta:
      description: ListMeta describes metadata that resource collections may have
      example:
        next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
        last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
        prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
        total_size: 123
        first: https://api.confluent.cloud/v2/resourcekinds
      properties:
        first:
          description: "A link to the first page of results. If a response does not\
            \ contain a first link, then direct navigation to the first page is not\
            \ supported."
          example: https://api.confluent.cloud/v2/resourcekinds
          format: uri
          nullable: true
          type: string
        last:
          description: "A link to the last page of results. If a response does not\
            \ contain a last link, then direct navigation to the last page is not\
            \ supported."
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          format: uri
          nullable: true
          type: string
        prev:
          description: "A link to the previous page of results. If a response does\
            \ not contain a prev link, then either there is no previous data or backwards\
            \ traversal through the result set is not supported."
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          format: uri
          nullable: true
          type: string
        next:
          description: "A link to the next page of results. If a response does not\
            \ contain a next link, then there is no more data available."
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          format: uri
          nullable: true
          type: string
        total_size:
          description: Number of records in the full result set. This response may
            be paginated and have a smaller number of records.
          example: 123
          format: int32
          minimum: 0
          type: integer
      type: object
    ObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          maxLength: 255
          minLength: 1
          type: string
        environment:
          description: "Environment of the referred resource, if env-scoped"
          maxLength: 255
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: uri
          minLength: 1
          readOnly: true
          type: string
        api_version:
          description: API group and version of the referred resource
          minLength: 1
          readOnly: true
          type: string
        kind:
          description: Kind of the referred resource
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    TypedGlobalObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          maxLength: 255
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: uri
          minLength: 1
          readOnly: true
          type: string
        api_version:
          description: API group and version of the referred resource
          minLength: 1
          readOnly: true
          type: string
        kind:
          description: Kind of the referred resource
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    TypedEnvScopedObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          maxLength: 255
          minLength: 1
          type: string
        environment:
          description: "Environment of the referred resource, if env-scoped"
          maxLength: 255
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: uri
          minLength: 1
          readOnly: true
          type: string
        api_version:
          description: API group and version of the referred resource
          minLength: 1
          readOnly: true
          type: string
        kind:
          description: Kind of the referred resource
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    Failure:
      description: Provides information about problems encountered while performing
        an operation.
      properties:
        errors:
          description: List of errors which caused this operation to fail
          items:
            $ref: '#/components/schemas/Error'
          type: array
          uniqueItems: true
      required:
      - errors
      type: object
    Error:
      additionalProperties: false
      description: Describes a particular error encountered while performing an operation.
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          maxLength: 255
          type: string
        status:
          description: "The HTTP status code applicable to this problem, expressed\
            \ as a string value."
          type: string
        code:
          description: "An application-specific error code, expressed as a string\
            \ value."
          type: string
        title:
          description: "A short, human-readable summary of the problem. It **SHOULD\
            \ NOT** change from occurrence to occurrence of the problem, except for\
            \ purposes of localization."
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        source:
          $ref: '#/components/schemas/Error_source'
        error_code:
          format: int32
          type: integer
        message:
          nullable: true
          type: string
      type: object
    org.v2.Environment:
      description: |-
        `Environment` objects represent an isolated namespace for your Confluent resources
        for organizational purposes.

        The API allows you to create, delete, and update your environments. You can retrieve
        individual environments as well as a list of all your environments.


        Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

        ## The Environments Model
        <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `environments_per_org` | Environments in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - org/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Environment
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/org_v2_Environment_metadata'
        display_name:
          description: A human-readable name for the Environment
          example: prod-finance01
          type: string
      type: object
    org.v2.Organization:
      description: |-
        `Organization` objects represent a customer organization. An organization contains all customer
        resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
        agreement (including any annual commitment or support plan).

        The API allows you to list, view, and update your organizations.


        Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

        ## The Organizations Model
        <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - org/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Organization
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/org_v2_Organization_metadata'
        display_name:
          description: A human-readable name for the Organization
          example: Finance Org
          pattern: "^[^<>#%'*^`{|}~\\\"]{1,31}$"
          type: string
      type: object
    org.v2.EnvironmentList:
      description: |-
        `Environment` objects represent an isolated namespace for your Confluent resources
        for organizational purposes.

        The API allows you to create, delete, and update your environments. You can retrieve
        individual environments as well as a list of all your environments.


        Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

        ## The Environments Model
        <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `environments_per_org` | Environments in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - org/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - EnvironmentList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/org_v2_EnvironmentList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/org_v2_EnvironmentList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    org.v2.OrganizationList:
      description: |-
        `Organization` objects represent a customer organization. An organization contains all customer
        resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
        agreement (including any annual commitment or support plan).

        The API allows you to list, view, and update your organizations.


        Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

        ## The Organizations Model
        <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - org/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - OrganizationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/org_v2_OrganizationList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/org_v2_OrganizationList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.User:
      description: |-
        `User` objects represent individuals who may access your Confluent resources.

        The API allows you to retrieve, update, and delete individual users, as well as list of all your
        users. This API cannot be used to create new user accounts.


        Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

        ## The Users Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `users_per_org` | Users in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - User
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_User_metadata'
        email:
          description: The user's email address
          example: marty.mcfly@example.com
          format: email
          type: string
          x-immutable: true
        full_name:
          description: The user's full name
          example: Marty McFly
          type: string
        auth_type:
          description: The user's authentication method
          example: AUTH_TYPE_SSO
          readOnly: true
          type: string
          x-extensible-enum:
          - AUTH_TYPE_LOCAL
          - AUTH_TYPE_SSO
      type: object
    iam.v2.ServiceAccount:
      description: |-
        `ServiceAccount` objects are typically used to represent applications and other non-human principals
        that may access your Confluent resources.

        The API allows you to create, retrieve, update, and delete individual service accounts, as well as
        list all your service accounts.


        Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

        ## The Service Accounts Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ServiceAccount
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ServiceAccount_metadata'
        display_name:
          description: A human-readable name for the Service Account
          example: DeLorean_auto_repair
          type: string
          x-immutable: true
        description:
          description: A free-form description of the Service Account
          example: Doc's repair bot for the DeLorean
          type: string
      type: object
    iam.v2.Invitation:
      description: |-
        `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

        The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


        Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

        ## The Invitations Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `invitations_per_org` | Invitations in a Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Invitation
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_Invitation_metadata'
        email:
          description: The user/invitee's email address
          example: johndoe@confluent.io
          format: email
          type: string
          x-immutable: true
        auth_type:
          description: |
            The user/invitee's authentication type. Note that only the [OrganizationAdmin role](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin)
            can invite AUTH_TYPE_LOCAL users to SSO organizations.
            The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled.
            Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.
          example: AUTH_TYPE_SSO
          type: string
          x-extensible-enum:
          - AUTH_TYPE_LOCAL
          - AUTH_TYPE_SSO
        status:
          description: The status of invitations
          example: INVITE_STATUS_SENT
          readOnly: true
          type: string
          x-extensible-enum:
          - INVITE_STATUS_SENT
          - INVITE_STATUS_STAGED
          - INVITE_STATUS_ACCEPTED
          - INVITE_STATUS_EXPIRED
          - INVITE_STATUS_DEACTIVATED
        accepted_at:
          description: The timestamp that the invitation was accepted
          example: 2022-07-06T17:21:33Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        expires_at:
          description: The timestamp that the invitation will expire
          example: 2022-07-07T17:22:39Z
          format: date-time
          readOnly: true
          type: string
        user:
          $ref: '#/components/schemas/iam_v2_Invitation_user'
        creator:
          $ref: '#/components/schemas/iam_v2_Invitation_creator'
      type: object
    iam.v2.UserList:
      description: |-
        `User` objects represent individuals who may access your Confluent resources.

        The API allows you to retrieve, update, and delete individual users, as well as list of all your
        users. This API cannot be used to create new user accounts.


        Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

        ## The Users Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `users_per_org` | Users in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - UserList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_UserList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_UserList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.ServiceAccountList:
      description: |-
        `ServiceAccount` objects are typically used to represent applications and other non-human principals
        that may access your Confluent resources.

        The API allows you to create, retrieve, update, and delete individual service accounts, as well as
        list all your service accounts.


        Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

        ## The Service Accounts Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ServiceAccountList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ServiceAccountList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_ServiceAccountList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.InvitationList:
      description: |-
        `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

        The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


        Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

        ## The Invitations Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `invitations_per_org` | Invitations in a Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - InvitationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_InvitationList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_InvitationList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    GlobalObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          maxLength: 255
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: uri
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    iam.v2.RoleBinding:
      description: |-
        A role binding grants a Principal a role on resources that match a pattern.

        The API allows you to perform create, delete, and list operations on role bindings.


        Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

        ## The Role Bindings Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - RoleBinding
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_RoleBinding_metadata'
        principal:
          description: The principal User or Group to bind the role to
          example: User:u-111aaa
          pattern: (^User:.+$)|(^Group:.+$)
          type: string
        role_name:
          description: The name of the role to bind to the principal
          example: CloudClusterAdmin
          type: string
        crn_pattern:
          description: A CRN that specifies the scope and resource patterns necessary
            for the role to bind
          example: crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa
          format: uri
          pattern: ^crn://.+$
          type: string
      type: object
    iam.v2.RoleBindingList:
      description: |-
        A role binding grants a Principal a role on resources that match a pattern.

        The API allows you to perform create, delete, and list operations on role bindings.


        Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

        ## The Role Bindings Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - RoleBindingList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_RoleBindingList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_RoleBindingList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    notifications.v1.Subscription:
      description: |-
        `Subscription` objects represent the intent of the customers to get notifications of particular types.
        A subscription is created for a particular `NotificationType` and the user will get notifications on the
        `Integrations` that are provided while creating the subscription.

        This API allows you to create, retrieve, and update subscriptions,
        as well as to view the list of all your subscriptions. You can also delete subscriptions
        with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Subscriptions Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Subscription
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_Subscription_metadata'
        current_state:
          description: |
            Denotes the state of the subscription. When the subscription is ENABLED, the user will receive
            notification on the configured Integrations. If the subscription is DISABLED, the user will not
            recieve any notification for the configured notification type. Note that, you cannot disable
            a subscription for `REQUIRED` notification type.
          example: ENABLED
          type: string
          x-extensible-enum:
          - ENABLED
          - DISABLED
        notification_type:
          $ref: '#/components/schemas/notifications_v1_Subscription_notification_type'
        integrations:
          description: Integrations to which notifications are to be sent.
          items:
            $ref: '#/components/schemas/GlobalObjectReference'
          minItems: 1
          type: array
      type: object
    notifications.v1.Integration:
      description: |-
        You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
        a subscription. Please note that you can only perform create, update and delete operations for integrations
        of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
        and `UserEmail`.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Integrations Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Integration
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_Integration_metadata'
        display_name:
          description: |
            A human readable name for the particular integration
          example: Slack integration
          maxLength: 64
          type: string
        description:
          description: |
            A human readable description for the particular integration
          example: A Slack channel integration
          maxLength: 128
          type: string
        target:
          $ref: '#/components/schemas/notifications_v1_Integration_target'
      type: object
    notifications.v1.NotificationType:
      description: |-
        The type of notifications (and their corresponding metadata) supported by Confluent.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Notification Types Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NotificationType
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_NotificationType_metadata'
        display_name:
          description: |
            Human readable display name of the notification type
          example: Cluster Shrink
          type: string
        category:
          description: |
            Represents the group with which the notification is associated.
            Notifications are grouped under certain categories for better organization.
            - BILLING_LICENSING: All billing, payments or licensing related notifications are grouped here.
            - SECURITY: All Confluent Cloud and Platform security related notifications are grouped here.
            - SERVICE: All Confluent services (eg. Kafka, Schema Registry, Connect etc.) related notifications are
              grouped here.
            - ACCOUNT: All Confluent account related notifications are grouped here.
            For example: Billing, payment or license related notifications are grouped in BILLING_LICENSING category.
          example: BILLING_LICENSING
          type: string
          x-extensible-enum:
          - BILLING_LICENSING
          - SECURITY
          - SERVICE
          - ACCOUNT
        description:
          description: |
            Human readable description of the notification type
          example: Cluster shrink operation is completed
          type: string
        subscription_priority:
          description: |
            Indicates whether the notification is auto-subscribed and if the user can opt-out.
            - REQUIRED: the user is auto-subscribed to this notification and can't opt-out.
            - RECOMMENDED: the user is auto-subscribed to this notification and can opt-out.
            - OPTIONAL: the user is not auto-subscribed to this notification but can explicitly subscribe to it.
          example: REQUIRED
          type: string
          x-extensible-enum:
          - REQUIRED
          - RECOMMENDED
          - OPTIONAL
        is_included_in_plan:
          description: |
            Whether this notification is available to subscribe or not
            as per the user's current billing plan.
          type: boolean
        severity:
          description: |
            Severity indicates the impact of this notification.
            - CRITICAL: a high impact notification which needs immediate attention.
            - WARN: a warning notification which can be addressed now or later.
            - INFO: an informational notification.
          example: INFO
          type: string
          x-extensible-enum:
          - CRITICAL
          - WARN
          - INFO
      type: object
    notifications.v1.SlackTarget:
      description: Target required for Slack integration
      properties:
        kind:
          description: Integration Type
          enum:
          - Slack
          example: Slack
          type: string
        webhook_url:
          description: Slack Webhook URL for the particular Slack channel
          example: "https://hooks.slack.com/services/{id}/{id}/{id}"
          format: uri
          type: string
      required:
      - kind
      - webhook_url
      type: object
    notifications.v1.RoleEmailTarget:
      description: Email integration target to send email to all user with specified
        role
      properties:
        kind:
          description: Email Integration type for Role
          enum:
          - RoleEmail
          example: RoleEmail
          type: string
        role_name:
          description: name of the role
          example: OrganizationAdmin
          type: string
      required:
      - kind
      - role_name
      type: object
    notifications.v1.UserEmailTarget:
      description: Email integration target to send email to a particular user
      properties:
        kind:
          description: Email Integration type for User
          enum:
          - UserEmail
          example: UserEmail
          type: string
        user:
          description: ID of the user
          example: u-temp1
          type: string
      required:
      - kind
      - user
      type: object
    notifications.v1.WebhookTarget:
      description: Target required for webhook integration
      properties:
        kind:
          description: Integration Type
          enum:
          - Webhook
          example: Webhook
          type: string
        url:
          description: URL endpoint for the webhook
          example: "https://my.webhook.url/{id}"
          format: uri
          type: string
      required:
      - kind
      - url
      type: object
    notifications.v1.MsTeamsTarget:
      description: Target required for MS Teams integration
      properties:
        kind:
          description: Integration Type
          enum:
          - MsTeams
          example: MsTeams
          type: string
        webhook_url:
          description: MS Teams Webhook URL for the particular team channel
          example: "https://admin.webhook.office.com/webhookb2/{id}/IncomingWebhook/{id}"
          format: uri
          type: string
      required:
      - kind
      - webhook_url
      type: object
    notifications.v1.Target:
      description: Target for the particular integration
      discriminator:
        mapping:
          Slack: '#/components/schemas/notifications.v1.SlackTarget'
          RoleEmail: '#/components/schemas/notifications.v1.RoleEmailTarget'
          UserEmail: '#/components/schemas/notifications.v1.UserEmailTarget'
          Webhook: '#/components/schemas/notifications.v1.WebhookTarget'
          MsTeams: '#/components/schemas/notifications.v1.MsTeamsTarget'
        propertyName: kind
      example:
        kind: Slack
        webhook_url: "https://hooks.slack.com/services/{id}/{id}/{id}"
      oneOf:
      - $ref: '#/components/schemas/notifications.v1.SlackTarget'
      - $ref: '#/components/schemas/notifications.v1.RoleEmailTarget'
      - $ref: '#/components/schemas/notifications.v1.UserEmailTarget'
      - $ref: '#/components/schemas/notifications.v1.WebhookTarget'
      - $ref: '#/components/schemas/notifications.v1.MsTeamsTarget'
    notifications.v1.SubscriptionList:
      description: |-
        `Subscription` objects represent the intent of the customers to get notifications of particular types.
        A subscription is created for a particular `NotificationType` and the user will get notifications on the
        `Integrations` that are provided while creating the subscription.

        This API allows you to create, retrieve, and update subscriptions,
        as well as to view the list of all your subscriptions. You can also delete subscriptions
        with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Subscriptions Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - SubscriptionList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_SubscriptionList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/notifications_v1_SubscriptionList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    notifications.v1.IntegrationList:
      description: |-
        You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
        a subscription. Please note that you can only perform create, update and delete operations for integrations
        of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
        and `UserEmail`.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Integrations Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IntegrationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_IntegrationList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/notifications_v1_IntegrationList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    notifications.v1.NotificationTypeList:
      description: |-
        The type of notifications (and their corresponding metadata) supported by Confluent.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Notification Types Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NotificationTypeList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_NotificationTypeList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/notifications_v1_NotificationTypeList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    cmk.v2.Cluster:
      description: |-
        `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Kafka clusters.


        Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - cmk/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cluster
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/cmk_v2_Cluster_metadata'
        spec:
          $ref: '#/components/schemas/cmk.v2.ClusterSpec'
        status:
          $ref: '#/components/schemas/cmk.v2.ClusterStatus'
      type: object
    cmk.v2.ClusterStatus:
      description: The status of the Cluster
      properties:
        phase:
          description: |
            The lifecyle phase of the cluster:
              PROVISIONED:  cluster is provisioned;
              PROVISIONING:  cluster provisioning is in progress;
              FAILED:  provisioning failed
          example: PROVISIONED
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PROVISIONED
          - FAILED
        cku:
          allOf:
          - $ref: '#/components/schemas/cmk.v2.Cku'
          description: |
            The number of Confluent Kafka Units (CKUs) the Dedicated cluster currently has.
          readOnly: true
      readOnly: true
      required:
      - phase
      type: object
    cmk.v2.Cku:
      example: 2
      minimum: 1
      type: integer
    cmk.v2.Basic:
      description: |
        The basic cluster type.
      properties:
        kind:
          description: |
            Basic cluster type.
          enum:
          - Basic
          type: string
      required:
      - kind
      type: object
    cmk.v2.Standard:
      description: |
        The standard cluster type.
      properties:
        kind:
          description: |
            Standard cluster type.
          enum:
          - Standard
          type: string
      required:
      - kind
      type: object
    cmk.v2.Dedicated:
      description: |
        A dedicated cluster with its parameters.
      properties:
        kind:
          description: |
            Dedicated cluster type.
          enum:
          - Dedicated
          type: string
        cku:
          allOf:
          - $ref: '#/components/schemas/cmk.v2.Cku'
          description: |
            The number of Confluent Kafka Units (CKUs) for Dedicated cluster types.
            MULTI_ZONE dedicated clusters must have at least two CKUs.
        encryption_key:
          deprecated: true
          description: |
            The id of the encryption key that is used to encrypt the data in the Kafka cluster.
            (e.g. for Amazon Web Services, the Amazon Resource Name of the key).
          example: arn:aws:kms:us-west-2:000000000000:key/0000xxxx-00xx-00xx-00xx-0000000000xx
          type: string
          x-immutable: true
        zones:
          description: |
            The list of zones the cluster is in.

            On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html)
             (e.g. use1-az3)

            On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones)
             (e.g. us-central1-c).
          example:
          - us-central1-a
          - us-central1-b
          - us-central1-c
          items:
            type: string
          maxItems: 3
          minItems: 1
          readOnly: true
          type: array
          uniqueItems: true
          x-immutable: true
      required:
      - cku
      - kind
      type: object
    MultipleSearchFilter:
      description: Filter a collection by a string search for one or more values
      items:
        type: string
      type: array
    cmk.v2.ClusterList:
      description: |-
        `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Kafka clusters.


        Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - cmk/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClusterList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/cmk_v2_ClusterList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/cmk_v2_ClusterList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    cmk.v2.ClusterSpec:
      description: The desired state of the Cluster
      properties:
        display_name:
          description: The name of the cluster.
          example: ProdKafkaCluster
          type: string
        availability:
          default: SINGLE_ZONE
          description: |
            The availability zone configuration of the cluster
            Note: The availability zone can be updated from Single to Multi-Zone for Basic and Standard clusters
            but cannot be downgraded from Multi-Zone to Single Zone.
          example: SINGLE_ZONE
          type: string
          x-extensible-enum:
          - MULTI_ZONE
          - SINGLE_ZONE
        cloud:
          description: The cloud service provider in which the cluster is running.
          example: GCP
          type: string
          x-extensible-enum:
          - AWS
          - GCP
          - AZURE
          x-immutable: true
        region:
          description: The cloud service provider region where the cluster is running.
          example: us-east4
          type: string
          x-immutable: true
        config:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_config'
        kafka_bootstrap_endpoint:
          description: The bootstrap endpoint used by Kafka clients to connect to
            the cluster.
          example: lkc-00000-00000.us-central1.gcp.glb.confluent.cloud:9092
          readOnly: true
          type: string
          x-immutable: true
        http_endpoint:
          description: The cluster HTTP request URL.
          example: https://lkc-00000-00000.us-central1.gcp.glb.confluent.cloud
          format: uri
          readOnly: true
          type: string
          x-immutable: true
        api_endpoint:
          description: The Kafka API cluster endpoint used by Kafka clients to connect
            to the cluster.
          example: https://pkac-00000.us-west-2.aws.confluent.cloud
          readOnly: true
          type: string
          x-immutable: true
        environment:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_environment'
        network:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_network'
        byok:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_byok'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    EnvScopedObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          maxLength: 255
          minLength: 1
          type: string
        environment:
          description: "Environment of the referred resource, if env-scoped"
          maxLength: 255
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: uri
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    ksqldbcm.v2.Cluster:
      description: |-
        `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
        It executes SQL statements and queries which under the hood get built into corresponding
        Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


        Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - ksqldbcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cluster
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ksqldbcm_v2_Cluster_metadata'
        spec:
          $ref: '#/components/schemas/ksqldbcm.v2.ClusterSpec'
        status:
          $ref: '#/components/schemas/ksqldbcm.v2.ClusterStatus'
      type: object
    ksqldbcm.v2.ClusterStatus:
      description: The status of the Cluster
      properties:
        http_endpoint:
          description: The dataplane endpoint of the ksqlDB cluster.
          example: https://pksqlc-00000.us-central1.gcp.glb.confluent.cloud
          readOnly: true
          type: string
        phase:
          description: Status of the ksqlDB cluster.
          example: PROVISIONING
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PROVISIONED
          - FAILED
        is_paused:
          description: Tells you if the cluster has been paused
          readOnly: true
          type: boolean
        storage:
          description: Amount of storage (in GB) provisioned to this cluster
          example: 125
          format: int32
          readOnly: true
          type: integer
        topic_prefix:
          description: Topic name prefix used by this ksqlDB cluster. Used to assign
            ACLs for this ksqlDB cluster to use.
          example: pksqlc-00000
          readOnly: true
          type: string
      readOnly: true
      required:
      - is_paused
      - phase
      - storage
      type: object
    ksqldbcm.v2.ClusterList:
      description: |-
        `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
        It executes SQL statements and queries which under the hood get built into corresponding
        Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


        Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - ksqldbcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClusterList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/ksqldbcm_v2_ClusterList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    ksqldbcm.v2.ClusterSpec:
      description: The desired state of the Cluster
      properties:
        display_name:
          description: The name of the ksqlDB cluster.
          example: ksqlDB_cluster_0
          pattern: "^(?:[0-9A-Za-z\\-])[\\w-]{0,31}$"
          type: string
          x-immutable: true
        use_detailed_processing_log:
          default: true
          description: |
            This flag controls whether you want to include the row data in the processing log topic. Turn it off if you
            don't want to emit sensitive information to the processing log
          type: boolean
          x-immutable: true
        csu:
          description: The number of CSUs (Confluent Streaming Units) in a ksqlDB
            cluster.
          example: 4
          format: int32
          type: integer
          x-extensible-enum:
          - 1
          - 2
          - 4
          - 8
          - 12
          x-immutable: false
        kafka_cluster:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterSpec_kafka_cluster'
        credential_identity:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterSpec_credential_identity'
        environment:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    connect.v1.ConnectorError:
      properties:
        error:
          $ref: '#/components/schemas/connect_v1_ConnectorError_error'
      type: object
    connect.v1.Connector:
      example:
        name: name
        type: sink
        config:
          connector.class: connector.class
          kafka.api.key: kafka.api.key
          cloud.provider: cloud.provider
          kafka.region: kafka.region
          kafka.api.secret: kafka.api.secret
          kafka.endpoint: kafka.endpoint
          name: name
          cloud.environment: private
        tasks:
        - task: 0
          connector: connector
        - task: 0
          connector: connector
      properties:
        name:
          description: Name of the connector
          type: string
        config:
          $ref: '#/components/schemas/connect_v1_Connector_config'
        tasks:
          description: List of active tasks generated by the connector
          items:
            $ref: '#/components/schemas/connect_v1_Connector_tasks_inner'
          type: array
        type:
          description: "Type of connector, sink or source"
          enum:
          - sink
          - source
          type: string
      required:
      - config
      - name
      type: object
    connect.v1.Connectors:
      description: List of active task configs that have been created by the connector
      items:
        $ref: '#/components/schemas/connect_v1_Connectors_inner'
      type: array
    connect.v1.ConnectorExpansionMap:
      additionalProperties:
        $ref: '#/components/schemas/connect.v1.ConnectorExpansion'
      type: object
    connect.v1.ConnectorExpansion:
      description: Name of connector
      properties:
        id:
          $ref: '#/components/schemas/connect_v1_ConnectorExpansion_id'
        info:
          $ref: '#/components/schemas/connect_v1_ConnectorExpansion_info'
        status:
          $ref: '#/components/schemas/connect_v1_ConnectorExpansion_status'
      type: object
    AbstractConfigData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AbstractConfigData_allOf'
    AclData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AclData_allOf'
    AclDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AclDataList_allOf'
    AclOperation:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - CLUSTER_ACTION
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - MATCH
      - LITERAL
      - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - DENY
      - ALLOW
    AclResourceType:
      enum:
      - UNKNOWN
      - ANY
      - TOPIC
      - GROUP
      - CLUSTER
      - TRANSACTIONAL_ID
      - DELEGATION_TOKEN
      type: string
    AlterConfigBatchRequestData:
      example:
        validate_only: true
        data:
        - name: name
          value: value
          operation: operation
        - name: name
          value: value
          operation: operation
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterConfigBatchRequestData_data_inner'
          type: array
        validate_only:
          type: boolean
      required:
      - data
      type: object
    AnyValue:
      nullable: true
    AuthorizedOperations:
      items:
        type: string
        x-extensible-enum:
        - UNKNOWN
        - ALL
        - READ
        - WRITE
        - CREATE
        - DELETE
        - ALTER
        - DESCRIBE
        - CLUSTER_ACTION
        - DESCRIBE_CONFIGS
        - ALTER_CONFIGS
        - IDEMPOTENT_WRITE
      type: array
    BrokerConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/BrokerConfigData_allOf'
    BrokerConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerConfigDataList_allOf'
    BrokerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerData_allOf'
    BrokerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerDataList_allOf'
    ClusterConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/ClusterConfigData_allOf'
    ClusterConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterConfigDataList_allOf'
    ClusterConfigType:
      type: string
      x-extensible-enum:
      - BROKER
    ClusterData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClusterData_allOf'
    ClusterDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterDataList_allOf'
    CreateAclRequestData:
      example:
        principal: principal
        pattern_type: pattern_type
        resource_type: null
        host: host
        permission: permission
        resource_name: resource_name
        operation: operation
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
      type: object
    CreateAclRequestDataList:
      allOf:
      - $ref: '#/components/schemas/CreateAclRequestDataList_allOf'
    CreateTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        validate_only: true
        replication_factor: 6
        topic_name: topic_name
        partitions_count: 0
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/CreateTopicRequestData_configs_inner'
          type: array
        validate_only:
          type: boolean
      required:
      - topic_name
      type: object
    ConfigSource:
      type: string
      x-extensible-enum:
      - DYNAMIC_CLUSTER_LINK_CONFIG
      - DYNAMIC_TOPIC_CONFIG
      - DYNAMIC_BROKER_LOGGER_CONFIG
      - DYNAMIC_BROKER_CONFIG
      - DYNAMIC_DEFAULT_BROKER_CONFIG
      - STATIC_BROKER_CONFIG
      - DEFAULT_CONFIG
      - UNKNOWN
    ConfigSynonymData:
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
      required:
      - name
      - source
      type: object
    ConsumerAssignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerAssignmentData_allOf'
    ConsumerAssignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerAssignmentDataList_allOf'
    ConsumerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerData_allOf'
    ConsumerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerDataList_allOf'
    ConsumerGroupData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupData_allOf'
    ConsumerGroupDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerGroupDataList_allOf'
    ConsumerGroupState:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - PREPARING_REBALANCE
      - COMPLETING_REBALANCE
      - STABLE
      - DEAD
      - EMPTY
    ConsumerLagData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerLagData_allOf'
    ConsumerLagDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerLagDataList_allOf'
    ConsumerGroupLagSummaryData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupLagSummaryData_allOf'
    PartitionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/PartitionData_allOf'
    PartitionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/PartitionDataList_allOf'
    ProduceResponse:
      example:
        partition_id: 6
        cluster_id: cluster_id
        offset: 1
        topic_name: topic_name
        error_code: 0
        message: message
        value:
          size: 5
          type: type
        key:
          size: 5
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        error_code:
          format: int32
          type: integer
        message:
          type: string
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
        timestamp:
          format: date-time
          nullable: true
          type: string
        key:
          $ref: '#/components/schemas/ProduceResponseData'
        value:
          $ref: '#/components/schemas/ProduceResponseData'
      required:
      - error_code
      type: object
    ProduceResponseData:
      example:
        size: 5
        type: type
      nullable: true
      properties:
        size:
          type: integer
        type:
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
      required:
      - size
      - type
      type: object
    ProduceRequest:
      example:
        partition_id: 0
        headers:
        - name: name
          value: value
        - name: name
          value: value
        value:
          data: ""
          type: type
        key:
          data: ""
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        partition_id:
          format: int32
          nullable: true
          type: integer
        headers:
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
          type: array
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          format: date-time
          nullable: true
          type: string
      type: object
    ProduceRequestData:
      example:
        data: ""
        type: type
      nullable: true
      properties:
        type:
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
        data:
          nullable: true
      type: object
    ProduceRequestHeader:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          format: byte
          nullable: true
          type: string
      required:
      - name
      type: object
    ReassignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReassignmentData_allOf'
    ReassignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReassignmentDataList_allOf'
    Relationship:
      properties:
        related:
          type: string
      required:
      - related
      type: object
    ReplicaData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaData_allOf'
    ReplicaDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaDataList_allOf'
    Resource:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollection:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceCollectionMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollectionMetadata:
      properties:
        self:
          type: string
        next:
          nullable: true
          type: string
      required:
      - self
      type: object
    ResourceMetadata:
      properties:
        self:
          type: string
        resource_name:
          nullable: true
          type: string
      required:
      - self
      type: object
    TopicConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/TopicConfigData_allOf'
    TopicConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicConfigDataList_allOf'
    TopicData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TopicData_allOf'
    TopicDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicDataList_allOf'
    UpdateConfigRequestData:
      example:
        value: value
      properties:
        value:
          nullable: true
          type: string
      type: object
    UpdatePartitionCountRequestData:
      example:
        partitions_count: 0
      properties:
        partitions_count:
          format: int32
          type: integer
      required:
      - partitions_count
      type: object
    ReplicaStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaStatusData_allOf'
    ReplicaStatusDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaStatusDataList_allOf'
    AnyUnevenLoadData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AnyUnevenLoadData_allOf'
    BalancerStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BalancerStatusData_allOf'
    BrokerRemovalData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerRemovalData_allOf'
    BrokerRemovalDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerRemovalDataList_allOf'
    BrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerTaskData_allOf'
    BrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerTaskDataList_allOf'
    BrokerReplicaExclusionRequestData:
      properties:
        broker_id:
          type: integer
        reason:
          type: string
      required:
      - broker_id
      - reason
      type: object
    BrokerReplicaExclusionBatchRequestData:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
          type: array
      required:
      - data
      type: object
    BrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerReplicaExclusionData_allOf'
    BrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerReplicaExclusionDataList_allOf'
    AlterBrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionData_allOf'
    AlterBrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList_allOf'
    RemoveBrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RemoveBrokerTaskData_allOf'
    RemoveBrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/RemoveBrokerTaskDataList_allOf'
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
      - value
    CreateLinkRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        destination_cluster_id: destination_cluster_id
        source_cluster_id: source_cluster_id
      properties:
        source_cluster_id:
          type: string
        destination_cluster_id:
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      type: object
    UpdateLinkConfigRequestData:
      example:
        value: value
      properties:
        value:
          type: string
      required:
      - value
      type: object
    LinkState:
      type: string
      x-extensible-enum:
      - ACTIVE
      - FAILED
      - UNAVAILABLE
      - PAUSED
      - UNKNOWN
    LinkError:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - NO_ERROR
      - AUTHENTICATION_ERROR
      - UNRESOLVABLE_BOOTSTRAP_ERROR
      - INVALID_BOOTSTRAP_INTERNAL_ENDPOINT_ERROR
      - BOOTSTRAP_TCP_CONNECTION_FAILED_ERROR
      - TIMEOUT_ERROR
    ListLinksResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinksResponseData_allOf'
    ListLinksResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinksResponseDataList_allOf'
    ListLinkConfigsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinkConfigsResponseData_allOf'
    ListLinkConfigsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinkConfigsResponseDataList_allOf'
    CreateMirrorTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        source_topic_name: source_topic_name
        replication_factor: 0
        mirror_topic_name: mirror_topic_name
      properties:
        source_topic_name:
          type: string
        mirror_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      required:
      - source_topic_name
      type: object
    AlterMirrorsRequestData:
      example:
        mirror_topic_names:
        - mirror_topic_names
        - mirror_topic_names
      properties:
        mirror_topic_names:
          items:
            type: string
          type: array
      required:
      - mirror_topic_names
      type: object
    ListMirrorTopicsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseData_allOf'
    ListMirrorTopicsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseDataList_allOf'
    AlterMirrorStatusResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseData_allOf'
    AlterMirrorStatusResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseDataList_allOf'
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          items:
            type: integer
          type: array
      required:
      - broker_ids
      type: object
    MirrorLags:
      items:
        $ref: '#/components/schemas/MirrorLag'
      type: array
    MirrorLag:
      properties:
        partition:
          type: integer
        lag:
          format: int64
          type: integer
        last_source_fetch_offset:
          format: int64
          type: integer
      required:
      - lag
      - last_source_fetch_offset
      - partition
      type: object
    MirrorTopicStatus:
      enum:
      - ACTIVE
      - FAILED
      - PAUSED
      - STOPPED
      - PENDING_STOPPED
      type: string
    AnyUnevenLoadStatus:
      type: string
      x-extensible-enum:
      - STARTING
      - BALANCING
      - BALANCED
      - BALANCING_FAILED
      - DISABLED
      - ABORTED
      - UNKNOWN
    BalancerStatus:
      type: string
      x-extensible-enum:
      - BOOTSTRAPPING
      - STARTING
      - ENABLED
      - ERROR
      - DISABLED
      - FAILOVER
      - LOAD_FAILURE
      - UNKNOWN
    BrokerTaskType:
      enum:
      - add-broker
      - remove-broker
      type: string
    BrokerTaskStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - IN_PROGRESS
      - SUCCESS
      - UNKNOWN
    ExclusionOp:
      type: string
      x-extensible-enum:
      - SET
      - DELETE
      - UNKNOWN
    BrokerReplicaExclusionStatus:
      type: string
      x-extensible-enum:
      - PENDING
      - IN_PROGRESS
      - EXCLUDED
      - REMOVING
      - ERROR
      - CANCELED
      - COMPLETED
      - UNKNOWN
    DeprecatedPartitionReassignmentStatus:
      type: string
      x-extensible-enum:
      - CANCELED
      - FAILED
      - PENDING
      - IN_PROGRESS
      - COMPLETE
    DeprecatedBrokerShutdownStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - CANCELED
      - PENDING
      - COMPLETE
    service-quota.v1.AppliedQuota:
      description: |-
        A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
        Use this API to retrieve an individual quota or list of quotas for a given scope.


        Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

        ## The Applied Quotas Model
        <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - service-quota/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - AppliedQuota
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_metadata'
        scope:
          description: The applied scope that this quota belongs to.
          example: ORGANIZATION
          type: string
          x-extensible-enum:
          - ORGANIZATION
          - ENVIRONMENT
          - NETWORK
          - KAFKA_CLUSTER
          - SERVICE_ACCOUNT
          - USER_ACCOUNT
        display_name:
          description: A human-readable name for the quota type name.
          example: Kafka Cluster Per Organization
          type: string
          x-immutable: true
        default_limit:
          description: |
            The default service quota value.
          format: int32
          type: integer
        applied_limit:
          description: |
            The latest applied service quota value, taking into account any limit adjustments.
          format: int32
          type: integer
        usage:
          description: |
            Show the quota usage value if the quota usage is available for this quota.
          format: int32
          type: integer
        user:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_user'
        organization:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_organization'
        environment:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_environment'
        network:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_network'
        kafka_cluster:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuota_kafka_cluster'
      type: object
    service-quota.v1.Scope:
      description: |-
        Gets a list of all available scopes for applied quotas.


        Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

        ## The Scopes Model
        <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - service-quota/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Scope
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/service_quota_v1_Scope_metadata'
        description:
          description: the quota scope for listing quotas queries
          example: ORGANIZATION scope that quotas would be applied to
          type: string
      type: object
    service-quota.v1.AppliedQuotaList:
      description: |-
        A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
        Use this API to retrieve an individual quota or list of quotas for a given scope.


        Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

        ## The Applied Quotas Model
        <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - service-quota/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - AppliedQuotaList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/service_quota_v1_AppliedQuotaList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/service_quota_v1_AppliedQuotaList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    service-quota.v1.ScopeList:
      description: |-
        Gets a list of all available scopes for applied quotas.


        Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

        ## The Scopes Model
        <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - service-quota/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ScopeList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/service_quota_v1_ScopeList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/service_quota_v1_ScopeList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    partner.v2.Entitlement:
      additionalProperties: false
      description: '`Entitlement` objects represent metadata about a marketplace entitlement.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Entitlement
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        external_id:
          description: The unique external ID of the entitlement (this should be unique
            to customer)
          example: 1111-2222-3333-4444
          type: string
        name:
          description: The name of the entitlement
          example: Acme Prod Entitlement
          type: string
        plan_id:
          description: The plan ID the entitlement
          example: confluent-cloud-payg-prod
          type: string
          x-extensible-enum:
          - confluent-cloud-payg-prod
          - payg-prod.gcpmarketplace.confluent.cloud
        product_id:
          description: The product ID of the entitlement
          example: confluent-cloud-kafka-service-azure
          type: string
          x-extensible-enum:
          - confluent-cloud-kafka-service-azure
          - confluent-cloud-for-apache-kafka
          - payg-prod.gcpmarketplace.confluent.cloud
        usage_reporting_id:
          description: |
            The usage reporting ID of the entitlement (if usage reporting uses
            a different ID, otherwise, same as external_id)
          example: 1111-2222-3333-4444
          type: string
        resource_id:
          description: The resource ID of the entitlement
          example: 1111-2222-3333-4444
          type: string
        organization:
          $ref: '#/components/schemas/partner_v2_Entitlement_organization'
      type: object
    partner.v2.EntitlementList:
      additionalProperties: false
      description: '`Entitlement` objects represent metadata about a marketplace entitlement.'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - null
        - null
        kind: EntitlementList
        api_version: partner/v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - EntitlementList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            $ref: '#/components/schemas/partner_v2_EntitlementList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    srcm.v2.Region:
      description: |-
        `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
        The API allows you to list Schema Registry regions.


        Related guide: [Confluent Cloud Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-regions).

        ## The Regions Model
        <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - srcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Region
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/srcm_v2_Region_metadata'
        spec:
          $ref: '#/components/schemas/srcm.v2.RegionSpec'
      type: object
    srcm.v2.Cluster:
      description: |-
        `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

        The API allows you to list, create, read, and delete your Schema Registry clusters.


        Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - srcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cluster
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/srcm_v2_Cluster_metadata'
        spec:
          $ref: '#/components/schemas/srcm.v2.ClusterSpec'
        status:
          $ref: '#/components/schemas/srcm.v2.ClusterStatus'
      type: object
    srcm.v2.ClusterStatus:
      description: The status of the Cluster
      properties:
        phase:
          description: |
            The lifecyle phase of the cluster:

              PROVISIONED:  cluster is provisioned;

              PROVISIONING:  cluster provisioning is in progress;

              FAILED:  provisioning failed
          example: PROVISIONED
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PROVISIONED
          - FAILED
      readOnly: true
      required:
      - phase
      type: object
    srcm.v2.RegionList:
      description: |-
        `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
        The API allows you to list Schema Registry regions.


        Related guide: [Confluent Cloud Schema Registry Regions](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-regions).

        ## The Regions Model
        <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - srcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - RegionList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/srcm_v2_RegionList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/srcm_v2_RegionList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    srcm.v2.RegionSpec:
      description: The desired state of the Region
      properties:
        display_name:
          description: The display name.
          example: Ohio (us-east-2)
          readOnly: true
          type: string
          x-immutable: true
        cloud:
          description: The cloud service provider that hosts the region.
          example: AWS
          readOnly: true
          type: string
          x-extensible-enum:
          - AWS
          - GCP
          - AZURE
          x-immutable: true
        region_name:
          description: The region name.
          example: us-east-2
          readOnly: true
          type: string
          x-immutable: true
        packages:
          description: List of Stream Governance packages allowing placement in this
            region.
          example:
          - ESSENTIALS
          - ADVANCED
          items:
            type: string
            x-extensible-enum:
            - ESSENTIALS
            - ADVANCED
          readOnly: true
          type: array
          x-immutable: true
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    srcm.v2.ClusterList:
      description: |-
        `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

        The API allows you to list, create, read, and delete your Schema Registry clusters.


        Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - srcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClusterList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/srcm_v2_ClusterList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/srcm_v2_ClusterList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    srcm.v2.ClusterSpec:
      description: The desired state of the Cluster
      properties:
        display_name:
          description: The cluster name.
          example: Stream Governance package
          readOnly: true
          type: string
          x-immutable: true
        package:
          description: |
            The billing package.

            Note: Clusters can be upgraded from ESSENTIALS to ADVANCED, but cannot be
            downgraded from ADVANCED to ESSENTIALS.
          example: ESSENTIALS
          type: string
          x-extensible-enum:
          - ESSENTIALS
          - ADVANCED
        http_endpoint:
          description: The cluster HTTP request URL.
          example: https://psrc-00000.us-central1.gcp.confluent.cloud
          format: uri
          readOnly: true
          type: string
          x-immutable: true
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
        region:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_region'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    ClusterConfig:
      description: Cluster Config
      example:
        maxSchemas: 20000
        maxRequestsPerSec: 25
      properties:
        maxSchemas:
          description: Maximum number of registered schemas allowed
          example: 20000
          format: int32
          type: integer
        maxRequestsPerSec:
          description: Maximum number of allowed requests per second
          example: 25
          format: int32
          type: integer
      type: object
    CompatibilityCheckResponse:
      description: Compatibility check response
      example:
        is_compatible: true
        messages: []
      properties:
        is_compatible:
          description: Whether the compared schemas are compatible
          type: boolean
        messages:
          description: Error messages
          example: []
          items:
            description: Error messages
            example: "[]"
            type: string
          type: array
      type: object
    ErrorMessage:
      description: Error message of this operation
      example:
        error_code: 0
        message: message
      properties:
        error_code:
          description: The error code
          format: int32
          type: integer
        message:
          description: The error message
          type: string
      type: object
    RegisterSchemaRequest:
      description: Schema register request
      example:
        schema: schema
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        schemaType: schemaType
        id: 6
        version: 0
      properties:
        version:
          description: Version number
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          format: int32
          type: integer
        schemaType:
          description: Schema type
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          type: string
      type: object
    SchemaReference:
      description: Schema reference
      example:
        subject: User
        name: io.confluent.kafka.example.User
        version: 1
      properties:
        name:
          description: Reference name
          example: io.confluent.kafka.example.User
          type: string
        subject:
          description: Name of the referenced subject
          example: User
          type: string
        version:
          description: Version number of the referenced subject
          example: 1
          format: int32
          type: integer
      type: object
    Config:
      description: Config
      example:
        compatibilityLevel: FULL_TRANSITIVE
      properties:
        compatibilityLevel:
          description: Compatibility Level
          example: FULL_TRANSITIVE
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
      type: object
    ConfigUpdateRequest:
      description: Config update request
      example:
        compatibility: FULL_TRANSITIVE
      properties:
        compatibility:
          description: Compatibility Level
          example: FULL_TRANSITIVE
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
      type: object
    Mode:
      description: Schema Registry operating mode
      example:
        mode: READWRITE
      properties:
        mode:
          description: Schema Registry operating mode
          example: READWRITE
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    ModeUpdateRequest:
      description: Mode update request
      example:
        mode: READWRITE
      properties:
        mode:
          description: Schema Registry operating mode
          example: READWRITE
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    SchemaString:
      description: Schema definition
      example:
        schema: "{\"schema\": \"{\"type\": \"string\"}\"}"
        maxId: 1
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        schemaType: AVRO
      properties:
        schemaType:
          description: Schema type
          example: AVRO
          type: string
        schema:
          description: Schema string identified by the ID
          example: "{\"schema\": \"{\"type\": \"string\"}\"}"
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        maxId:
          description: Maximum ID
          example: 1
          format: int32
          type: integer
      type: object
    Schema:
      description: Schema
      example:
        schema: "{\"schema\": \"{\"type\": \"string\"}\"}"
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        subject: User
        schemaType: AVRO
        id: 100001
        version: 1
      properties:
        subject:
          description: Name of the subject
          example: User
          type: string
        version:
          description: Version number
          example: 1
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          example: 100001
          format: int32
          type: integer
        schemaType:
          description: Schema type
          example: AVRO
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          example: "{\"schema\": \"{\"type\": \"string\"}\"}"
          type: string
      type: object
    SubjectVersion:
      description: Subject version pair
      example:
        subject: User
        version: 1
      properties:
        subject:
          description: Name of the subject
          example: User
          type: string
        version:
          description: Version number
          example: 1
          format: int32
          type: integer
      type: object
    RegisterSchemaResponse:
      description: Schema register response
      example:
        id: 100001
      properties:
        id:
          description: Globally unique identifier of the schema
          example: 100001
          format: int32
          type: integer
      type: object
    Tag:
      example:
        removePropagationsOnEntityDelete: true
        entityStatus: ACTIVE
        entityType: entityType
        entityName: entityName
        typeName: typeName
        entityGuid: entityGuid
        propagate: true
        validityPeriods:
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        attributes:
          key: "{}"
      properties:
        typeName:
          description: The tag name
          type: string
        attributes:
          additionalProperties:
            type: object
          description: The tag attributes
          type: object
        entityGuid:
          description: The internal entity guid
          type: string
        entityStatus:
          description: The entity status
          enum:
          - ACTIVE
          - DELETED
          - PURGED
          type: string
        propagate:
          description: Whether to propagate the tag
          type: boolean
        validityPeriods:
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
          type: array
        removePropagationsOnEntityDelete:
          description: Whether to remove propagations on entity delete
          type: boolean
        entityType:
          description: The entity type
          type: string
        entityName:
          description: The qualified name of the entity
          type: string
      type: object
    TimeBoundary:
      example:
        timeZone: timeZone
        startTime: startTime
        endTime: endTime
      properties:
        startTime:
          description: The start time of format yyyy/MM/dd HH:mm:ss
          type: string
        endTime:
          description: The end time of format yyyy/MM/dd HH:mm:ss
          type: string
        timeZone:
          description: The time zone (see java.util.TimeZone)
          type: string
      type: object
    Classification:
      example:
        removePropagationsOnEntityDelete: true
        entityStatus: ACTIVE
        typeName: typeName
        entityGuid: entityGuid
        propagate: true
        validityPeriods:
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        attributes:
          key: "{}"
      properties:
        typeName:
          description: The tag name
          type: string
        attributes:
          additionalProperties:
            type: object
          description: The tag attributes
          type: object
        entityGuid:
          description: The internal entity guid
          type: string
        entityStatus:
          description: The entity status
          enum:
          - ACTIVE
          - DELETED
          - PURGED
          type: string
        propagate:
          description: Whether to propagate the tag
          type: boolean
        validityPeriods:
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
          type: array
        removePropagationsOnEntityDelete:
          description: Whether to remove propagations on entity delete
          type: boolean
      type: object
    Entity:
      description: The entity
      example:
        relationshipAttributes:
          key: "{}"
        provenanceType: 0
        updatedBy: updatedBy
        typeName: typeName
        updateTime: 2000-01-23T04:56:07.000+00:00
        isProxy: true
        version: 6
        meanings:
        - displayText: displayText
          expression: expression
          relationGuid: relationGuid
          createdBy: createdBy
          steward: steward
          confidence: 1
          description: description
          source: source
          termGuid: termGuid
          status: DISCOVERED
        - displayText: displayText
          expression: expression
          relationGuid: relationGuid
          createdBy: createdBy
          steward: steward
          confidence: 1
          description: description
          source: source
          termGuid: termGuid
          status: DISCOVERED
        labels:
        - labels
        - labels
        businessAttributes:
          key:
            key: "{}"
        classifications:
        - removePropagationsOnEntityDelete: true
          entityStatus: ACTIVE
          typeName: typeName
          entityGuid: entityGuid
          propagate: true
          validityPeriods:
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          attributes:
            key: "{}"
        - removePropagationsOnEntityDelete: true
          entityStatus: ACTIVE
          typeName: typeName
          entityGuid: entityGuid
          propagate: true
          validityPeriods:
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          attributes:
            key: "{}"
        proxy: true
        createdBy: createdBy
        createTime: 2000-01-23T04:56:07.000+00:00
        guid: guid
        attributes:
          key: "{}"
        homeId: homeId
        isIncomplete: true
        status: ACTIVE
        customAttributes:
          key: customAttributes
      properties:
        typeName:
          description: The type name
          type: string
        attributes:
          additionalProperties:
            type: object
          description: The type attributes
          type: object
        guid:
          description: The internal guid
          type: string
        homeId:
          description: The home id
          type: string
        isProxy:
          description: Whether is a proxy
          type: boolean
          writeOnly: true
        isIncomplete:
          description: Whether is incomplete
          type: boolean
        provenanceType:
          description: The provenance type
          format: int32
          type: integer
        status:
          description: The status
          enum:
          - ACTIVE
          - DELETED
          - PURGED
          type: string
        createdBy:
          description: The creator
          type: string
        updatedBy:
          description: The updater
          type: string
        createTime:
          description: The create time
          format: date-time
          type: string
        updateTime:
          description: The update time
          format: date-time
          type: string
        version:
          description: The version
          format: int32
          type: integer
        relationshipAttributes:
          additionalProperties:
            type: object
          description: The relationship attributes
          type: object
        classifications:
          description: The classifications (tags)
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        meanings:
          description: The meanings
          items:
            $ref: '#/components/schemas/TermAssignmentHeader'
          type: array
        customAttributes:
          additionalProperties:
            type: string
          description: The custom attributes
          type: object
        businessAttributes:
          additionalProperties:
            additionalProperties:
              type: object
            type: object
          description: The business attributes
          type: object
        labels:
          description: The labels
          items:
            type: string
          type: array
          uniqueItems: true
        proxy:
          description: Whether is a proxy
          type: boolean
      type: object
    EntityWithExtInfo:
      example:
        referredEntities:
          key:
            relationshipAttributes:
              key: "{}"
            provenanceType: 0
            updatedBy: updatedBy
            typeName: typeName
            updateTime: 2000-01-23T04:56:07.000+00:00
            isProxy: true
            version: 6
            meanings:
            - displayText: displayText
              expression: expression
              relationGuid: relationGuid
              createdBy: createdBy
              steward: steward
              confidence: 1
              description: description
              source: source
              termGuid: termGuid
              status: DISCOVERED
            - displayText: displayText
              expression: expression
              relationGuid: relationGuid
              createdBy: createdBy
              steward: steward
              confidence: 1
              description: description
              source: source
              termGuid: termGuid
              status: DISCOVERED
            labels:
            - labels
            - labels
            businessAttributes:
              key:
                key: "{}"
            classifications:
            - removePropagationsOnEntityDelete: true
              entityStatus: ACTIVE
              typeName: typeName
              entityGuid: entityGuid
              propagate: true
              validityPeriods:
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              attributes:
                key: "{}"
            - removePropagationsOnEntityDelete: true
              entityStatus: ACTIVE
              typeName: typeName
              entityGuid: entityGuid
              propagate: true
              validityPeriods:
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              attributes:
                key: "{}"
            proxy: true
            createdBy: createdBy
            createTime: 2000-01-23T04:56:07.000+00:00
            guid: guid
            attributes:
              key: "{}"
            homeId: homeId
            isIncomplete: true
            status: ACTIVE
            customAttributes:
              key: customAttributes
        entity:
          relationshipAttributes:
            key: "{}"
          provenanceType: 0
          updatedBy: updatedBy
          typeName: typeName
          updateTime: 2000-01-23T04:56:07.000+00:00
          isProxy: true
          version: 6
          meanings:
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          labels:
          - labels
          - labels
          businessAttributes:
            key:
              key: "{}"
          classifications:
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          proxy: true
          createdBy: createdBy
          createTime: 2000-01-23T04:56:07.000+00:00
          guid: guid
          attributes:
            key: "{}"
          homeId: homeId
          isIncomplete: true
          status: ACTIVE
          customAttributes:
            key: customAttributes
      properties:
        referredEntities:
          additionalProperties:
            $ref: '#/components/schemas/Entity'
          description: The referred entities
          type: object
        entity:
          $ref: '#/components/schemas/Entity'
      type: object
    TermAssignmentHeader:
      example:
        displayText: displayText
        expression: expression
        relationGuid: relationGuid
        createdBy: createdBy
        steward: steward
        confidence: 1
        description: description
        source: source
        termGuid: termGuid
        status: DISCOVERED
      properties:
        termGuid:
          description: The term guid
          type: string
        relationGuid:
          description: The relation guid
          type: string
        description:
          description: The description
          type: string
        displayText:
          description: The display text
          type: string
        expression:
          description: The expression
          type: string
        createdBy:
          description: The creator
          type: string
        steward:
          description: The steward
          type: string
        source:
          description: The source
          type: string
        confidence:
          description: The confidence
          format: int32
          type: integer
        status:
          description: The status
          enum:
          - DISCOVERED
          - PROPOSED
          - IMPORTED
          - VALIDATED
          - DEPRECATED
          - OBSOLETE
          - OTHER
          type: string
      type: object
    EntityHeader:
      example:
        displayText: displayText
        classifications:
        - removePropagationsOnEntityDelete: true
          entityStatus: ACTIVE
          typeName: typeName
          entityGuid: entityGuid
          propagate: true
          validityPeriods:
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          attributes:
            key: "{}"
        - removePropagationsOnEntityDelete: true
          entityStatus: ACTIVE
          typeName: typeName
          entityGuid: entityGuid
          propagate: true
          validityPeriods:
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          - timeZone: timeZone
            startTime: startTime
            endTime: endTime
          attributes:
            key: "{}"
        classificationNames:
        - classificationNames
        - classificationNames
        meaningNames:
        - meaningNames
        - meaningNames
        typeName: typeName
        guid: guid
        attributes:
          key: "{}"
        meanings:
        - displayText: displayText
          expression: expression
          relationGuid: relationGuid
          createdBy: createdBy
          steward: steward
          confidence: 1
          description: description
          source: source
          termGuid: termGuid
          status: DISCOVERED
        - displayText: displayText
          expression: expression
          relationGuid: relationGuid
          createdBy: createdBy
          steward: steward
          confidence: 1
          description: description
          source: source
          termGuid: termGuid
          status: DISCOVERED
        status: ACTIVE
        isIncomplete: true
        labels:
        - labels
        - labels
      properties:
        typeName:
          description: The type name
          type: string
        attributes:
          additionalProperties:
            type: object
          description: The attributes
          type: object
        guid:
          description: The internal guid
          type: string
        status:
          description: The status
          enum:
          - ACTIVE
          - DELETED
          - PURGED
          type: string
        displayText:
          description: The display text
          type: string
        classificationNames:
          description: The classification (tag) names
          items:
            type: string
          type: array
        classifications:
          description: The classifications (tags)
          items:
            $ref: '#/components/schemas/Classification'
          type: array
        meaningNames:
          description: The meaning names
          items:
            type: string
          type: array
        meanings:
          description: The meanings
          items:
            $ref: '#/components/schemas/TermAssignmentHeader'
          type: array
        isIncomplete:
          description: Whether is incomplete
          type: boolean
        labels:
          description: The labels
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    SearchParams:
      description: Search paramas to filter results
      example:
        offset: 6
        limit: 0
        includeDeleted: true
      properties:
        includeDeleted:
          description: Whether to include deleted
          type: boolean
        limit:
          description: The limit
          format: int32
          type: integer
        offset:
          description: The offset
          format: int32
          type: integer
      type: object
    SearchResult:
      example:
        types:
        - types
        - types
        entities:
        - displayText: displayText
          classifications:
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          classificationNames:
          - classificationNames
          - classificationNames
          meaningNames:
          - meaningNames
          - meaningNames
          typeName: typeName
          guid: guid
          attributes:
            key: "{}"
          meanings:
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          status: ACTIVE
          isIncomplete: true
          labels:
          - labels
          - labels
        - displayText: displayText
          classifications:
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          - removePropagationsOnEntityDelete: true
            entityStatus: ACTIVE
            typeName: typeName
            entityGuid: entityGuid
            propagate: true
            validityPeriods:
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            - timeZone: timeZone
              startTime: startTime
              endTime: endTime
            attributes:
              key: "{}"
          classificationNames:
          - classificationNames
          - classificationNames
          meaningNames:
          - meaningNames
          - meaningNames
          typeName: typeName
          guid: guid
          attributes:
            key: "{}"
          meanings:
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          - displayText: displayText
            expression: expression
            relationGuid: relationGuid
            createdBy: createdBy
            steward: steward
            confidence: 1
            description: description
            source: source
            termGuid: termGuid
            status: DISCOVERED
          status: ACTIVE
          isIncomplete: true
          labels:
          - labels
          - labels
        searchParameters:
          offset: 6
          limit: 0
          includeDeleted: true
        referredEntities:
          key:
            displayText: displayText
            classifications:
            - removePropagationsOnEntityDelete: true
              entityStatus: ACTIVE
              typeName: typeName
              entityGuid: entityGuid
              propagate: true
              validityPeriods:
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              attributes:
                key: "{}"
            - removePropagationsOnEntityDelete: true
              entityStatus: ACTIVE
              typeName: typeName
              entityGuid: entityGuid
              propagate: true
              validityPeriods:
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              - timeZone: timeZone
                startTime: startTime
                endTime: endTime
              attributes:
                key: "{}"
            classificationNames:
            - classificationNames
            - classificationNames
            meaningNames:
            - meaningNames
            - meaningNames
            typeName: typeName
            guid: guid
            attributes:
              key: "{}"
            meanings:
            - displayText: displayText
              expression: expression
              relationGuid: relationGuid
              createdBy: createdBy
              steward: steward
              confidence: 1
              description: description
              source: source
              termGuid: termGuid
              status: DISCOVERED
            - displayText: displayText
              expression: expression
              relationGuid: relationGuid
              createdBy: createdBy
              steward: steward
              confidence: 1
              description: description
              source: source
              termGuid: termGuid
              status: DISCOVERED
            status: ACTIVE
            isIncomplete: true
            labels:
            - labels
            - labels
      properties:
        searchParameters:
          $ref: '#/components/schemas/SearchParams'
        types:
          description: The types
          items:
            type: string
          type: array
        entities:
          description: The entities
          items:
            $ref: '#/components/schemas/EntityHeader'
          type: array
        referredEntities:
          additionalProperties:
            $ref: '#/components/schemas/EntityHeader'
          description: The referred entities
          type: object
      type: object
    AttributeDef:
      example:
        isIndexable: true
        defaultValue: defaultValue
        displayName: displayName
        searchWeight: 5
        typeName: typeName
        isUnique: true
        description: description
        isOptional: true
        includeInNotification: true
        constraints:
        - type: type
          params:
            key: "{}"
        - type: type
          params:
            key: "{}"
        cardinality: SINGLE
        valuesMinCount: 6
        indexType: DEFAULT
        name: name
        options:
          key: options
        valuesMaxCount: 1
      properties:
        name:
          description: The name
          type: string
        typeName:
          description: The type name
          type: string
        isOptional:
          description: Whether is optional
          type: boolean
        cardinality:
          description: The cardinality
          enum:
          - SINGLE
          - LIST
          - SET
          type: string
        valuesMinCount:
          description: The values min count
          format: int32
          type: integer
        valuesMaxCount:
          description: The values max count
          format: int32
          type: integer
        isUnique:
          description: Whether is unique
          type: boolean
        isIndexable:
          description: Whether is indexable
          type: boolean
        includeInNotification:
          description: Whether to include in notifications
          type: boolean
        defaultValue:
          description: The default value
          type: string
        description:
          description: The description
          type: string
        searchWeight:
          description: The search weight
          format: int32
          type: integer
        indexType:
          description: The index type
          enum:
          - DEFAULT
          - STRING
          type: string
        constraints:
          description: The constraints
          items:
            $ref: '#/components/schemas/ConstraintDef'
          type: array
        options:
          additionalProperties:
            type: string
          description: The options
          type: object
        displayName:
          description: The display name
          type: string
      type: object
    ConstraintDef:
      example:
        type: type
        params:
          key: "{}"
      properties:
        type:
          description: The type
          type: string
        params:
          additionalProperties:
            type: object
          description: The params
          type: object
      type: object
    TagDef:
      example:
        serviceType: serviceType
        superTypes:
        - superTypes
        - superTypes
        updatedBy: updatedBy
        description: description
        updateTime: 2000-01-23T04:56:07.000+00:00
        subTypes:
        - subTypes
        - subTypes
        version: 0
        typeVersion: typeVersion
        attributeDefs:
        - isIndexable: true
          defaultValue: defaultValue
          displayName: displayName
          searchWeight: 5
          typeName: typeName
          isUnique: true
          description: description
          isOptional: true
          includeInNotification: true
          constraints:
          - type: type
            params:
              key: "{}"
          - type: type
            params:
              key: "{}"
          cardinality: SINGLE
          valuesMinCount: 6
          indexType: DEFAULT
          name: name
          options:
            key: options
          valuesMaxCount: 1
        - isIndexable: true
          defaultValue: defaultValue
          displayName: displayName
          searchWeight: 5
          typeName: typeName
          isUnique: true
          description: description
          isOptional: true
          includeInNotification: true
          constraints:
          - type: type
            params:
              key: "{}"
          - type: type
            params:
              key: "{}"
          cardinality: SINGLE
          valuesMinCount: 6
          indexType: DEFAULT
          name: name
          options:
            key: options
          valuesMaxCount: 1
        createdBy: createdBy
        createTime: 2000-01-23T04:56:07.000+00:00
        name: name
        options:
          key: options
        guid: guid
        entityTypes:
        - entityTypes
        - entityTypes
        category: PRIMITIVE
      properties:
        category:
          description: The category
          enum:
          - PRIMITIVE
          - OBJECT_ID_TYPE
          - ENUM
          - STRUCT
          - CLASSIFICATION
          - ENTITY
          - ARRAY
          - MAP
          - RELATIONSHIP
          - BUSINESS_METADATA
          type: string
        guid:
          description: The internal guid
          type: string
        createdBy:
          description: The creator
          type: string
        updatedBy:
          description: The updater
          type: string
        createTime:
          description: The create time
          format: date-time
          type: string
        updateTime:
          description: The update time
          format: date-time
          type: string
        version:
          description: The version
          format: int32
          type: integer
        name:
          description: The name
          type: string
        description:
          description: The description
          type: string
        typeVersion:
          description: The type version
          type: string
        serviceType:
          description: The service type
          type: string
        options:
          additionalProperties:
            type: string
          description: The options
          type: object
        attributeDefs:
          description: The attribute definitions
          items:
            $ref: '#/components/schemas/AttributeDef'
          type: array
        superTypes:
          description: The supertypes
          items:
            type: string
          type: array
          uniqueItems: true
        entityTypes:
          description: The entity types
          items:
            type: string
          type: array
          uniqueItems: true
        subTypes:
          description: The subtypes
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    TagResponse:
      example:
        removePropagationsOnEntityDelete: true
        entityStatus: ACTIVE
        entityType: entityType
        entityName: entityName
        typeName: typeName
        entityGuid: entityGuid
        propagate: true
        validityPeriods:
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        - timeZone: timeZone
          startTime: startTime
          endTime: endTime
        attributes:
          key: "{}"
        error:
          error_code: 0
          message: message
      properties:
        typeName:
          description: The tag name
          type: string
        attributes:
          additionalProperties:
            type: object
          description: The tag attributes
          type: object
        entityGuid:
          description: The internal entity guid
          type: string
        entityStatus:
          description: The entity status
          enum:
          - ACTIVE
          - DELETED
          - PURGED
          type: string
        propagate:
          description: Whether to propagate the tag
          type: boolean
        validityPeriods:
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
          type: array
        removePropagationsOnEntityDelete:
          description: Whether to remove propagations on entity delete
          type: boolean
        entityType:
          description: The entity type
          type: string
        entityName:
          description: The qualified name of the entity
          type: string
        error:
          $ref: '#/components/schemas/ErrorMessage'
      type: object
    TagDefResponse:
      example:
        serviceType: serviceType
        superTypes:
        - superTypes
        - superTypes
        updatedBy: updatedBy
        description: description
        updateTime: 2000-01-23T04:56:07.000+00:00
        subTypes:
        - subTypes
        - subTypes
        error:
          error_code: 0
          message: message
        version: 0
        typeVersion: typeVersion
        attributeDefs:
        - isIndexable: true
          defaultValue: defaultValue
          displayName: displayName
          searchWeight: 5
          typeName: typeName
          isUnique: true
          description: description
          isOptional: true
          includeInNotification: true
          constraints:
          - type: type
            params:
              key: "{}"
          - type: type
            params:
              key: "{}"
          cardinality: SINGLE
          valuesMinCount: 6
          indexType: DEFAULT
          name: name
          options:
            key: options
          valuesMaxCount: 1
        - isIndexable: true
          defaultValue: defaultValue
          displayName: displayName
          searchWeight: 5
          typeName: typeName
          isUnique: true
          description: description
          isOptional: true
          includeInNotification: true
          constraints:
          - type: type
            params:
              key: "{}"
          - type: type
            params:
              key: "{}"
          cardinality: SINGLE
          valuesMinCount: 6
          indexType: DEFAULT
          name: name
          options:
            key: options
          valuesMaxCount: 1
        createdBy: createdBy
        createTime: 2000-01-23T04:56:07.000+00:00
        name: name
        options:
          key: options
        guid: guid
        entityTypes:
        - entityTypes
        - entityTypes
        category: PRIMITIVE
      properties:
        category:
          description: The category
          enum:
          - PRIMITIVE
          - OBJECT_ID_TYPE
          - ENUM
          - STRUCT
          - CLASSIFICATION
          - ENTITY
          - ARRAY
          - MAP
          - RELATIONSHIP
          - BUSINESS_METADATA
          type: string
        guid:
          description: The internal guid
          type: string
        createdBy:
          description: The creator
          type: string
        updatedBy:
          description: The updater
          type: string
        createTime:
          description: The create time
          format: date-time
          type: string
        updateTime:
          description: The update time
          format: date-time
          type: string
        version:
          description: The version
          format: int32
          type: integer
        name:
          description: The name
          type: string
        description:
          description: The description
          type: string
        typeVersion:
          description: The type version
          type: string
        serviceType:
          description: The service type
          type: string
        options:
          additionalProperties:
            type: string
          description: The options
          type: object
        attributeDefs:
          description: The attribute definitions
          items:
            $ref: '#/components/schemas/AttributeDef'
          type: array
        superTypes:
          description: The supertypes
          items:
            type: string
          type: array
          uniqueItems: true
        entityTypes:
          description: The entity types
          items:
            type: string
          type: array
          uniqueItems: true
        subTypes:
          description: The subtypes
          items:
            type: string
          type: array
          uniqueItems: true
        error:
          $ref: '#/components/schemas/ErrorMessage'
      type: object
    partner.v2.Organization:
      additionalProperties: false
      description: '`Organizations` objects represent an entire Confluent Cloud organization.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Organization
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        name:
          description: The name of the organization
          example: Acme Organization
          pattern: "^[^<>#%'*^`{|}~\\\"]{1,31}$"
          type: string
        sso_url:
          description: The login URL for the customer to access Confluent Cloud
          example: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
          format: uri
          readOnly: true
          type: string
        sso_config:
          $ref: '#/components/schemas/partner_v2_Organization_sso_config'
      type: object
    AzureSSOConfig:
      properties:
        kind:
          example: AzureSSOConfig
          type: string
        tenant_id:
          description: The Azure AD tenant ID
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
      required:
      - kind
      - tenant_id
      type: object
    partner.v2.OrganizationList:
      additionalProperties: false
      description: '`Organizations` objects represent an entire Confluent Cloud organization.'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - null
        - null
        kind: OrganizationList
        api_version: partner/v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - OrganizationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            $ref: '#/components/schemas/partner_v2_OrganizationList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    PartnerSignupRequest:
      description: The partner signup request
      example:
        organization: null
        entitlement: null
        user: ""
      properties:
        organization:
          $ref: '#/components/schemas/PartnerSignupRequest_organization'
        user:
          allOf:
          - $ref: '#/components/schemas/v2.User'
          - required:
            - email
            - family_name
            - given_name
        entitlement:
          $ref: '#/components/schemas/PartnerSignupRequest_entitlement'
      required:
      - entitlement
      - organization
      type: object
    PartnerSignupResponse:
      description: The partner signup response
      example:
        organization_id: b3a17773-05cc-4431-9560-433fb4613da8
        display_message: "Your support plan will remain the same, to change the plan,\
          \ follow this [link](https://docs.confluent.io/cloud/current/faq.html#how-do-i-change-support-plans)."
        sso_url: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
      properties:
        organization_id:
          description: The ID of the organization
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
        sso_url:
          description: The login URL for the customer to access Confluent Cloud
          example: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
          format: uri
          type: string
        display_message:
          description: The display message contains useful information which is shown
            on the Marketplace UI to the customers.
          example: "Your support plan will remain the same, to change the plan, follow\
            \ this [link](https://docs.confluent.io/cloud/current/faq.html#how-do-i-change-support-plans)."
          type: string
      required:
      - organization_id
      - sso_url
      type: object
    ActivatePartnerSignupRequest:
      description: The partner signup activation request
      example:
        organization_id: b3a17773-05cc-4431-9560-433fb4613da8
        user: ""
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/v2.User'
          - required:
            - email
            - family_name
            - given_name
        organization_id:
          description: The ID of the organization
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
      required:
      - organization_id
      - user
      type: object
    PartnerLinkRequest:
      description: The partner linking request
      example:
        organization: null
        entitlement: null
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      properties:
        token:
          description: The linking token that was generated.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          type: string
          x-redact: true
        organization:
          $ref: '#/components/schemas/PartnerLinkRequest_organization'
        entitlement:
          $ref: '#/components/schemas/PartnerSignupRequest_entitlement'
      required:
      - entitlement
      - organization
      - token
      type: object
    v2.User:
      type: object
    networking.v1.Network:
      description: |-
        `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
        provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
        Shared networks can contain any cluster type.

        The API allows you to list, create, read, update, and delete your networks.


        Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

        ## The Networks Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Network
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_Network_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkSpec'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkStatus'
      type: object
    networking.v1.NetworkStatus:
      description: The status of the Network
      properties:
        phase:
          description: |
            The lifecyle phase of the network:

            PROVISIONING:  network provisioning is in progress;

            READY:  network is ready;

            FAILED: provisioning failed;

            DEPROVISIONING: network deprovisioning is in progress;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - READY
          - FAILED
          - DEPROVISIONING
        supported_connection_types:
          allOf:
          - $ref: '#/components/schemas/networking.v1.SupportedConnectionTypes'
          readOnly: true
        active_connection_types:
          allOf:
          - $ref: '#/components/schemas/networking.v1.ConnectionTypes'
          readOnly: true
        error_code:
          description: Error code if network is in a failed state. May be used for
            programmatic error checking.
          example: insufficient_capacity
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if network is in a failed state
          example: Could not provision cloud resources
          readOnly: true
          type: string
        dns_domain:
          description: The root DNS domain for the network if applicable. Present
            on networks that support PrivateLink.
          example: 00000.us-east-1.aws.glb.confluent.cloud
          readOnly: true
          type: string
        zonal_subdomains:
          additionalProperties:
            type: string
          description: |
            The DNS subdomain for each zone. Present on networks that support PrivateLink. Keys are zones and
            values are DNS domains.
          example:
            use1-az1: use1-az1.00000.us-east-1.aws.confluent.cloud
            use1-az4: use1-az4.00000.us-east-1.aws.confluent.cloud
            use1-az5: use1-az5.00000.us-east-1.aws.confluent.cloud
          readOnly: true
          type: object
        cloud:
          $ref: '#/components/schemas/networking_v1_NetworkStatus_cloud'
      readOnly: true
      required:
      - active_connection_types
      - phase
      - supported_connection_types
      type: object
    networking.v1.Peering:
      description: |-
        Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

        Related guide: [Peering Connections Overview](https://docs.confluent.io/cloud/current/networking/peering/overview.html).

        ## The Peerings Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `peerings_per_network` | Number of peerings per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Peering
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_Peering_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.PeeringSpec'
        status:
          $ref: '#/components/schemas/networking.v1.PeeringStatus'
      type: object
    networking.v1.PeeringStatus:
      description: The status of the Peering
      properties:
        phase:
          description: |
            The lifecycle phase of the peering:

              PROVISIONING: peering provisioning is in progress;

              PENDING_ACCEPT: peering connection request is pending acceptance by the customer;

              READY:  peering is ready;

              FAILED: peering is in a failed state;

              DEPROVISIONING: peering deprovisioning is in progress;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PENDING_ACCEPT
          - READY
          - FAILED
          - DEPROVISIONING
        error_code:
          description: Error code if peering is in a failed state. May be used for
            programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if peering is in a failed state
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.TransitGatewayAttachment:
      description: |-
        AWS Transit Gateway Attachments

        Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

        ## The Transit Gateway Attachments Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `tgw_attachments_per_network` | Number of TGW attachments per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - TransitGatewayAttachment
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_TransitGatewayAttachment_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentSpec'
        status:
          $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentStatus'
      type: object
    networking.v1.TransitGatewayAttachmentStatus:
      description: The status of the Transit Gateway Attachment
      properties:
        phase:
          description: |
            The lifecycle phase of the TGW attachment:

              PROVISIONING: attachment provisioning is in progress;

              PENDING_ACCEPT: attachment request is pending acceptance by the customer;

              READY:  attachment is ready;

              FAILED: attachment is in a failed state;

              DEPROVISIONING: attachment deprovisioning is in progress;

              DISCONNECTED: attachment was manually deleted directly in the cloud provider by the customer;

              ERROR: invalid customer input during attachment creation.
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - READY
          - PENDING_ACCEPT
          - FAILED
          - DEPROVISIONING
          - DISCONNECTED
          - ERROR
        error_code:
          description: Error code if TGW attachment is in a failed state. May be used
            for programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if TGW attachment is in a failed
            state
          readOnly: true
          type: string
        cloud:
          $ref: '#/components/schemas/networking_v1_TransitGatewayAttachmentStatus_cloud'
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.PrivateLinkAccess:
      description: |-
        Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

        Related guide: [Private Links Overview](https://docs.confluent.io/cloud/current/networking/private-links/index.html).

        ## The Private Link Accesses Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `private_link_accounts_per_network` | Number of AWS accounts per network |
        | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
        | `private_service_connect_projects_per_network` | Number of GCP projects per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - PrivateLinkAccess
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_PrivateLinkAccess_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.PrivateLinkAccessSpec'
        status:
          $ref: '#/components/schemas/networking.v1.PrivateLinkAccessStatus'
      type: object
    networking.v1.PrivateLinkAccessStatus:
      description: The status of the Private Link Access
      properties:
        phase:
          description: |
            The lifecycle phase of the PrivateLink access configuration:

              PROVISIONING: PrivateLink access provisioning is in progress;

              READY:  PrivateLink access is ready;

              FAILED: PrivateLink access is in a failed state;

              DEPROVISIONING: PrivateLink access deprovisioning is in progress;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - READY
          - FAILED
          - DEPROVISIONING
        error_code:
          description: Error code if PrivateLink access is in a failed state. May
            be used for programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if PrivateLink access is in a failed
            state
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.NetworkLinkService:
      description: |-
        List of incoming Network Link Enpoints associated with the Network Link Service.


        ## The Network Link Service Associations Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkService
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkService_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceSpec'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceStatus'
      type: object
    networking.v1.NetworkLinkServiceStatus:
      description: The status of the Network Link Service
      properties:
        phase:
          description: |
            The lifecycle phase of the network link service:

            READY:  network link service is ready;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - READY
        error_code:
          description: |
            Error code if network link service is in a failed state.
            May be used for programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if network link service is in a failed
            state
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.NetworkLinkEndpoint:
      description: |-
        A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
        Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
        It enables connectivity between the origin network and the target network.
        It can only be associated with a Private Link network.


        ## The Network Link Endpoints Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `network_link_endpoints_per_network` | Number of network link endpoints per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkEndpoint
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkEndpoint_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointSpec'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointStatus'
      type: object
    networking.v1.NetworkLinkEndpointStatus:
      description: The status of the Network Link Endpoint
      properties:
        phase:
          description: |
            The lifecycle phase of the network link endpoint:

              PROVISIONING: network link endpoint provisioning is in progress;

              PENDING_ACCEPT: network link endpoint request is pending acceptance by the the owner of the target;

              READY:  network link endpoint is ready;

              FAILED: network link endpoint is in a failed state;

              DEPROVISIONING: network link endpoint deprovisioning is in progress;

              EXPIRED: network link endpoint request is expired, can only be deleted;

              DISCONNECTED: network link endpoint is in a disconnected state, target owner has removed the permissions;

              DISCONNECTING: network link endpoint disconnection is in progress;

              INACTIVE: network link endpoint is created, but not active since there are no clusters in the network;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PENDING_ACCEPT
          - READY
          - FAILED
          - DEPROVISIONING
          - EXPIRED
          - DISCONNECTED
          - DISCONNECTING
          - INACTIVE
        error_code:
          description: Error code if network link is in a failed state. May be used
            for programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if network link is in a failed state
          readOnly: true
          type: string
        expires_at:
          description: The date and time when the request expires if it is not accepted
            by the target network admin.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.NetworkLinkServiceAssociation:
      description: |-
        List of incoming Network Link Enpoints associated with the Network Link Service.


        ## The Network Link Service Associations Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkServiceAssociation
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociation_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAssociationSpec'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAssociationStatus'
      type: object
    networking.v1.NetworkLinkServiceAssociationStatus:
      description: The status of the Network Link Service Association
      properties:
        phase:
          description: |
            The lifecycle phase of the network link endpoint:

              PROVISIONING: network link endpoint provisioning is in progress;

              PENDING_ACCEPT: network link endpoint request is pending acceptance by the the owner of the target;

              READY:  network link endpoint is ready;

              FAILED: network link endpoint is in a failed state;

              DEPROVISIONING: network link endpoint deprovisioning is in progress;

              EXPIRED: network link endpoint request is expired, can only be deleted;

              DISCONNECTED: network link endpoint is in a disconnected state, target owner has removed the permissions;

              DISCONNECTING: network link endpoint disconnection is in progress;

              INACTIVE: network link endpoint is created, but not active since there are no clusters in the network;
          example: READY
          readOnly: true
          type: string
          x-extensible-enum:
          - PROVISIONING
          - PENDING_ACCEPT
          - READY
          - FAILED
          - DEPROVISIONING
          - EXPIRED
          - DISCONNECTED
          - DISCONNECTING
          - INACTIVE
        error_code:
          description: Error code if network link is in a failed state. May be used
            for programmatic error checking.
          readOnly: true
          type: string
        error_message:
          description: Displayable error message if network link is in a failed state
          readOnly: true
          type: string
        expires_at:
          description: The date and time when the request expires if it is not accepted
            by the target network admin.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    networking.v1.AwsAccount:
      description: The AWS account ID
      example: "000000000000"
      pattern: "^\\d{12}$"
      type: string
    networking.v1.Cidr:
      description: IPv4 CIDR block
      example: 10.200.0.0/16
      pattern: ^\d+\.\d+\.\d+\.\d+/\d+$
      type: string
    networking.v1.DnsResolutionType:
      default: CHASED_PRIVATE
      description: Network DNS resolution type.
      type: string
      x-extensible-enum:
      - CHASED_PRIVATE
      - PRIVATE
    networking.v1.ConnectionType:
      description: Network connection type.
      example: PRIVATELINK
      type: string
      x-extensible-enum:
      - PEERING
      - TRANSITGATEWAY
      - PRIVATELINK
    networking.v1.ConnectionTypes:
      description: The connection types requested for use with the network.
      items:
        $ref: '#/components/schemas/networking.v1.ConnectionType'
      minItems: 1
      type: array
      uniqueItems: true
    networking.v1.SupportedConnectionTypes:
      description: The connection types this network supports.
      items:
        $ref: '#/components/schemas/networking.v1.ConnectionType'
      minItems: 1
      type: array
      uniqueItems: true
    networking.v1.DnsConfig:
      description: The network DNS config
      properties:
        resolution:
          allOf:
          - $ref: '#/components/schemas/networking.v1.DnsResolutionType'
          description: Network DNS resolution
      required:
      - resolution
      type: object
    networking.v1.AwsNetwork:
      description: The AWS network details.
      properties:
        kind:
          description: Network kind type.
          enum:
          - AwsNetwork
          type: string
        vpc:
          description: The Confluent Cloud VPC ID.
          example: vpc-00000000000000000
          readOnly: true
          type: string
        account:
          description: The AWS account ID associated with the Confluent Cloud VPC.
          example: "000000000000"
          readOnly: true
          type: string
        private_link_endpoint_service:
          description: The endpoint service of the Confluent Cloud VPC. (used for
            PrivateLink) if available.
          example: com.amazonaws.vpce.eu-west-3.vpce-00000000000000000
          readOnly: true
          type: string
      required:
      - account
      - kind
      - vpc
      type: object
    networking.v1.GcpNetwork:
      description: The GCP network details.
      properties:
        kind:
          description: Network kind type.
          enum:
          - GcpNetwork
          type: string
        project:
          description: The GCP Project ID associated with the Confluent Cloud VPC.
          example: cc-prod-3
          readOnly: true
          type: string
        vpc_network:
          description: The network name of the Confluent Cloud VPC.
          example: prod-network
          readOnly: true
          type: string
        private_service_connect_service_attachments:
          additionalProperties:
            type: string
          description: |
            The mapping of zones to Private Service Connect Service
            Attachments if available. Keys are zones and values are
            [GCP Private Service Connect Service
            Attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7)
          example:
            us-central1-a: projects/cc-prod/regions/us-central1/serviceAttachments/s-7jjm9-service-attachment-us-central1-a
            us-central1-b: projects/cc-prod/regions/us-central1/serviceAttachments/s-7jjm9-service-attachment-us-central1-b
            us-central1-c: projects/cc-prod/regions/us-central1/serviceAttachments/s-7jjm9-service-attachment-us-central1-c
          readOnly: true
          type: object
      required:
      - kind
      - project
      - vpc_network
      type: object
    networking.v1.AzureNetwork:
      description: The Azure network details.
      properties:
        kind:
          description: Network kind type.
          enum:
          - AzureNetwork
          type: string
        vnet:
          description: The resource ID of the Confluent Cloud VNet.
          example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/prod-group/providers/Microsoft.Network/virtualNetworks/prod-network
          readOnly: true
          type: string
        subscription:
          description: The Azure Subscription ID associated with the Confluent Cloud
            VPC.
          example: 00000000-0000-0000-0000-000000000000
          readOnly: true
          type: string
        private_link_service_aliases:
          additionalProperties:
            type: string
          description: |
            The mapping of zones to Private Link Service Aliases if available. Keys are zones
            and values are [Azure Private Link Service
            Aliases](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).
          example:
            "1": 0-00000-privatelink-1.00000000-0000-0000-0000-000000000000.westeurope.azure.privatelinkservice
            "2": 0-00000-privatelink-2.00000000-0000-0000-0000-000000000000.westeurope.azure.privatelinkservice
            "3": 0-00000-privatelink-3.00000000-0000-0000-0000-000000000000.westeurope.azure.privatelinkservice
          readOnly: true
          type: object
        private_link_service_resource_ids:
          additionalProperties:
            type: string
          description: |
            The mapping of zones to Private Link Service Resource IDs if available. Keys are zones
            and values are [Azure Private Link Service Resource
            IDs](https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview#share-your-service).
          example:
            "1": /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/0-00000/providers/Microsoft.Network/privateLinkServices/0-00000-privatelink-1
            "2": /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/0-00000/providers/Microsoft.Network/privateLinkServices/0-00000-privatelink-2
            "3": /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/0-00000/providers/Microsoft.Network/privateLinkServices/0-00000-privatelink-3
          readOnly: true
          type: object
      required:
      - kind
      - subscription
      - vnet
      type: object
    networking.v1.AwsPeering:
      description: AWS VPC Peering.
      properties:
        kind:
          description: Peering kind type.
          enum:
          - AwsPeering
          type: string
        account:
          allOf:
          - $ref: '#/components/schemas/networking.v1.AwsAccount'
          description: The AWS account ID associated with the VPC you are peering
            with Confluent Cloud network.
        vpc:
          description: The VPC ID you are peering with Confluent Cloud network.
          example: vpc-00000000000000000
          minLength: 1
          type: string
        routes:
          description: |
            The [CIDR blocks](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) of the VPC you are peering
            with Confluent Cloud network. This is used by Confluent Cloud network to route traffic back to your network.
            The CIDR block must be a private range and cannot overlap with the Confluent Cloud CIDR block.
          example:
          - 10.108.16.0/21
          items:
            $ref: '#/components/schemas/networking.v1.Cidr'
          type: array
        customer_region:
          description: The region of the VPC you are peering with Confluent Cloud
            network.
          example: us-east-1
          type: string
      required:
      - account
      - customer_region
      - kind
      - routes
      - vpc
      title: AWS
      type: object
    networking.v1.GcpPeering:
      description: GCP VPC Peering.
      properties:
        kind:
          description: Peering kind type.
          enum:
          - GcpPeering
          example: GcpPeering
          type: string
        project:
          description: |
            The Google Cloud project ID associated with the VPC that you are peering with Confluent Cloud network.
          example: my-gcp-project
          minLength: 1
          type: string
        vpc_network:
          description: The name of the VPC that you are peering with Confluent Cloud
            network.
          example: my-gcp-network
          minLength: 1
          type: string
        import_custom_routes:
          default: false
          description: |
            Enable customer route import. For more information, see
            [Importing custom routes](https://cloud.google.com/vpc/docs/vpc-peering#importing-exporting-routes).
          example: true
          type: boolean
      required:
      - kind
      - project
      - vpc_network
      title: GCP
      type: object
    networking.v1.AzurePeering:
      description: Azure VNet Peering.
      properties:
        kind:
          description: Peering kind type.
          enum:
          - AzurePeering
          type: string
        tenant:
          description: |
            The Azure Tenant ID in which your Azure Subscription exists.
            Represents an organization in Azure Active Directory. You can find your Azure Tenant ID in the Azure Portal
            under
            [Azure Active Directory](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).
            Must be a valid **32 character UUID string**.
          minLength: 1
          type: string
        vnet:
          description: "The resource ID of the VNet that you are peering with Confluent\
            \ Cloud. You can find the name of your Azure VNet in the [Azure Portal\
            \ on the Overview tab of your Azure Virtual Network](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Network%2FvirtualNetworks)."
          example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet
          minLength: 1
          type: string
        customer_region:
          description: The region of the VNet you are peering with Confluent Cloud
            network.
          example: eastus2
          type: string
      required:
      - customer_region
      - kind
      - tenant
      - vnet
      title: AZURE
      type: object
    networking.v1.AwsTransitGatewayAttachment:
      description: AWS Transit Gateway Attachment.
      properties:
        kind:
          description: AWS Transit Gateway Attachment kind type.
          enum:
          - AwsTransitGatewayAttachment
          type: string
        ram_share_arn:
          description: The full AWS Resource Name (ARN) for the AWS Resource Access
            Manager (RAM) Share of the Transit Gateways that you want Confluent Cloud
            to be attached to.
          example: arn:aws:ram:us-west-3:000000000000:resource-share/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx
          type: string
        transit_gateway_id:
          description: The ID of the AWS Transit Gateway that you want Confluent CLoud
            to be attached to.
          example: tgw-xxxxxxxxxxxxxxxxx
          type: string
        routes:
          description: List of destination routes.
          example:
          - 100.64.0.0/10
          - 10.0.0.0/8
          - 192.168.0.0/16
          - 172.16.0.0/12
          items:
            $ref: '#/components/schemas/networking.v1.Cidr'
          type: array
      required:
      - kind
      - ram_share_arn
      - routes
      - transit_gateway_id
      title: AWS
      type: object
    networking.v1.AwsTransitGatewayAttachmentStatus:
      description: AWS Transit Gateway Attachment details generated by AWS.
      properties:
        kind:
          description: AWS Transit Gateway Attachment Status kind type.
          enum:
          - AwsTransitGatewayAttachmentStatus
          type: string
        transit_gateway_attachment_id:
          description: The ID of the AWS Transit Gateway VPC Attachment that attaches
            Confluent VPC to Transit Gateway.
          example: tgw-attach-xxxxx
          readOnly: true
          type: string
      required:
      - transit_gateway_attachment_id
      title: AWS
      type: object
    networking.v1.AwsPrivateLinkAccess:
      description: AWS PrivateLink access configuration.
      properties:
        kind:
          description: PrivateLink kind type.
          enum:
          - AwsPrivateLinkAccess
          type: string
        account:
          allOf:
          - $ref: '#/components/schemas/networking.v1.AwsAccount'
          description: |
            The AWS account ID for the account containing the VPCs you want to connect from using AWS PrivateLink.
            You can find your AWS account ID [here] (https://console.aws.amazon.com/billing/home?#/account)
            under **My Account** in your AWS Management Console. Must be a **12 character string**.
      required:
      - account
      - kind
      title: AWS
      type: object
    networking.v1.AzurePrivateLinkAccess:
      description: Azure PrivateLink access configuration.
      properties:
        kind:
          description: PrivateLink kind type.
          enum:
          - AzurePrivateLinkAccess
          type: string
        subscription:
          description: |
            The Azure subscription ID for the account containing the VNets you want to connect from using
            Azure Private Link. You can find your Azure subscription ID in the subscription section of your
            [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade).
            Must be a valid **32 character UUID string**.
          minLength: 1
          type: string
      required:
      - kind
      - subscription
      title: AZURE
      type: object
    networking.v1.GcpPrivateServiceConnectAccess:
      description: GCP Private Service Connect access configuration.
      properties:
        kind:
          description: PrivateLink kind type.
          enum:
          - GcpPrivateServiceConnectAccess
          type: string
        project:
          description: |
            The GCP project ID for the account containing the VPCs that you want to connect from
            using Private Service Connect. You can find your Google Cloud Project ID under **Project ID** section of
            your [Google Cloud Console dashboard](https://console.cloud.google.com/home/dashboard).
          minLength: 1
          type: string
      required:
      - kind
      - project
      title: GCP
      type: object
    networking.v1.NetworkLinkServiceAcceptPolicy:
      description: |
        List of environments/networks from which connections can be accepted on this network link service.
      properties:
        environments:
          description: |
            List of environments from which connections can be accepted.
            All networks win the list of environment will be allowed.
          items:
            type: string
          type: array
          uniqueItems: true
        networks:
          description: |
            List of networks from which connections can be accepted.
          items:
            type: string
          type: array
          uniqueItems: true
      title: Network Link Service
      type: object
    networking.v1.ZonesInfo:
      description: Cloud provider zones metadata.
      items:
        $ref: '#/components/schemas/networking.v1.ZoneInfo'
      maxItems: 3
      minItems: 3
      type: array
      uniqueItems: true
    networking.v1.ZoneInfo:
      description: Cloud provider zone metadata.
      properties:
        zone_id:
          description: Cloud provider zone id
          example: use1-az3
          type: string
        cidr:
          description: |
            The IPv4 [CIDR block](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) to used for this network.
            Must be a `/27`. Required for VPC peering and AWS TransitGateway.
          example: 10.20.0.0/27
          type: string
      type: object
    networking.v1.NetworkList:
      description: |-
        `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
        provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
        Shared networks can contain any cluster type.

        The API allows you to list, create, read, update, and delete your networks.


        Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

        ## The Networks Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_NetworkList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.NetworkSpec:
      description: The desired state of the Network
      properties:
        display_name:
          description: The name of the network
          example: prod-aws-us-east1
          type: string
        cloud:
          description: The cloud service provider in which the network exists.
          example: AWS
          type: string
          x-extensible-enum:
          - AWS
          - GCP
          - AZURE
          x-immutable: true
        region:
          description: The cloud service provider region in which the network exists.
          example: us-east-1
          type: string
          x-immutable: true
        connection_types:
          allOf:
          - $ref: '#/components/schemas/networking.v1.ConnectionTypes'
          x-immutable: true
        cidr:
          allOf:
          - $ref: '#/components/schemas/networking.v1.Cidr'
          description: |
            The IPv4 [CIDR block](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) to used for this network.
            Must be `/16`. Required for VPC peering and AWS TransitGateway.
          example: 10.200.0.0/16
          x-immutable: true
        zones:
          description: |
            The 3 availability zones for this network. They can optionally be specified for AWS networks
            used with PrivateLink, for GCP networks used with Private Service Connect, and for AWS and GCP
            networks used with Peering.
            Otherwise, they are automatically chosen by Confluent Cloud.

            On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html)
             (e.g. use1-az3)

            On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones)
             (e.g. us-central1-c).

            On Azure, zones are Confluent-chosen names (e.g. 1, 2, 3) since Azure does not
             have universal zone identifiers.
          example:
          - use1-az1
          - use1-az2
          - use1-az3
          items:
            type: string
          maxItems: 3
          minItems: 3
          type: array
          uniqueItems: true
          x-immutable: true
        zones_info:
          allOf:
          - $ref: '#/components/schemas/networking.v1.ZonesInfo'
          description: |
            Each item represents information related to a single zone.

            Note - The attribute is in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        dns_config:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_dns_config'
        reserved_cidr:
          description: |
            The reserved CIDR config is used only by AWS networks with connection_types = Vpc_Peering or Transit_Gateway

            An IPv4 [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
              reserved for Confluent Cloud Network. Must be \24.
              If not specified, Confluent Cloud Network uses 172.20.255.0/24

            Note - The attribute is in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
          example: 172.20.255.0/24
          type: string
          x-immutable: true
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.PeeringList:
      description: |-
        Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

        Related guide: [Peering Connections Overview](https://docs.confluent.io/cloud/current/networking/peering/overview.html).

        ## The Peerings Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `peerings_per_network` | Number of peerings per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - PeeringList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_PeeringList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_PeeringList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.PeeringSpec:
      description: The desired state of the Peering
      properties:
        display_name:
          description: The name of the peering
          example: prod-peering-use1
          type: string
        cloud:
          $ref: '#/components/schemas/networking_v1_PeeringSpec_cloud'
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
        network:
          $ref: '#/components/schemas/networking_v1_PeeringSpec_network'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.TransitGatewayAttachmentList:
      description: |-
        AWS Transit Gateway Attachments

        Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

        ## The Transit Gateway Attachments Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `tgw_attachments_per_network` | Number of TGW attachments per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - TransitGatewayAttachmentList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_TransitGatewayAttachmentList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_TransitGatewayAttachmentList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.TransitGatewayAttachmentSpec:
      description: The desired state of the Transit Gateway Attachment
      properties:
        display_name:
          description: The name of the TGW attachment
          example: prod-tgw-use1
          type: string
        cloud:
          $ref: '#/components/schemas/networking_v1_TransitGatewayAttachmentSpec_cloud'
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
        network:
          $ref: '#/components/schemas/networking_v1_PeeringSpec_network'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.PrivateLinkAccessList:
      description: |-
        Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

        Related guide: [Private Links Overview](https://docs.confluent.io/cloud/current/networking/private-links/index.html).

        ## The Private Link Accesses Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `private_link_accounts_per_network` | Number of AWS accounts per network |
        | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
        | `private_service_connect_projects_per_network` | Number of GCP projects per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - PrivateLinkAccessList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_PrivateLinkAccessList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_PrivateLinkAccessList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.PrivateLinkAccessSpec:
      description: The desired state of the Private Link Access
      properties:
        display_name:
          description: The name of the PrivateLink access
          example: prod-pl-use1
          type: string
        cloud:
          $ref: '#/components/schemas/networking_v1_PrivateLinkAccessSpec_cloud'
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
        network:
          $ref: '#/components/schemas/networking_v1_PeeringSpec_network'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkLinkServiceList:
      description: |-
        List of incoming Network Link Enpoints associated with the Network Link Service.


        ## The Network Link Service Associations Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkServiceList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_NetworkLinkServiceList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.NetworkLinkServiceSpec:
      description: The desired state of the Network Link Service
      properties:
        display_name:
          description: The name of the network link service
          example: prod-net-1-nls
          type: string
        description:
          description: The description of the network link service
          example: Allow connections from analytics hub
          type: string
        accept:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceSpec_accept'
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
        network:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceSpec_network'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkLinkEndpointList:
      description: |-
        A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
        Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
        It enables connectivity between the origin network and the target network.
        It can only be associated with a Private Link network.


        ## The Network Link Endpoints Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `network_link_endpoints_per_network` | Number of network link endpoints per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkEndpointList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.NetworkLinkEndpointSpec:
      description: The desired state of the Network Link Endpoint
      properties:
        display_name:
          description: The name of the network link endpoint
          example: prod-net-1-nle
          type: string
        description:
          description: The description of the network link endpoint
          example: Connect to Network - analytics hub
          type: string
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
        network:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceSpec_network'
        network_link_service:
          $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointSpec_network_link_service'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkLinkServiceAssociationList:
      description: |-
        List of incoming Network Link Enpoints associated with the Network Link Service.


        ## The Network Link Service Associations Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkServiceAssociationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociationList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociationList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    networking.v1.NetworkLinkServiceAssociationSpec:
      description: The desired state of the Network Link Service Association
      properties:
        display_name:
          description: The name of the network link endpoint
          example: prod-net-1-nle
          readOnly: true
          type: string
        description:
          description: The description of the network link endpoint
          example: Connect to Network - analytics hub
          readOnly: true
          type: string
        network_link_endpoint:
          description: ID of the Network link endpoint.
          example: prod-net-1-nle
          readOnly: true
          type: string
        network_link_service:
          $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointSpec_network_link_service'
        environment:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    iam.v2.IdentityProvider:
      description: |-
        `IdentityProvider` objects represent external OAuth/OpenID Connect providers within
        Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Identity Provider.


        Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

        ## The Identity Providers Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `identity_providers_per_org` | Number of Identity Providers per organization |
        | `public_keys_per_provider` | Number of public keys saved per Identity Provider |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IdentityProvider
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_IdentityProvider_metadata'
        display_name:
          description: The name of the Provider.
          example: My OIDC Provider
          type: string
        description:
          description: A description for your provider
          type: string
        state:
          description: The current state of the provider
          example: ENABLED
          readOnly: true
          type: string
          x-extensible-enum:
          - ENABLED
        issuer:
          description: |-
            A publicly reachable issuer URI for the Identity Provider.
            The unique issuer URI string represents the entity for issuing tokens.
          example: "https://login.microsoftonline.com/{tenantid}/v2.0"
          format: uri
          type: string
          x-immutable: true
        jwks_uri:
          description: |-
            A publicly reachable JSON Web Key Set (JWKS) URI for the Identity Provider.
            A JSON Web Key Set (JWKS) provides a set of keys containing the public keys
            used to verify any JSON Web Token (JWT) issued by your OAuth 2.0 identity provider.
          example: https://login.microsoftonline.com/common/discovery/v2.0/keys
          format: uri
          type: string
          x-immutable: true
        keys:
          description: The JWKS provided by the Provider. We only express the `kid`
            and `alg` for each key set
          items:
            $ref: '#/components/schemas/iam.v2.JwksObject'
          readOnly: true
          type: array
      type: object
    iam.v2.Jwks:
      description: |-
        `JWKS` objects represent public key sets for a specific OAuth/OpenID Connect provider within
        Confluent Cloud.

        The API allows you to refresh JWKS public key data.


        Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

        ## The Jwks Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Jwks" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Jwks
          readOnly: true
          type: string
        spec:
          $ref: '#/components/schemas/iam.v2.JwksSpec'
        status:
          $ref: '#/components/schemas/iam.v2.JwksStatus'
      type: object
    iam.v2.JwksStatus:
      description: The status of the Jwks
      properties:
        jwks_status:
          description: The actual state of the public key data
          example: REFRESHED
          type: string
          x-extensible-enum:
          - REFRESHED
          - OK
          - INVALID_JWKS_URI
          - ERROR_FETCHING_JWKS
        jwks_last_refresh_at:
          description: The last successful refresh time for the public key data
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          type: string
      readOnly: true
      type: object
    iam.v2.IdentityPool:
      description: |-
        `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
        that authorizes them to Confluent Cloud resources.

        It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
        is then used to provide access to Confluent Resources.


        Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

        ## The Identity Pools Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IdentityPool
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_IdentityPool_metadata'
        display_name:
          description: The name of the `IdentityPool`.
          example: My Identity Pool
          type: string
        description:
          description: A description of how this `IdentityPool` is used
          example: Prod Access to Kafka clusters to Release Engineering
          type: string
        identity_claim:
          description: |-
            The JSON Web Token (JWT) claim to extract the authenticating identity to Confluent resources from
            (see [Registered Claim Names](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1) for more details).
            This appears in the audit log records, showing, for example, that "identity Z used identity pool X to access
            topic A".
          example: claims.sub
          type: string
        filter:
          description: "A filter expression in [Supported Common Expression Language\
            \ (CEL)](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#supported-common-expression-language-cel-filters)\
            \ that specifies which identities can authenticate using your identity\
            \ pool (see [Set identity pool filters](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html#set-identity-pool-filters)\
            \ for more details)."
          example: claims.aud=="confluent" && claims.group!="invalid_group"
          maxLength: 300
          type: string
        principal:
          description: Represents the federated identity associated with this pool.
          example: pool-abc
          readOnly: true
          type: string
        state:
          description: The current state of the identity pool
          example: ENABLED
          readOnly: true
          type: string
          x-extensible-enum:
          - ENABLED
      type: object
    iam.v2.JwksObject:
      description: '`JWKS` contains the published keys for the given OpenIDProvider'
      properties:
        kty:
          description: Specifies the cryptographic algorithm family used with the
            key
          example: RSA
          type: string
          x-extensible-enum:
          - RSA
        kid:
          description: Specifies the key-id issued by the OpenIDProvider for the particular
            tenant
          example: nOo3ZDrODXEK1jKWhXslHR_KXEg
          type: string
        alg:
          description: Specifies the algorithm to be used to generate the public key
          example: RS256
          type: string
        use:
          description: Specifies the intended usage of the key
          example: sig
          type: string
        "n":
          description: Specifies the modulus of the RSA public key. Represented as
            a Base64urlUInt-encoded value
          type: string
        e:
          description: Specifies the exponent of the RSA public key.
          example: AQAB
          type: string
      required:
      - alg
      - kid
      - kty
      type: object
    iam.v2.IdentityProviderList:
      description: |-
        `IdentityProvider` objects represent external OAuth/OpenID Connect providers within
        Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Identity Provider.


        Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

        ## The Identity Providers Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `identity_providers_per_org` | Number of Identity Providers per organization |
        | `public_keys_per_provider` | Number of public keys saved per Identity Provider |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IdentityProviderList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_IdentityProviderList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_IdentityProviderList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.JwksSpec:
      description: The desired state of the Jwks
      properties:
        jwks_status:
          description: The desired state of the public key data
          example: REFRESHED
          type: string
          x-extensible-enum:
          - REFRESHED
      type: object
      x-enable-id: false
      x-enable-listmeta: true
      x-enable-objectmeta: false
    iam.v2.IdentityPoolList:
      description: |-
        `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
        that authorizes them to Confluent Cloud resources.

        It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
        is then used to provide access to Confluent Resources.


        Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

        ## The Identity Pools Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IdentityPoolList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_IdentityPoolList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/iam_v2_IdentityPoolList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    sts.v1.TokenExchangeRequest:
      description: token exchange request parameters
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sts/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - TokenExchangeRequest
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/sts_v1_TokenExchangeRequest_metadata'
        grant_type:
          description: |
            The grant type. Must be urn:ietf:params:oauth:grant-type:token-exchange, which indicates a token exchange.
          example: urn:ietf:params:oauth:grant-type:token-exchange
          type: string
          x-extensible-enum:
          - urn:ietf:params:oauth:grant-type:token-exchange
        subject_token:
          description: Confluent Cloud only accepts JSON Web Token (JWT) access tokens
            from customer identity provider
          example: test_jwt_token
          type: string
        identity_pool_id:
          description: |
            Identity pool is a group of external identities that are assigned a certain level of access based on policy
          example: pool_1
          type: string
        subject_token_type:
          description: |
            An identifier for the type of requested security token. Supported values
            is urn:ietf:params:oauth:token-type:jwt.
          example: urn:ietf:params:oauth:token-type:jwt
          type: string
          x-extensible-enum:
          - urn:ietf:params:oauth:token-type:jwt
        requested_token_type:
          description: |
            An identifier for the type of requested security token.
            Supported values is urn:ietf:params:oauth:token-type:access_token.
          example: urn:ietf:params:oauth:token-type:access_token
          type: string
          x-extensible-enum:
          - urn:ietf:params:oauth:token-type:access_token
        expires_in:
          default: 900
          description: |
            The amount of time, in seconds, between the time when the access token was issued
            and the time when the access token will expire
          format: int32
          maximum: 900
          type: integer
      type: object
    sts.v1.TokenExchangeReply:
      description: token exchange response
      example:
        access_token: access_token
        issued_token_type: urn:ietf:params:oauth:token-type:access_token
        token_type: Bearer
        expires_in: 3600
      properties:
        access_token:
          description: |
            An JWT access token, issued by Confluent, in response to the token exchange request.
            Client application could use the access token to access confluent public api
          type: string
        issued_token_type:
          description: The token type. Always matches the value of requested_token_type
            from the request.
          example: urn:ietf:params:oauth:token-type:access_token
          type: string
          x-extensible-enum:
          - urn:ietf:params:oauth:token-type:access_token
        token_type:
          description: Indicates the token type value. The only type that Confluent
            supports is Bearer
          example: Bearer
          type: string
          x-extensible-enum:
          - Bearer
        expires_in:
          description: "The length of time, in seconds, that the access token is valid."
          example: 3600
          format: int32
          type: integer
      required:
      - access_token
      - expires_in
      - issued_token_type
      - token_type
      type: object
    kafka-quotas.v1.ClientQuota:
      description: |-
        `ClientQuota` objects represent Client Quotas you can set at the service account level.

        The API allows you to list, create, read, update, and delete your client quotas.


        Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

        ## The Client Quotas Model
        <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - kafka-quotas/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClientQuota
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuota_metadata'
        spec:
          $ref: '#/components/schemas/kafka-quotas.v1.ClientQuotaSpec'
      type: object
    kafka-quotas.v1.Throughput:
      description: Quotas on maximum throughput
      properties:
        ingress_byte_rate:
          description: Ingress throughput limit for principals specified in bytes
            per second.
          example: "5"
          format: int64
          type: string
        egress_byte_rate:
          description: Egress throughput limit for principals specified in bytes per
            second.
          example: "5"
          format: int64
          type: string
      required:
      - egress_byte_rate
      - ingress_byte_rate
    kafka-quotas.v1.ClientQuotaList:
      description: |-
        `ClientQuota` objects represent Client Quotas you can set at the service account level.

        The API allows you to list, create, read, update, and delete your client quotas.


        Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

        ## The Client Quotas Model
        <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - kafka-quotas/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClientQuotaList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    kafka-quotas.v1.ClientQuotaSpec:
      description: The desired state of the Client Quota
      properties:
        display_name:
          description: The name of the client quota.
          example: QuotaForSA1
          type: string
        description:
          description: A human readable description for the client quota.
          example: This quota defines limits on how much the target principals can
            use cluster lkc-xxxxx
          type: string
        throughput:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaSpec_throughput'
        cluster:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaSpec_cluster'
        principals:
          description: |
            A list of principals to apply a client quota to.
            Use `"<default>"` to apply a client quota to all service accounts
            (see [Control application usage with Client Quotas](https://docs.confluent.io/cloud/current/clusters/client-quotas.html#control-application-usage-with-client-quotas) for more details).
          items:
            $ref: '#/components/schemas/GlobalObjectReference'
          minItems: 1
          type: array
        environment:
          $ref: '#/components/schemas/ksqldbcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    sd.v1.Pipeline:
      description: |-
        `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
        The pipeline's content is available separately.

        The API allows you to create, retrieve, update, and delete your pipelines,
        as well as list all of your pipelines for the particular environment and Kafka cluster.


        Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

        ## The Pipelines Model
        <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
        | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sd/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Pipeline
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/sd_v1_Pipeline_metadata'
        spec:
          $ref: '#/components/schemas/sd.v1.PipelineSpec'
        status:
          $ref: '#/components/schemas/sd.v1.PipelineStatus'
      type: object
    sd.v1.PipelineStatus:
      description: The status of the Pipeline
      properties:
        state:
          description: |
            The current state of the pipeline.:
              DRAFT:  the pipeline is a draft and not activated yet;
              ACTIVATING:  the pipeline activation is in progress;
              DEACTIVATING:  the pipeline deactivation is in progress;
              ACTIVE:  the pipeline is actived and running;
              FAILED:  the pipeline activation or deactivation failed;
              DELETED:  the pipeline is deleted
          readOnly: true
          type: string
          x-extensible-enums:
          - DRAFT
          - ACTIVATING
          - DEACTIVATING
          - ACTIVE
          - FAILED
          - DELETED
        topic_count:
          description: The number of Kafka topics defined in the pipeline.
          format: int32
          readOnly: true
          type: integer
        connector_count:
          description: The number of connectors defined in the pipeline.
          format: int32
          readOnly: true
          type: integer
        query_count:
          description: The number of KSQL queries defined in the pipeline.
          format: int32
          readOnly: true
          type: integer
      readOnly: true
      type: object
    sd.v1.SourceCodeObject:
      description: A object containing pipeline's source code definition.
      properties:
        sql:
          description: A list of KSQL statements that defines a pipeline.
          example: |
            CREATE STREAM `upstream` (id INTEGER, name STRING)
              WITH (kafka_topic = 'topic', partitions=1, value_format='JSON');
            CREATE STREAM `downstream` AS SELECT * FROM upstream;
          type: string
      required:
      - sql
      type: object
    sd.v1.PipelineList:
      description: |-
        `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
        The pipeline's content is available separately.

        The API allows you to create, retrieve, update, and delete your pipelines,
        as well as list all of your pipelines for the particular environment and Kafka cluster.


        Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

        ## The Pipelines Model
        <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
        | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sd/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - PipelineList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/sd_v1_PipelineList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/sd_v1_PipelineList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    sd.v1.PipelineSpec:
      description: The desired state of the Pipeline
      properties:
        display_name:
          description: The name of the pipeline.
          example: MyFirstPipeline
          maxLength: 64
          pattern: "^[a-zA-Z0-9-_.!~*'()]{1,64}$"
          type: string
        description:
          description: The description of the pipeline.
          example: My first pipeline
          type: string
        retained_topic_names:
          description: |
            A list of Kafka topic names from the activated pipeline to be retained when
            this pipeline is deactivated.
          example:
          - topic1
          - topic2
          items:
            type: string
          type: array
        activated:
          default: false
          description: The desired state of the pipeline.
          type: boolean
        activation_privilege:
          default: false
          description: Whether the pipeline has privileges to be activated.
          type: boolean
        source_code:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_source_code'
        secrets:
          additionalProperties:
            type: string
          description: A map of secrets used in the pipeline source code.
          example:
            secret_name_1: secret1
            secret_name_2: secret2
          type: object
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
        kafka_cluster:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_kafka_cluster'
        ksql_cluster:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_ksql_cluster'
        stream_governance_cluster:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_stream_governance_cluster'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    byok.v1.Key:
      description: |-
        `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

        Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS and Azure.
        This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


        Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

        ## The Keys Model
        <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - byok/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Key
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/byok_v1_Key_metadata'
        key:
          $ref: '#/components/schemas/byok_v1_Key_key'
        provider:
          description: The cloud provider of the Key.
          example: AWS
          readOnly: true
          type: string
          x-extensible-enum:
          - AWS
          - AZURE
        state:
          description: |
            The state of the key:
              AVAILABLE: key can be used for a Kafka cluster provisioning
              IN_USE: key is already in use by a Kafka cluster provisioning
          example: IN_USE
          readOnly: true
          type: string
          x-extensible-enum:
          - AVAILABLE
          - IN_USE
      type: object
    byok.v1.AwsKey:
      description: |
        The AWS BYOK details
      properties:
        key_arn:
          description: |
            The Amazon Resource Name (ARN) of an AWS KMS key.
          example: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
          type: string
          x-immutable: true
        roles:
          description: |
            The Amazon Resource Names (ARNs) of IAM Roles created for this key-environment combination.
          example:
          - arn:aws:iam::123456789876:role/block_storage_manager
          - arn:aws:iam::987654321234:role/cc-kafka-1111aaaa-11aa-11aa-11aa-111111aaaaaa
          items:
            type: string
          readOnly: true
          type: array
        kind:
          description: |
            BYOK kind type.
          enum:
          - AwsKey
          type: string
          x-immutable: true
      required:
      - key_arn
      - kind
      type: object
    byok.v1.AzureKey:
      description: |
        The Azure BYOK details.
      properties:
        application_id:
          description: |
            The Application ID created for this key-environment combination.
          readOnly: true
          type: string
        key_id:
          description: |
            The unique Key Object Identifier URL without version of an Azure Key Vault key.
          example: https://vault-name.vault.azure.net/keys/key-name
          type: string
          x-immutable: true
        key_vault_id:
          description: |
            Key Vault ID containing the key
          example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup-name/providers/Microsoft.KeyVault/vaults/vault-name
          type: string
          x-immutable: true
        kind:
          description: |
            BYOK kind type.
          enum:
          - AzureKey
          type: string
          x-immutable: true
        tenant_id:
          description: |
            Tenant ID (uuid) hosting the Key Vault containing the key
          example: 00000000-0000-0000-0000-000000000000
          type: string
          x-immutable: true
      required:
      - key_id
      - key_vault_id
      - kind
      - tenant_id
      type: object
    byok.v1.KeyList:
      description: |-
        `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

        Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS and Azure.
        This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


        Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

        ## The Keys Model
        <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - byok/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - KeyList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/byok_v1_KeyList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/byok_v1_KeyList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    billing.v1.Cost:
      description: |-
        `Cost` objects represent the aggregated billing costs for an organization


        ## The Costs Model
        <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - billing/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cost
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        start_date:
          description: Start date of time period (inclusive) to retrieve billing costs.
            It is represented in RFC3339 format and is in UTC.
          example: 2022-10-12
          format: date
          type: string
        end_date:
          description: End date of time period (exclusive) to retrieve billing costs.
            It is represented in RFC3339 format and is in UTC.
          example: 2022-10-15
          format: date
          type: string
        granularity:
          default: DAILY
          description: Granularity at which each line item is aggregated.
          type: string
          x-extensible-enum:
          - DAILY
        network_access_type:
          description: Network access type for the cluster.
          example: INTERNET
          type: string
          x-extensible-enum:
          - INTERNET
          - TRANSIT_GATEWAY
          - PRIVATE_LINK
          - PEERED_VPC
        product:
          description: Product name.
          example: KAFKA
          type: string
          x-extensible-enum:
          - KAFKA
          - CONNECT
          - KSQL
          - AUDIT_LOG
          - STREAM_GOVERNANCE
          - CLUSTER_LINK
          - CUSTOM_CONNECT
          - SUPPORT_CLOUD_BASIC
          - SUPPORT_CLOUD_DEVELOPER
          - SUPPORT_CLOUD_BUSINESS
          - SUPPORT_CLOUD_PREMIER
        line_type:
          description: Type of the line item.
          example: KAFKA_NUM_CKUS
          type: string
          x-extensible-enum:
          - KAFKA_STORAGE
          - KAFKA_PARTITION
          - KAFKA_NETWORK_READ
          - KAFKA_NETWORK_WRITE
          - KAFKA_BASE
          - KAFKA_NUM_CKUS
          - KAFKA_REST_PRODUCE
          - KSQL_NUM_CSUS
          - CONNECT_CAPACITY
          - CONNECT_NUM_TASKS
          - CONNECT_THROUGHPUT
          - CONNECT_NUM_RECORDS
          - SUPPORT
          - CLUSTER_LINKING_PER_LINK
          - CLUSTER_LINKING_WRITE
          - CLUSTER_LINKING_READ
          - AUDIT_LOG_READ
          - GOVERNANCE_BASE
          - SCHEMA_REGISTRY
          - PROMO_CREDIT
          - CUSTOM_CONNECT_NUM_TASKS
          - CUSTOM_CONNECT_THROUGHPUT
        price:
          description: Price for the line item in dollars.
          example: 1.5
          format: double
          type: number
        unit:
          description: Unit of the line item.
          example: GB
          type: string
        quantity:
          description: Quantity of the line item.
          example: 99.95
          format: double
          type: number
        original_amount:
          description: Original amount accrued for this line item.
          example: 99.95
          format: double
          type: number
        discount_amount:
          description: Amount discounted from the original amount in dollars.
          example: 20.95
          format: double
          type: number
        amount:
          description: Final amount after deducting discounts.
          example: 79
          format: double
          type: number
        resource:
          $ref: '#/components/schemas/billing_v1_Cost_resource'
      type: object
    billing.v1.Resource:
      description: |
        The resource associated with this object. The resource can be one of Kafka Cluster ID (example: lkc-12345),
        Connector ID (example:
            lcc-12345), Schema Registry Cluster ID (example: lsrc-12345), or ksqlDB Cluster ID
        (example: lksqlc-12345).
        May be null or omitted if not associated with a resource.
      properties:
        id:
          description: ID of the resource.
          example: lkc-12345
          type: string
        display_name:
          description: Display name of the resource.
          example: prod-kafka-cluster
          type: string
        environment:
          $ref: '#/components/schemas/billing_v1_Resource_environment'
      type: object
    billing.v1.Environment:
      description: |
        The details of the environment for a given resource.
      properties:
        id:
          description: ID of the environment.
          example: env-123
          type: string
      type: object
    billing.v1.CostList:
      description: |-
        `Cost` objects represent the aggregated billing costs for an organization


        ## The Costs Model
        <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - billing/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - CostList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/billing_v1_CostList_metadata'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/billing_v1_CostList_data_inner'
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    iam.v2.ApiKeySpecUpdate:
      description: The desired state of the Api Key
      properties:
        display_name:
          description: A human readable name for the API key
          example: CI kafka access key
          type: string
        description:
          description: A human readable description for the API key
          example: This API key provides kafka access to cluster x
          type: string
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    iam.v2.ApiKeyUpdate:
      description: |-
        `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
        of API keys represent access to a single cluster/resource such as a Kafka cluster,
        Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
        that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

        The API allows you to list, create, update and delete your API Keys.


        Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

        ## The API Keys Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ApiKey
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ApiKey_metadata'
        spec:
          $ref: '#/components/schemas/iam.v2.ApiKeySpecUpdate'
      type: object
    iam.v2.UserUpdate:
      description: |-
        `User` objects represent individuals who may access your Confluent resources.

        The API allows you to retrieve, update, and delete individual users, as well as list of all your
        users. This API cannot be used to create new user accounts.


        Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

        ## The Users Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `users_per_org` | Users in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - User
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_User_metadata'
        full_name:
          description: The user's full name
          example: Marty McFly
          type: string
        auth_type:
          description: The user's authentication method
          example: AUTH_TYPE_SSO
          readOnly: true
          type: string
          x-extensible-enum:
          - AUTH_TYPE_LOCAL
          - AUTH_TYPE_SSO
      type: object
    iam.v2.ServiceAccountUpdate:
      description: |-
        `ServiceAccount` objects are typically used to represent applications and other non-human principals
        that may access your Confluent resources.

        The API allows you to create, retrieve, update, and delete individual service accounts, as well as
        list all your service accounts.


        Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

        ## The Service Accounts Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ServiceAccount
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_ServiceAccount_metadata'
        description:
          description: A free-form description of the Service Account
          example: Doc's repair bot for the DeLorean
          type: string
      type: object
    notifications.v1.SubscriptionUpdate:
      description: |-
        `Subscription` objects represent the intent of the customers to get notifications of particular types.
        A subscription is created for a particular `NotificationType` and the user will get notifications on the
        `Integrations` that are provided while creating the subscription.

        This API allows you to create, retrieve, and update subscriptions,
        as well as to view the list of all your subscriptions. You can also delete subscriptions
        with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


        Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

        ## The Subscriptions Model
        <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - notifications/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Subscription
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/notifications_v1_Subscription_metadata'
        current_state:
          description: |
            Denotes the state of the subscription. When the subscription is ENABLED, the user will receive
            notification on the configured Integrations. If the subscription is DISABLED, the user will not
            recieve any notification for the configured notification type. Note that, you cannot disable
            a subscription for `REQUIRED` notification type.
          example: ENABLED
          type: string
          x-extensible-enum:
          - ENABLED
          - DISABLED
        integrations:
          description: Integrations to which notifications are to be sent.
          items:
            $ref: '#/components/schemas/GlobalObjectReference'
          minItems: 1
          type: array
      type: object
    cmk.v2.ClusterSpecUpdate:
      description: The desired state of the Cluster
      properties:
        display_name:
          description: The name of the cluster.
          example: ProdKafkaCluster
          type: string
        availability:
          default: SINGLE_ZONE
          description: |
            The availability zone configuration of the cluster
            Note: The availability zone can be updated from Single to Multi-Zone for Basic and Standard clusters
            but cannot be downgraded from Multi-Zone to Single Zone.
          example: SINGLE_ZONE
          type: string
          x-extensible-enum:
          - MULTI_ZONE
          - SINGLE_ZONE
        config:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_config'
        environment:
          $ref: '#/components/schemas/cmk_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    cmk.v2.ClusterUpdate:
      description: |-
        `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Kafka clusters.


        Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - cmk/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cluster
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/cmk_v2_Cluster_metadata'
        spec:
          $ref: '#/components/schemas/cmk.v2.ClusterSpecUpdate'
        status:
          $ref: '#/components/schemas/cmk.v2.ClusterStatus'
      type: object
    srcm.v2.ClusterSpecUpdate:
      description: The desired state of the Cluster
      properties:
        package:
          description: |
            The billing package.

            Note: Clusters can be upgraded from ESSENTIALS to ADVANCED, but cannot be
            downgraded from ADVANCED to ESSENTIALS.
          example: ESSENTIALS
          type: string
          x-extensible-enum:
          - ESSENTIALS
          - ADVANCED
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    srcm.v2.ClusterUpdate:
      description: |-
        `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

        The API allows you to list, create, read, and delete your Schema Registry clusters.


        Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

        ## The Clusters Model
        <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - srcm/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Cluster
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/srcm_v2_Cluster_metadata'
        spec:
          $ref: '#/components/schemas/srcm.v2.ClusterSpecUpdate'
        status:
          $ref: '#/components/schemas/srcm.v2.ClusterStatus'
      type: object
    networking.v1.NetworkSpecUpdate:
      description: The desired state of the Network
      properties:
        display_name:
          description: The name of the network
          example: prod-aws-us-east1
          type: string
        zones_info:
          allOf:
          - $ref: '#/components/schemas/networking.v1.ZonesInfo'
          description: |
            Each item represents information related to a single zone.

            Note - The attribute is in a [Limited Availability lifecycle stage](https://docs.confluent.io/cloud/current/api.html#section/Versioning/API-Lifecycle-Policy)
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkUpdate:
      description: |-
        `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
        provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
        Shared networks can contain any cluster type.

        The API allows you to list, create, read, update, and delete your networks.


        Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

        ## The Networks Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Network
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_Network_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkStatus'
      type: object
    networking.v1.PeeringSpecUpdate:
      description: The desired state of the Peering
      properties:
        display_name:
          description: The name of the peering
          example: prod-peering-use1
          type: string
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.PeeringUpdate:
      description: |-
        Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

        Related guide: [Peering Connections Overview](https://docs.confluent.io/cloud/current/networking/peering/overview.html).

        ## The Peerings Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `peerings_per_network` | Number of peerings per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Peering
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_Peering_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.PeeringSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.PeeringStatus'
      type: object
    networking.v1.TransitGatewayAttachmentSpecUpdate:
      description: The desired state of the Transit Gateway Attachment
      properties:
        display_name:
          description: The name of the TGW attachment
          example: prod-tgw-use1
          type: string
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.TransitGatewayAttachmentUpdate:
      description: |-
        AWS Transit Gateway Attachments

        Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

        ## The Transit Gateway Attachments Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `tgw_attachments_per_network` | Number of TGW attachments per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - TransitGatewayAttachment
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_TransitGatewayAttachment_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentStatus'
      type: object
    networking.v1.PrivateLinkAccessSpecUpdate:
      description: The desired state of the Private Link Access
      properties:
        display_name:
          description: The name of the PrivateLink access
          example: prod-pl-use1
          type: string
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.PrivateLinkAccessUpdate:
      description: |-
        Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

        Related guide: [Private Links Overview](https://docs.confluent.io/cloud/current/networking/private-links/index.html).

        ## The Private Link Accesses Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `private_link_accounts_per_network` | Number of AWS accounts per network |
        | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
        | `private_service_connect_projects_per_network` | Number of GCP projects per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - PrivateLinkAccess
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_PrivateLinkAccess_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.PrivateLinkAccessSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.PrivateLinkAccessStatus'
      type: object
    networking.v1.NetworkLinkServiceSpecUpdate:
      description: The desired state of the Network Link Service
      properties:
        display_name:
          description: The name of the network link service
          example: prod-net-1-nls
          type: string
        description:
          description: The description of the network link service
          example: Allow connections from analytics hub
          type: string
        accept:
          $ref: '#/components/schemas/networking_v1_NetworkLinkServiceSpec_accept'
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkLinkServiceUpdate:
      description: |-
        List of incoming Network Link Enpoints associated with the Network Link Service.


        ## The Network Link Service Associations Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkService
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkService_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkLinkServiceStatus'
      type: object
    networking.v1.NetworkLinkEndpointSpecUpdate:
      description: The desired state of the Network Link Endpoint
      properties:
        display_name:
          description: The name of the network link endpoint
          example: prod-net-1-nle
          type: string
        description:
          description: The description of the network link endpoint
          example: Connect to Network - analytics hub
          type: string
        environment:
          $ref: '#/components/schemas/srcm_v2_ClusterSpec_environment'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    networking.v1.NetworkLinkEndpointUpdate:
      description: |-
        A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
        Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
        It enables connectivity between the origin network and the target network.
        It can only be associated with a Private Link network.


        ## The Network Link Endpoints Model
        <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `network_link_endpoints_per_network` | Number of network link endpoints per network |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - networking/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - NetworkLinkEndpoint
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/networking_v1_NetworkLinkEndpoint_metadata'
        spec:
          $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointSpecUpdate'
        status:
          $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointStatus'
      type: object
    iam.v2.IdentityProviderUpdate:
      description: |-
        `IdentityProvider` objects represent external OAuth/OpenID Connect providers within
        Confluent Cloud.

        The API allows you to list, create, read, update, and delete your Identity Provider.


        Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

        ## The Identity Providers Model
        <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `identity_providers_per_org` | Number of Identity Providers per organization |
        | `public_keys_per_provider` | Number of public keys saved per Identity Provider |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - iam/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - IdentityProvider
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/iam_v2_IdentityProvider_metadata'
        display_name:
          description: The name of the Provider.
          example: My OIDC Provider
          type: string
        description:
          description: A description for your provider
          type: string
        state:
          description: The current state of the provider
          example: ENABLED
          readOnly: true
          type: string
          x-extensible-enum:
          - ENABLED
        keys:
          description: The JWKS provided by the Provider. We only express the `kid`
            and `alg` for each key set
          items:
            $ref: '#/components/schemas/iam.v2.JwksObject'
          readOnly: true
          type: array
      type: object
    kafka-quotas.v1.ClientQuotaSpecUpdate:
      description: The desired state of the Client Quota
      properties:
        display_name:
          description: The name of the client quota.
          example: QuotaForSA1
          type: string
        description:
          description: A human readable description for the client quota.
          example: This quota defines limits on how much the target principals can
            use cluster lkc-xxxxx
          type: string
        throughput:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaSpec_throughput'
        principals:
          description: |
            A list of principals to apply a client quota to.
            Use `"<default>"` to apply a client quota to all service accounts
            (see [Control application usage with Client Quotas](https://docs.confluent.io/cloud/current/clusters/client-quotas.html#control-application-usage-with-client-quotas) for more details).
          items:
            $ref: '#/components/schemas/GlobalObjectReference'
          minItems: 1
          type: array
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    kafka-quotas.v1.ClientQuotaUpdate:
      description: |-
        `ClientQuota` objects represent Client Quotas you can set at the service account level.

        The API allows you to list, create, read, update, and delete your client quotas.


        Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

        ## The Client Quotas Model
        <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - kafka-quotas/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ClientQuota
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/kafka_quotas_v1_ClientQuota_metadata'
        spec:
          $ref: '#/components/schemas/kafka-quotas.v1.ClientQuotaSpecUpdate'
      type: object
    sd.v1.PipelineSpecUpdate:
      description: The desired state of the Pipeline
      properties:
        display_name:
          description: The name of the pipeline.
          example: MyFirstPipeline
          maxLength: 64
          pattern: "^[a-zA-Z0-9-_.!~*'()]{1,64}$"
          type: string
        description:
          description: The description of the pipeline.
          example: My first pipeline
          type: string
        retained_topic_names:
          description: |
            A list of Kafka topic names from the activated pipeline to be retained when
            this pipeline is deactivated.
          example:
          - topic1
          - topic2
          items:
            type: string
          type: array
        activated:
          default: false
          description: The desired state of the pipeline.
          type: boolean
        activation_privilege:
          default: false
          description: Whether the pipeline has privileges to be activated.
          type: boolean
        source_code:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_source_code'
        secrets:
          additionalProperties:
            type: string
          description: A map of secrets used in the pipeline source code.
          example:
            secret_name_1: secret1
            secret_name_2: secret2
          type: object
        environment:
          $ref: '#/components/schemas/networking_v1_NetworkSpec_environment'
        kafka_cluster:
          $ref: '#/components/schemas/sd_v1_PipelineSpec_kafka_cluster'
      type: object
      x-enable-id: true
      x-enable-listmeta: true
      x-enable-objectmeta: true
    sd.v1.PipelineUpdate:
      description: |-
        `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
        The pipeline's content is available separately.

        The API allows you to create, retrieve, update, and delete your pipelines,
        as well as list all of your pipelines for the particular environment and Kafka cluster.


        Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

        ## The Pipelines Model
        <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

        ## Quotas and Limits
        This resource is subject to the following quotas:

        | Quota | Description |
        | --- | --- |
        | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
        | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sd/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Pipeline
          readOnly: true
          type: string
        id:
          description: "ID is the \"natural identifier\" for an object within its\
            \ scope/namespace; it is normally unique across time but not space. That\
            \ is, you can assume that the ID will not be reclaimed and reused after\
            \ an object is deleted (\"time\"); however, it may collide with IDs for\
            \ other object `kinds` or objects of the same `kind` within a different\
            \ scope/namespace (\"space\")."
          example: dlz-f3a90de
          maxLength: 255
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/sd_v1_Pipeline_metadata'
        spec:
          $ref: '#/components/schemas/sd.v1.PipelineSpecUpdate'
        status:
          $ref: '#/components/schemas/sd.v1.PipelineStatus'
      type: object
    listIamV2ApiKeys_200_response_allOf_data_inner_spec:
      properties:
        owner:
          example:
            id: u-a83k9b
            related: https://api.confluent.cloud/iam/v2/users/u-a83k9b
            resource_name: https://api.confluent.cloud/user=u-a83k9b
        resource:
          example:
            id: lkc-c29js0
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-c29js0
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-c29js0
          nullable: true
      type: object
    listIamV2ApiKeys_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listIamV2ApiKeys_200_response_allOf_data_inner_spec'
    listIamV2ApiKeys_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listIamV2ApiKeys_200_response_allOf_data_inner'
          type: array
      type: object
    listIamV2ApiKeys_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ApiKeyList'
      - $ref: '#/components/schemas/listIamV2ApiKeys_200_response_allOf'
    createIamV2ApiKey_request_allOf:
      properties:
        spec:
          required:
          - owner
          type: object
      required:
      - spec
      type: object
    createIamV2ApiKey_request_allOf_1_spec:
      properties:
        owner:
          example:
            id: u-a83k9b
        resource:
          example:
            id: lkc-c29js0
          nullable: true
      type: object
    createIamV2ApiKey_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createIamV2ApiKey_request_allOf_1_spec'
      type: object
    createIamV2ApiKey_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ApiKey'
      - $ref: '#/components/schemas/createIamV2ApiKey_request_allOf'
      - $ref: '#/components/schemas/createIamV2ApiKey_request_allOf_1'
    createIamV2ApiKey_202_response_allOf:
      properties:
        spec:
          $ref: '#/components/schemas/listIamV2ApiKeys_200_response_allOf_data_inner_spec'
      type: object
    createIamV2ApiKey_202_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ApiKey'
      - $ref: '#/components/schemas/createIamV2ApiKey_request_allOf'
      - $ref: '#/components/schemas/createIamV2ApiKey_202_response_allOf'
    getIamV2ApiKey_200_response_allOf:
      properties:
        spec:
          required:
          - owner
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      type: object
    getIamV2ApiKey_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ApiKey'
      - $ref: '#/components/schemas/getIamV2ApiKey_200_response_allOf'
      - $ref: '#/components/schemas/createIamV2ApiKey_202_response_allOf'
    listOrgV2Environments_200_response:
      allOf:
      - $ref: '#/components/schemas/org.v2.EnvironmentList'
    createOrgV2Environment_request:
      allOf:
      - $ref: '#/components/schemas/org.v2.Environment'
      - required:
        - display_name
        type: object
    getOrgV2Environment_200_response:
      allOf:
      - $ref: '#/components/schemas/org.v2.Environment'
      - required:
        - api_version
        - display_name
        - id
        - kind
        type: object
    listOrgV2Organizations_200_response:
      allOf:
      - $ref: '#/components/schemas/org.v2.OrganizationList'
    getOrgV2Organization_200_response:
      allOf:
      - $ref: '#/components/schemas/org.v2.Organization'
      - required:
        - api_version
        - display_name
        - id
        - kind
        type: object
    listIamV2Users_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.UserList'
    getIamV2User_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.User'
      - required:
        - api_version
        - email
        - id
        - kind
        type: object
    listIamV2ServiceAccounts_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ServiceAccountList'
    createIamV2ServiceAccount_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ServiceAccount'
      - required:
        - display_name
        type: object
    getIamV2ServiceAccount_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ServiceAccount'
      - required:
        - api_version
        - display_name
        - id
        - kind
        type: object
    listIamV2Invitations_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.InvitationList'
    createIamV2Invitation_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.Invitation'
      - required:
        - email
        type: object
    getIamV2Invitation_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.Invitation'
      - required:
        - api_version
        - email
        - id
        - kind
        type: object
    listIamV2RoleBindings_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.RoleBindingList'
    createIamV2RoleBinding_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.RoleBinding'
      - required:
        - crn_pattern
        - principal
        - role_name
        type: object
    getIamV2RoleBinding_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.RoleBinding'
      - required:
        - api_version
        - crn_pattern
        - id
        - kind
        - principal
        - role_name
        type: object
    listNotificationsV1Subscriptions_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.SubscriptionList'
    createNotificationsV1Subscription_request:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Subscription'
      - required:
        - integrations
        - notification_type
        type: object
    getNotificationsV1Subscription_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Subscription'
      - required:
        - api_version
        - id
        - integrations
        - kind
        - notification_type
        type: object
    listNotificationsV1Integrations_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.IntegrationList'
    createNotificationsV1Integration_request:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Integration'
      - required:
        - display_name
        - target
        type: object
    getNotificationsV1Integration_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Integration'
      - required:
        - api_version
        - display_name
        - id
        - kind
        - target
        type: object
    listNotificationsV1NotificationTypes_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.NotificationTypeList'
    getNotificationsV1NotificationType_200_response:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.NotificationType'
      - required:
        - api_version
        - category
        - description
        - display_name
        - id
        - is_included_in_plan
        - kind
        - severity
        - subscription_priority
        type: object
    listCmkV2Clusters_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
        network:
          example:
            id: n-00000
            related: https://api.confluent.cloud/networking/v1/networks/n-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-00000
        byok:
          example:
            id: cck-00000
            related: https://api.confluent.cloud/byok/v1/keys/cck-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/key=cck-00000
      type: object
    listCmkV2Clusters_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listCmkV2Clusters_200_response_allOf_data_inner_spec'
    listCmkV2Clusters_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listCmkV2Clusters_200_response_allOf_data_inner'
          type: array
      type: object
    listCmkV2Clusters_200_response:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.ClusterList'
      - $ref: '#/components/schemas/listCmkV2Clusters_200_response_allOf'
    createCmkV2Cluster_request_allOf:
      properties:
        spec:
          required:
          - availability
          - cloud
          - config
          - display_name
          - environment
          - region
          type: object
      required:
      - spec
      type: object
    createCmkV2Cluster_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
        network:
          example:
            id: n-00000
        byok:
          example:
            id: cck-00000
      type: object
    createCmkV2Cluster_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createCmkV2Cluster_request_allOf_1_spec'
      type: object
    createCmkV2Cluster_request:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.Cluster'
      - $ref: '#/components/schemas/createCmkV2Cluster_request_allOf'
      - $ref: '#/components/schemas/createCmkV2Cluster_request_allOf_1'
    createCmkV2Cluster_202_response_allOf:
      properties:
        spec:
          required:
          - availability
          - cloud
          - config
          - display_name
          - environment
          - region
          type: object
      required:
      - spec
      - status
      type: object
    createCmkV2Cluster_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listCmkV2Clusters_200_response_allOf_data_inner_spec'
      type: object
    createCmkV2Cluster_202_response:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.Cluster'
      - $ref: '#/components/schemas/createCmkV2Cluster_202_response_allOf'
      - $ref: '#/components/schemas/createCmkV2Cluster_202_response_allOf_1'
    getCmkV2Cluster_200_response_allOf:
      properties:
        spec:
          required:
          - availability
          - cloud
          - config
          - display_name
          - environment
          - region
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getCmkV2Cluster_200_response:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.Cluster'
      - $ref: '#/components/schemas/getCmkV2Cluster_200_response_allOf'
      - $ref: '#/components/schemas/createCmkV2Cluster_202_response_allOf_1'
    updateCmkV2Cluster_request_allOf_spec:
      properties:
        environment:
          example:
            id: env-00000
      required:
      - environment
      type: object
    updateCmkV2Cluster_request_allOf:
      properties:
        spec:
          $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf_spec'
      required:
      - spec
      type: object
    updateCmkV2Cluster_request:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.ClusterUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listKsqldbcmV2Clusters_200_response_allOf_data_inner_spec:
      properties:
        kafka_cluster:
          example:
            id: lkc-00000
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-00000
        credential_identity:
          example:
            id: u-a83k9b
            related: https://api.confluent.cloud/iam/v2/users/u-a83k9b
            resource_name: https://api.confluent.cloud/user=u-a83k9b
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/org/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
      type: object
    listKsqldbcmV2Clusters_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listKsqldbcmV2Clusters_200_response_allOf_data_inner_spec'
    listKsqldbcmV2Clusters_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listKsqldbcmV2Clusters_200_response_allOf_data_inner'
          type: array
      type: object
    listKsqldbcmV2Clusters_200_response:
      allOf:
      - $ref: '#/components/schemas/ksqldbcm.v2.ClusterList'
      - $ref: '#/components/schemas/listKsqldbcmV2Clusters_200_response_allOf'
    createKsqldbcmV2Cluster_request_allOf:
      properties:
        spec:
          required:
          - credential_identity
          - csu
          - display_name
          - environment
          - kafka_cluster
          type: object
      required:
      - spec
      type: object
    createKsqldbcmV2Cluster_request_allOf_1_spec:
      properties:
        kafka_cluster:
          example:
            id: lkc-00000
        credential_identity:
          example:
            id: u-a83k9b
        environment:
          example:
            id: env-00000
      type: object
    createKsqldbcmV2Cluster_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createKsqldbcmV2Cluster_request_allOf_1_spec'
      type: object
    createKsqldbcmV2Cluster_request:
      allOf:
      - $ref: '#/components/schemas/ksqldbcm.v2.Cluster'
      - $ref: '#/components/schemas/createKsqldbcmV2Cluster_request_allOf'
      - $ref: '#/components/schemas/createKsqldbcmV2Cluster_request_allOf_1'
    createKsqldbcmV2Cluster_202_response_allOf:
      properties:
        spec:
          required:
          - credential_identity
          - csu
          - display_name
          - environment
          - kafka_cluster
          type: object
      required:
      - spec
      - status
      type: object
    createKsqldbcmV2Cluster_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listKsqldbcmV2Clusters_200_response_allOf_data_inner_spec'
      type: object
    createKsqldbcmV2Cluster_202_response:
      allOf:
      - $ref: '#/components/schemas/ksqldbcm.v2.Cluster'
      - $ref: '#/components/schemas/createKsqldbcmV2Cluster_202_response_allOf'
      - $ref: '#/components/schemas/createKsqldbcmV2Cluster_202_response_allOf_1'
    getKsqldbcmV2Cluster_200_response_allOf:
      properties:
        spec:
          required:
          - credential_identity
          - csu
          - display_name
          - environment
          - kafka_cluster
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getKsqldbcmV2Cluster_200_response:
      allOf:
      - $ref: '#/components/schemas/ksqldbcm.v2.Cluster'
      - $ref: '#/components/schemas/getKsqldbcmV2Cluster_200_response_allOf'
      - $ref: '#/components/schemas/createKsqldbcmV2Cluster_202_response_allOf_1'
    createConnectv1Connector_request_config:
      additionalProperties:
        description: Other configuration parameters for the connector. All values
          should be strings. See the connector's docs for details.
        type: string
      description: Configuration parameters for the connector. All values should be
        strings.
      properties:
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - name
      type: object
      x-redact: true
    createConnectv1Connector_request:
      properties:
        name:
          description: Name of the connector to create.
          type: string
        config:
          $ref: '#/components/schemas/createConnectv1Connector_request_config'
      type: object
    createConnectv1Connector_400_response:
      properties:
        code:
          type: integer
        message:
          type: string
      type: object
    createConnectv1Connector_500_response:
      properties:
        error_code:
          type: integer
        message:
          type: string
      type: object
    getConnectv1ConnectorConfig_200_response:
      additionalProperties:
        description: Other configuration parameters for the connector. See the connector's
          docs for the list of options.
        type: string
      description: Configuration parameters for the connector.
      example:
        connector.class: connector.class
        kafka.api.key: kafka.api.key
        cloud.provider: cloud.provider
        kafka.region: kafka.region
        kafka.api.secret: kafka.api.secret
        kafka.endpoint: kafka.endpoint
        name: name
        cloud.environment: private
      properties:
        cloud.environment:
          description: The cloud environment type.
          enum:
          - private
          - devel
          - stag
          - prod
          type: string
        cloud.provider:
          description: "The cloud service provider, e.g. aws, azure, etc."
          type: string
          x-extensible-enum:
          - aws
          - azure
          - gcp
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.endpoint:
          description: The kafka cluster endpoint.
          type: string
        kafka.region:
          description: The kafka cluster region.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - cloud.environment
      - cloud.provider
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - kafka.endpoint
      - kafka.region
      - name
      type: object
    createOrUpdateConnectv1ConnectorConfig_request:
      additionalProperties:
        description: Other configuration parameters for the connector. All values
          should be strings. See the connector's docs for details.
        type: string
      description: Configuration parameters for the connector.
      properties:
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - name
      type: object
    deleteConnectv1Connector_200_response:
      example:
        error: "{}"
      properties:
        error:
          nullable: true
          type: object
      type: object
    readConnectv1ConnectorStatus_200_response_connector:
      description: The map containing connector status.
      example:
        trace: trace
        state: NONE
        worker_id: worker_id
      properties:
        state:
          description: The state of the connector.
          enum:
          - NONE
          - PROVISIONING
          - RUNNING
          - DEGRADED
          - FAILED
          - PAUSED
          - DELETED
          type: string
        worker_id:
          description: The worker ID of the connector.
          type: string
        trace:
          description: The exception name in case of error.
          type: string
      required:
      - state
      - worker_id
      type: object
    readConnectv1ConnectorStatus_200_response_tasks_inner:
      example:
        msg: msg
        id: 0
        state: state
        worker_id: worker_id
      properties:
        id:
          description: The ID of task.
          type: integer
        state:
          description: The state of the task.
          type: string
        worker_id:
          description: The worker ID of the task.
          type: string
        msg:
          type: string
      required:
      - id
      - state
      - worker_id
      type: object
    readConnectv1ConnectorStatus_200_response:
      example:
        connector:
          trace: trace
          state: NONE
          worker_id: worker_id
        name: name
        type: sink
        tasks:
        - msg: msg
          id: 0
          state: state
          worker_id: worker_id
        - msg: msg
          id: 0
          state: state
          worker_id: worker_id
      properties:
        name:
          description: The name of the connector.
          type: string
        type:
          description: "Type of connector, sink or source."
          enum:
          - sink
          - source
          type: string
        connector:
          $ref: '#/components/schemas/readConnectv1ConnectorStatus_200_response_connector'
        tasks:
          description: The map containing the task status.
          items:
            $ref: '#/components/schemas/readConnectv1ConnectorStatus_200_response_tasks_inner'
          type: array
      required:
      - connector
      - name
      - type
      type: object
    listConnectv1ConnectorPlugins_200_response_inner:
      example:
        type: sink
        class: class
        version: version
      properties:
        class:
          description: The connector class name. E.g. BigQuerySink.
          type: string
        type:
          description: "Type of connector, sink or source."
          enum:
          - sink
          - source
          type: string
        version:
          description: The version string for the connector available.
          type: string
      required:
      - class
      - type
      type: object
    validateConnectv1ConnectorPlugin_200_response_configs_inner_definition:
      description: "The definition for a config in the connector plugin, which includes\
        \ the name, type, importance, etc."
      example:
        importance: NONE
        documentation: documentation
        name: name
        width: NONE
        alias: alias
        default_value: default_value
        dependents:
        - dependents
        - dependents
        type: NONE
        display_name: display_name
        required: true
        group: group
        order: 6
      properties:
        name:
          description: The name of the configuration
          type: string
        type:
          description: The config types
          enum:
          - NONE
          - BOOLEAN
          - INT
          - SHORT
          - LONG
          - DOUBLE
          - STRING
          - LIST
          - ENUM
          - PASSWORD
          type: string
        required:
          description: Whether this configuration is required
          type: boolean
        default_value:
          description: Default value for this configuration
          type: string
        importance:
          description: The importance level for a configuration
          enum:
          - NONE
          - HIGH
          - MEDIUM
          - LOW
          type: string
        documentation:
          description: The documentation for the configuration
          type: string
        group:
          description: The UI group to which the configuration belongs to
          type: string
        width:
          description: The width of a configuration value
          enum:
          - NONE
          - SHORT
          - MEDIUM
          - LONG
          type: string
        display_name:
          type: string
        dependents:
          description: Other configurations on which this configuration is dependent
          items:
            type: string
          type: array
        order:
          description: The order of configuration in specified group
          type: integer
        alias:
          type: string
      type: object
    validateConnectv1ConnectorPlugin_200_response_configs_inner_value:
      description: "The current value for a config, which includes the name, value,\
        \ recommended values, etc."
      example:
        recommended_values:
        - recommended_values
        - recommended_values
        visible: true
        name: name
        value: value
        errors:
        - errors
        - errors
      properties:
        name:
          description: The name of the configuration
          type: string
        value:
          description: The value for the configuration
          type: string
        recommended_values:
          description: The list of valid values for the configuration
          items:
            type: string
          type: array
        errors:
          description: "Errors, if any, in the configuration value"
          items:
            type: string
          type: array
        visible:
          description: |-
            The visibility of the configuration. Based on the values of other configuration
            fields, this visibility boolean value points out if the current field should be
            visible or not.
          type: boolean
      type: object
    validateConnectv1ConnectorPlugin_200_response_configs_inner:
      example:
        metadata: "{}"
        definition:
          importance: NONE
          documentation: documentation
          name: name
          width: NONE
          alias: alias
          default_value: default_value
          dependents:
          - dependents
          - dependents
          type: NONE
          display_name: display_name
          required: true
          group: group
          order: 6
        value:
          recommended_values:
          - recommended_values
          - recommended_values
          visible: true
          name: name
          value: value
          errors:
          - errors
          - errors
      properties:
        definition:
          $ref: '#/components/schemas/validateConnectv1ConnectorPlugin_200_response_configs_inner_definition'
        value:
          $ref: '#/components/schemas/validateConnectv1ConnectorPlugin_200_response_configs_inner_value'
        metadata:
          description: |-
            Map of metadata details about the connector configuration, such as type of
            input, etc.
          type: object
      type: object
    validateConnectv1ConnectorPlugin_200_response:
      example:
        configs:
        - metadata: "{}"
          definition:
            importance: NONE
            documentation: documentation
            name: name
            width: NONE
            alias: alias
            default_value: default_value
            dependents:
            - dependents
            - dependents
            type: NONE
            display_name: display_name
            required: true
            group: group
            order: 6
          value:
            recommended_values:
            - recommended_values
            - recommended_values
            visible: true
            name: name
            value: value
            errors:
            - errors
            - errors
        - metadata: "{}"
          definition:
            importance: NONE
            documentation: documentation
            name: name
            width: NONE
            alias: alias
            default_value: default_value
            dependents:
            - dependents
            - dependents
            type: NONE
            display_name: display_name
            required: true
            group: group
            order: 6
          value:
            recommended_values:
            - recommended_values
            - recommended_values
            visible: true
            name: name
            value: value
            errors:
            - errors
            - errors
        name: name
        groups:
        - groups
        - groups
        error_count: 0
      properties:
        name:
          description: The class name of the connector plugin.
          type: string
        groups:
          description: The list of groups used in configuration definitions.
          items:
            type: string
          type: array
        error_count:
          description: The total number of errors encountered during configuration
            validation.
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/validateConnectv1ConnectorPlugin_200_response_configs_inner'
          type: array
      type: object
    deleteKafkaAcls_200_response:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/AclData'
          type: array
      required:
      - data
      type: object
    listServiceQuotaV1AppliedQuotas_200_response_allOf_data_inner:
      properties:
        user:
          example:
            id: u-4voj5e
            related: https://api.confluent.cloud/v2/users/u-4voj5e
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-4voj5e
        organization:
          example:
            id: b3a17773-05cc-4431-9560-433fb4613da8
            related: https://api.confluent.cloud/partner/v2/organizations/b3a17773-05cc-4431-9560-433fb4613da8
            resource_name: https://api.confluent.cloud/organization=b3a17773-05cc-4431-9560-433fb4613da8
          nullable: true
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/org/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
          nullable: true
        network:
          example:
            id: n-12034
            related: https://api.confluent.cloud/networking/v1/networks/n-12034
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-12034
          nullable: true
        kafka_cluster:
          example:
            id: lkc-00000
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-00000
          nullable: true
    listServiceQuotaV1AppliedQuotas_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listServiceQuotaV1AppliedQuotas_200_response_allOf_data_inner'
          type: array
      type: object
    listServiceQuotaV1AppliedQuotas_200_response:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.AppliedQuotaList'
      - $ref: '#/components/schemas/listServiceQuotaV1AppliedQuotas_200_response_allOf'
    getServiceQuotaV1AppliedQuota_200_response_allOf:
      properties:
        user:
          example:
            id: u-4voj5e
            related: https://api.confluent.cloud/v2/users/u-4voj5e
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-4voj5e
        organization:
          example:
            id: b3a17773-05cc-4431-9560-433fb4613da8
            related: https://api.confluent.cloud/partner/v2/organizations/b3a17773-05cc-4431-9560-433fb4613da8
            resource_name: https://api.confluent.cloud/organization=b3a17773-05cc-4431-9560-433fb4613da8
          nullable: true
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/org/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
          nullable: true
        network:
          example:
            id: n-12034
            related: https://api.confluent.cloud/networking/v1/networks/n-12034
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-12034
          nullable: true
        kafka_cluster:
          example:
            id: lkc-00000
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-00000
          nullable: true
      type: object
    getServiceQuotaV1AppliedQuota_200_response:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.AppliedQuota'
      - required:
        - api_version
        - applied_limit
        - default_limit
        - display_name
        - id
        - kind
        - scope
        type: object
      - $ref: '#/components/schemas/getServiceQuotaV1AppliedQuota_200_response_allOf'
    listServiceQuotaV1Scopes_200_response:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.ScopeList'
    getServiceQuotaV1Scope_200_response:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.Scope'
      - required:
        - api_version
        - description
        - id
        - kind
        type: object
    createPartnerV2Entitlement_request:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Entitlement'
      - required:
        - external_id
        - name
        - plan_id
        - product_id
        type: object
    listSrcmV2Regions_200_response:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.RegionList'
    getSrcmV2Region_200_response_allOf:
      properties:
        spec:
          required:
          - cloud
          - display_name
          - packages
          - region_name
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      type: object
    getSrcmV2Region_200_response:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Region'
      - $ref: '#/components/schemas/getSrcmV2Region_200_response_allOf'
    listSrcmV2Clusters_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
        region:
          example:
            id: sgreg-00000
            related: https://api.confluent.cloud/srcm/v2/regions/sgreg-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/region=sgreg-00000
      type: object
    listSrcmV2Clusters_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listSrcmV2Clusters_200_response_allOf_data_inner_spec'
    listSrcmV2Clusters_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listSrcmV2Clusters_200_response_allOf_data_inner'
          type: array
      type: object
    listSrcmV2Clusters_200_response:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.ClusterList'
      - $ref: '#/components/schemas/listSrcmV2Clusters_200_response_allOf'
    createSrcmV2Cluster_request_allOf:
      properties:
        spec:
          required:
          - environment
          - package
          - region
          type: object
      required:
      - spec
      type: object
    createSrcmV2Cluster_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
        region:
          example:
            id: sgreg-00000
      type: object
    createSrcmV2Cluster_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createSrcmV2Cluster_request_allOf_1_spec'
      type: object
    createSrcmV2Cluster_request:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Cluster'
      - $ref: '#/components/schemas/createSrcmV2Cluster_request_allOf'
      - $ref: '#/components/schemas/createSrcmV2Cluster_request_allOf_1'
    createSrcmV2Cluster_202_response_allOf:
      properties:
        spec:
          required:
          - environment
          - package
          - region
          type: object
      required:
      - spec
      - status
      type: object
    createSrcmV2Cluster_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listSrcmV2Clusters_200_response_allOf_data_inner_spec'
      type: object
    createSrcmV2Cluster_202_response:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Cluster'
      - $ref: '#/components/schemas/createSrcmV2Cluster_202_response_allOf'
      - $ref: '#/components/schemas/createSrcmV2Cluster_202_response_allOf_1'
    getSrcmV2Cluster_200_response_allOf:
      properties:
        spec:
          required:
          - environment
          - package
          - region
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getSrcmV2Cluster_200_response:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Cluster'
      - $ref: '#/components/schemas/getSrcmV2Cluster_200_response_allOf'
      - $ref: '#/components/schemas/createSrcmV2Cluster_202_response_allOf_1'
    updateSrcmV2Cluster_request:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.ClusterUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    getPartnerV2Organization_200_response:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Organization'
      - required:
        - api_version
        - id
        - kind
        - metadata
        type: object
    listNetworkingV1Networks_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
      type: object
    listNetworkingV1Networks_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1Networks_200_response_allOf_data_inner_spec'
    listNetworkingV1Networks_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listNetworkingV1Networks_200_response_allOf_data_inner'
          type: array
      type: object
    listNetworkingV1Networks_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkList'
      - $ref: '#/components/schemas/listNetworkingV1Networks_200_response_allOf'
    createNetworkingV1Network_request_allOf:
      properties:
        spec:
          required:
          - cloud
          - connection_types
          - environment
          - region
          type: object
      required:
      - spec
      type: object
    createNetworkingV1Network_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
      type: object
    createNetworkingV1Network_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createNetworkingV1Network_request_allOf_1_spec'
      type: object
    createNetworkingV1Network_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Network'
      - $ref: '#/components/schemas/createNetworkingV1Network_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Network_request_allOf_1'
    createNetworkingV1Network_202_response_allOf:
      properties:
        spec:
          required:
          - cloud
          - connection_types
          - environment
          - region
          type: object
      required:
      - spec
      - status
      type: object
    createNetworkingV1Network_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1Networks_200_response_allOf_data_inner_spec'
      type: object
    createNetworkingV1Network_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Network'
      - $ref: '#/components/schemas/createNetworkingV1Network_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Network_202_response_allOf_1'
    getNetworkingV1Network_200_response_allOf:
      properties:
        spec:
          required:
          - cloud
          - connection_types
          - environment
          - region
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getNetworkingV1Network_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Network'
      - $ref: '#/components/schemas/getNetworkingV1Network_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Network_202_response_allOf_1'
    updateNetworkingV1Network_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1Peerings_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
        network:
          example:
            id: n-00000
            related: https://api.confluent.cloud/networking/v1/networks/n-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-00000
      type: object
    listNetworkingV1Peerings_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf_data_inner_spec'
    listNetworkingV1Peerings_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf_data_inner'
          type: array
      type: object
    listNetworkingV1Peerings_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PeeringList'
      - $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf'
    createNetworkingV1Peering_request_allOf:
      properties:
        spec:
          required:
          - cloud
          - environment
          - network
          type: object
      required:
      - spec
      type: object
    createNetworkingV1Peering_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
        network:
          example:
            id: n-00000
      type: object
    createNetworkingV1Peering_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf_1_spec'
      type: object
    createNetworkingV1Peering_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Peering'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf_1'
    createNetworkingV1Peering_202_response_allOf:
      properties:
        spec:
          required:
          - cloud
          - environment
          - network
          type: object
      required:
      - spec
      - status
      type: object
    createNetworkingV1Peering_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf_data_inner_spec'
      type: object
    createNetworkingV1Peering_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Peering'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    getNetworkingV1Peering_200_response_allOf:
      properties:
        spec:
          required:
          - cloud
          - environment
          - network
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getNetworkingV1Peering_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Peering'
      - $ref: '#/components/schemas/getNetworkingV1Peering_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    updateNetworkingV1Peering_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PeeringUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1TransitGatewayAttachments_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentList'
      - $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf'
    createNetworkingV1TransitGatewayAttachment_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachment'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf_1'
    createNetworkingV1TransitGatewayAttachment_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachment'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    getNetworkingV1TransitGatewayAttachment_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachment'
      - $ref: '#/components/schemas/getNetworkingV1Peering_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    updateNetworkingV1TransitGatewayAttachment_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachmentUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1PrivateLinkAccesses_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccessList'
      - $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf'
    createNetworkingV1PrivateLinkAccess_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccess'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf_1'
    createNetworkingV1PrivateLinkAccess_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccess'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    getNetworkingV1PrivateLinkAccess_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccess'
      - $ref: '#/components/schemas/getNetworkingV1Peering_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    updateNetworkingV1PrivateLinkAccess_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccessUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1NetworkLinkServices_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceList'
      - $ref: '#/components/schemas/listNetworkingV1Peerings_200_response_allOf'
    createNetworkingV1NetworkLinkService_request_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          type: object
      required:
      - spec
      type: object
    createNetworkingV1NetworkLinkService_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkService'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkService_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_request_allOf_1'
    createNetworkingV1NetworkLinkService_202_response_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          type: object
      required:
      - spec
      - status
      type: object
    createNetworkingV1NetworkLinkService_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkService'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkService_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    getNetworkingV1NetworkLinkService_200_response_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getNetworkingV1NetworkLinkService_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkService'
      - $ref: '#/components/schemas/getNetworkingV1NetworkLinkService_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1Peering_202_response_allOf_1'
    updateNetworkingV1NetworkLinkService_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1NetworkLinkEndpoints_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
        network:
          example:
            id: n-00000
            related: https://api.confluent.cloud/networking/v1/networks/n-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-00000
        network_link_service:
          example:
            id: nls-abcde
            related: https://api.confluent.cloud/networking/v1/network-link-services/nls-abcde
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/network-link-service=nls-abcde
      type: object
    listNetworkingV1NetworkLinkEndpoints_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1NetworkLinkEndpoints_200_response_allOf_data_inner_spec'
    listNetworkingV1NetworkLinkEndpoints_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listNetworkingV1NetworkLinkEndpoints_200_response_allOf_data_inner'
          type: array
      type: object
    listNetworkingV1NetworkLinkEndpoints_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointList'
      - $ref: '#/components/schemas/listNetworkingV1NetworkLinkEndpoints_200_response_allOf'
    createNetworkingV1NetworkLinkEndpoint_request_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          - network_link_service
          type: object
      required:
      - spec
      type: object
    createNetworkingV1NetworkLinkEndpoint_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
        network:
          example:
            id: n-00000
        network_link_service:
          example:
            id: nls-abcde
      type: object
    createNetworkingV1NetworkLinkEndpoint_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_request_allOf_1_spec'
      type: object
    createNetworkingV1NetworkLinkEndpoint_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpoint'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_request_allOf'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_request_allOf_1'
    createNetworkingV1NetworkLinkEndpoint_202_response_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          - network_link_service
          type: object
      required:
      - spec
      - status
      type: object
    createNetworkingV1NetworkLinkEndpoint_202_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1NetworkLinkEndpoints_200_response_allOf_data_inner_spec'
      type: object
    createNetworkingV1NetworkLinkEndpoint_202_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpoint'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_202_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_202_response_allOf_1'
    getNetworkingV1NetworkLinkEndpoint_200_response_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          - network_link_service
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getNetworkingV1NetworkLinkEndpoint_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpoint'
      - $ref: '#/components/schemas/getNetworkingV1NetworkLinkEndpoint_200_response_allOf'
      - $ref: '#/components/schemas/createNetworkingV1NetworkLinkEndpoint_202_response_allOf_1'
    updateNetworkingV1NetworkLinkEndpoint_request:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpointUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf_data_inner_spec:
      properties:
        network_link_service:
          example:
            id: nls-abcde
            related: https://api.confluent.cloud/networking/v1/network-link-services/nls-abcde
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/network-link-service=nls-abcde
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
      type: object
    listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf_data_inner_spec'
    listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf_data_inner'
          type: array
      type: object
    listNetworkingV1NetworkLinkServiceAssociations_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAssociationList'
      - $ref: '#/components/schemas/listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf'
    getNetworkingV1NetworkLinkServiceAssociation_200_response_allOf:
      properties:
        spec:
          required:
          - display_name
          - environment
          - network_link_endpoint
          - network_link_service
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      - status
      type: object
    getNetworkingV1NetworkLinkServiceAssociation_200_response_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/listNetworkingV1NetworkLinkServiceAssociations_200_response_allOf_data_inner_spec'
      type: object
    getNetworkingV1NetworkLinkServiceAssociation_200_response:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAssociation'
      - $ref: '#/components/schemas/getNetworkingV1NetworkLinkServiceAssociation_200_response_allOf'
      - $ref: '#/components/schemas/getNetworkingV1NetworkLinkServiceAssociation_200_response_allOf_1'
    listIamV2IdentityProviders_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityProviderList'
    createIamV2IdentityProvider_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityProvider'
      - required:
        - description
        - display_name
        - issuer
        - jwks_uri
        type: object
    getIamV2IdentityProvider_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityProvider'
      - required:
        - api_version
        - description
        - display_name
        - id
        - issuer
        - jwks_uri
        - kind
        - state
        type: object
    refreshIamV2JsonWebKeySet_200_response_allOf:
      properties:
        spec:
          required:
          - jwks_status
          type: object
      required:
      - api_version
      - kind
      - spec
      type: object
    refreshIamV2JsonWebKeySet_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.Jwks'
      - $ref: '#/components/schemas/refreshIamV2JsonWebKeySet_200_response_allOf'
    listIamV2IdentityPools_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityPoolList'
    createIamV2IdentityPool_request:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityPool'
      - required:
        - description
        - display_name
        - filter
        - identity_claim
        type: object
    getIamV2IdentityPool_200_response:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityPool'
      - required:
        - api_version
        - description
        - display_name
        - filter
        - id
        - identity_claim
        - kind
        - principal
        - state
        type: object
    exchangeStsV1OauthToken_request:
      allOf:
      - $ref: '#/components/schemas/sts.v1.TokenExchangeRequest'
      - required:
        - grant_type
        - identity_pool_id
        - requested_token_type
        - subject_token
        - subject_token_type
        type: object
    listKafkaQuotasV1ClientQuotas_200_response_allOf_data_inner_spec:
      properties:
        cluster:
          example:
            id: lkc-xxxxx
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-xxxxx
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-xxxxx
        environment:
          example:
          - id: env-xxxxx
            related: https://api.confluent.cloud/v2/environments/env-xxxxx
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-xxxxx
      type: object
    listKafkaQuotasV1ClientQuotas_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listKafkaQuotasV1ClientQuotas_200_response_allOf_data_inner_spec'
    listKafkaQuotasV1ClientQuotas_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listKafkaQuotasV1ClientQuotas_200_response_allOf_data_inner'
          type: array
      type: object
    listKafkaQuotasV1ClientQuotas_200_response:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuotaList'
      - $ref: '#/components/schemas/listKafkaQuotasV1ClientQuotas_200_response_allOf'
    createKafkaQuotasV1ClientQuota_request_allOf:
      properties:
        spec:
          required:
          - cluster
          - display_name
          - environment
          - principals
          - throughput
          type: object
      required:
      - spec
      type: object
    createKafkaQuotasV1ClientQuota_request_allOf_1_spec:
      properties:
        cluster:
          example:
            id: lkc-xxxxx
        environment:
          example:
          - id: env-xxxxx
      type: object
    createKafkaQuotasV1ClientQuota_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_request_allOf_1_spec'
      type: object
    createKafkaQuotasV1ClientQuota_request:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuota'
      - $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_request_allOf'
      - $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_request_allOf_1'
    createKafkaQuotasV1ClientQuota_202_response_allOf:
      properties:
        spec:
          $ref: '#/components/schemas/listKafkaQuotasV1ClientQuotas_200_response_allOf_data_inner_spec'
      type: object
    createKafkaQuotasV1ClientQuota_202_response:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuota'
      - $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_request_allOf'
      - $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_202_response_allOf'
    getKafkaQuotasV1ClientQuota_200_response_allOf:
      properties:
        spec:
          required:
          - cluster
          - display_name
          - environment
          - principals
          - throughput
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      type: object
    getKafkaQuotasV1ClientQuota_200_response:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuota'
      - $ref: '#/components/schemas/getKafkaQuotasV1ClientQuota_200_response_allOf'
      - $ref: '#/components/schemas/createKafkaQuotasV1ClientQuota_202_response_allOf'
    updateKafkaQuotasV1ClientQuota_request:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuotaUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listSdV1Pipelines_200_response_allOf_data_inner_spec:
      properties:
        environment:
          example:
            id: env-00000
            related: https://api.confluent.cloud/org/v2/environments/env-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000
        kafka_cluster:
          example:
            id: lkc-00000
            related: https://api.confluent.cloud/cmk/v2/clusters/lkc-00000
            resource_name: https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-00000
      type: object
    listSdV1Pipelines_200_response_allOf_data_inner:
      properties:
        spec:
          $ref: '#/components/schemas/listSdV1Pipelines_200_response_allOf_data_inner_spec'
    listSdV1Pipelines_200_response_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/listSdV1Pipelines_200_response_allOf_data_inner'
          type: array
      type: object
    listSdV1Pipelines_200_response:
      allOf:
      - $ref: '#/components/schemas/sd.v1.PipelineList'
      - $ref: '#/components/schemas/listSdV1Pipelines_200_response_allOf'
    createSdV1Pipeline_request_allOf:
      properties:
        spec:
          required:
          - display_name
          - environment
          - kafka_cluster
          - ksql_cluster
          - stream_governance_cluster
          type: object
      required:
      - spec
      type: object
    createSdV1Pipeline_request_allOf_1_spec:
      properties:
        environment:
          example:
            id: env-00000
        kafka_cluster:
          example:
            id: lkc-00000
      type: object
    createSdV1Pipeline_request_allOf_1:
      properties:
        spec:
          $ref: '#/components/schemas/createSdV1Pipeline_request_allOf_1_spec'
      type: object
    createSdV1Pipeline_request:
      allOf:
      - $ref: '#/components/schemas/sd.v1.Pipeline'
      - $ref: '#/components/schemas/createSdV1Pipeline_request_allOf'
      - $ref: '#/components/schemas/createSdV1Pipeline_request_allOf_1'
    createSdV1Pipeline_202_response_allOf:
      properties:
        spec:
          $ref: '#/components/schemas/listSdV1Pipelines_200_response_allOf_data_inner_spec'
      type: object
    createSdV1Pipeline_202_response:
      allOf:
      - $ref: '#/components/schemas/sd.v1.Pipeline'
      - $ref: '#/components/schemas/createSdV1Pipeline_request_allOf'
      - $ref: '#/components/schemas/createSdV1Pipeline_202_response_allOf'
    getSdV1Pipeline_200_response_allOf:
      properties:
        spec:
          required:
          - display_name
          - environment
          - kafka_cluster
          - ksql_cluster
          - stream_governance_cluster
          type: object
      required:
      - api_version
      - id
      - kind
      - spec
      type: object
    getSdV1Pipeline_200_response:
      allOf:
      - $ref: '#/components/schemas/sd.v1.Pipeline'
      - $ref: '#/components/schemas/getSdV1Pipeline_200_response_allOf'
      - $ref: '#/components/schemas/createSdV1Pipeline_202_response_allOf'
    updateSdV1Pipeline_request:
      allOf:
      - $ref: '#/components/schemas/sd.v1.PipelineUpdate'
      - $ref: '#/components/schemas/updateCmkV2Cluster_request_allOf'
    listByokV1Keys_200_response:
      allOf:
      - $ref: '#/components/schemas/byok.v1.KeyList'
    createByokV1Key_request:
      allOf:
      - $ref: '#/components/schemas/byok.v1.Key'
      - required:
        - key
        type: object
    getByokV1Key_200_response:
      allOf:
      - $ref: '#/components/schemas/byok.v1.Key'
      - required:
        - api_version
        - id
        - key
        - kind
        - provider
        - state
        type: object
    listBillingV1Costs_200_response:
      allOf:
      - $ref: '#/components/schemas/billing.v1.CostList'
    iam_v2_ApiKey_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/api-keys/ak-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/api-key=ak-12345
    iam_v2_ApiKey_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_ApiKey_metadata_allOf'
    iam_v2_ApiKeyList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/api-keys
        last:
          example: https://api.confluent.cloud/iam/v2/api-keys?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/api-keys?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/api-keys?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_ApiKeyList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_ApiKeyList_metadata_allOf'
    iam_v2_ApiKeyList_data_inner_allOf:
      properties:
        spec:
          required:
          - owner
          type: object
      required:
      - id
      - metadata
      - spec
      type: object
    iam_v2_ApiKeyList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ApiKey'
      - $ref: '#/components/schemas/iam_v2_ApiKeyList_data_inner_allOf'
    iam_v2_ApiKeySpec_owner:
      allOf:
      - $ref: '#/components/schemas/TypedGlobalObjectReference'
      description: "The owner to which this belongs. The owner can be one of iam.v2.User,\
        \ iam.v2.ServiceAccount."
      x-immutable: true
    iam_v2_ApiKeySpec_resource:
      allOf:
      - $ref: '#/components/schemas/TypedEnvScopedObjectReference'
      description: |
        The resource associated with this object. The resource can be one of Kafka Cluster ID (example: lkc-12345),
        Schema Registry Cluster ID (example: lsrc-12345) or ksqlDB Cluster ID (example: lksqlc-12345).
        May be null or omitted if not associated with a resource. For Cloud API keys, resource should be `null`.
        [Learn more in Authentication](https://docs.confluent.io/cloud/current/api.html#section/Authentication).
      nullable: true
      x-immutable: true
    Error_source:
      description: "If this error was caused by a particular part of the API request,\
        \ the source will point to the query string parameter or request body property\
        \ that caused it."
      properties:
        pointer:
          description: "A JSON Pointer [RFC6901] to the associated entity in the request\
            \ document [e.g. \"/spec\" for a spec object, or \"/spec/title\" for a\
            \ specific field]."
          type: string
        parameter:
          description: A string indicating which query parameter caused the error.
          type: string
      type: object
    org_v2_Environment_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/org/v2/environments/e-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=e-12345
    org_v2_Environment_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/org_v2_Environment_metadata_allOf'
    org_v2_Organization_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/org/v2/organizations/o-12345
        resource_name:
          example: crn://confluent.cloud/organization=o-12345
    org_v2_Organization_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/org_v2_Organization_metadata_allOf'
    org_v2_EnvironmentList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/org/v2/environments
        last:
          example: https://api.confluent.cloud/org/v2/environments?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/org/v2/environments?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/org/v2/environments?page_token=UvmDWOB1iwfAIBPj6EYb
    org_v2_EnvironmentList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/org_v2_EnvironmentList_metadata_allOf'
    org_v2_EnvironmentList_data_inner:
      allOf:
      - $ref: '#/components/schemas/org.v2.Environment'
      - required:
        - display_name
        - id
        - metadata
        type: object
    org_v2_OrganizationList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/org/v2/organizations
        last:
          example: https://api.confluent.cloud/org/v2/organizations?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/org/v2/organizations?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/org/v2/organizations?page_token=UvmDWOB1iwfAIBPj6EYb
    org_v2_OrganizationList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/org_v2_OrganizationList_metadata_allOf'
    org_v2_OrganizationList_data_inner:
      allOf:
      - $ref: '#/components/schemas/org.v2.Organization'
      - required:
        - display_name
        - id
        - metadata
        type: object
    iam_v2_User_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/users/u-12345
        resource_name:
          example: crn://confluent.cloud/user=u-12345
    iam_v2_User_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_User_metadata_allOf'
    iam_v2_ServiceAccount_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/service-accounts/sa-12345
        resource_name:
          example: crn://confluent.cloud/service-account=sa-12345
    iam_v2_ServiceAccount_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_ServiceAccount_metadata_allOf'
    iam_v2_Invitation_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/invitations/i-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/invitation=i-12345
    iam_v2_Invitation_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_Invitation_metadata_allOf'
    iam_v2_Invitation_user:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The user/invitee
      readOnly: true
    iam_v2_Invitation_creator:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The invitation creator
      readOnly: true
    iam_v2_UserList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/users
        last:
          example: https://api.confluent.cloud/iam/v2/users?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/users?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/users?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_UserList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_UserList_metadata_allOf'
    iam_v2_UserList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.User'
      - required:
        - email
        - id
        - metadata
        type: object
    iam_v2_ServiceAccountList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/service-accounts
        last:
          example: https://api.confluent.cloud/iam/v2/service-accounts?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/service-accounts?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/service-accounts?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_ServiceAccountList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_ServiceAccountList_metadata_allOf'
    iam_v2_ServiceAccountList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.ServiceAccount'
      - required:
        - display_name
        - id
        - metadata
        type: object
    iam_v2_InvitationList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/invitations
        last:
          example: https://api.confluent.cloud/iam/v2/invitations?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/invitations?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/invitations?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_InvitationList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_InvitationList_metadata_allOf'
    iam_v2_InvitationList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.Invitation'
      - required:
        - email
        - id
        - metadata
        type: object
    iam_v2_RoleBinding_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/role-bindings/rb-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/role-binding=rb-12345
    iam_v2_RoleBinding_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_RoleBinding_metadata_allOf'
    iam_v2_RoleBindingList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/role-bindings
        last:
          example: https://api.confluent.cloud/iam/v2/role-bindings?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/role-bindings?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/role-bindings?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_RoleBindingList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_RoleBindingList_metadata_allOf'
    iam_v2_RoleBindingList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.RoleBinding'
      - required:
        - crn_pattern
        - id
        - metadata
        - principal
        - role_name
        type: object
    notifications_v1_Subscription_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/notifications/v1/subscriptions/s-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/subscription=s-12345
    notifications_v1_Subscription_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/notifications_v1_Subscription_metadata_allOf'
    notifications_v1_Subscription_notification_type:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The type of notification to subscribe to.
      x-immutable: true
    notifications_v1_Integration_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/notifications/v1/integrations/i-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/integration=i-12345
    notifications_v1_Integration_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/notifications_v1_Integration_metadata_allOf'
    notifications_v1_Integration_target:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Target'
      description: |
        Integration-specific details (integration targets)
    notifications_v1_NotificationType_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/notifications/v1/notification-types/nt-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/notification-type=nt-12345
    notifications_v1_NotificationType_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/notifications_v1_NotificationType_metadata_allOf'
    notifications_v1_SubscriptionList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/notifications/v1/subscriptions
        last:
          example: https://api.confluent.cloud/notifications/v1/subscriptions?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/notifications/v1/subscriptions?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/notifications/v1/subscriptions?page_token=UvmDWOB1iwfAIBPj6EYb
    notifications_v1_SubscriptionList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/notifications_v1_SubscriptionList_metadata_allOf'
    notifications_v1_SubscriptionList_data_inner:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Subscription'
      - required:
        - id
        - integrations
        - metadata
        - notification_type
        type: object
    notifications_v1_IntegrationList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/notifications/v1/integrations
        last:
          example: https://api.confluent.cloud/notifications/v1/integrations?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/notifications/v1/integrations?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/notifications/v1/integrations?page_token=UvmDWOB1iwfAIBPj6EYb
    notifications_v1_IntegrationList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/notifications_v1_IntegrationList_metadata_allOf'
    notifications_v1_IntegrationList_data_inner:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.Integration'
      - required:
        - display_name
        - id
        - metadata
        - target
        type: object
    notifications_v1_NotificationTypeList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/notifications/v1/notification-types
        last:
          example: https://api.confluent.cloud/notifications/v1/notification-types?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/notifications/v1/notification-types?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/notifications/v1/notification-types?page_token=UvmDWOB1iwfAIBPj6EYb
    notifications_v1_NotificationTypeList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/notifications_v1_NotificationTypeList_metadata_allOf'
    notifications_v1_NotificationTypeList_data_inner:
      allOf:
      - $ref: '#/components/schemas/notifications.v1.NotificationType'
      - required:
        - category
        - description
        - display_name
        - id
        - is_included_in_plan
        - metadata
        - severity
        - subscription_priority
        type: object
    cmk_v2_Cluster_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/cmk/v2/clusters/lkc-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-12345
    cmk_v2_Cluster_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/cmk_v2_Cluster_metadata_allOf'
    cmk_v2_ClusterList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/cmk/v2/clusters
        last:
          example: https://api.confluent.cloud/cmk/v2/clusters?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/cmk/v2/clusters?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/cmk/v2/clusters?page_token=UvmDWOB1iwfAIBPj6EYb
    cmk_v2_ClusterList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/cmk_v2_ClusterList_metadata_allOf'
    cmk_v2_ClusterList_data_inner_allOf:
      properties:
        spec:
          required:
          - availability
          - cloud
          - config
          - display_name
          - environment
          - region
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    cmk_v2_ClusterList_data_inner:
      allOf:
      - $ref: '#/components/schemas/cmk.v2.Cluster'
      - $ref: '#/components/schemas/cmk_v2_ClusterList_data_inner_allOf'
    cmk_v2_ClusterSpec_config:
      default:
        kind: Basic
      description: |
        The configuration of the Kafka cluster.

        Note: Clusters can be upgraded from Basic to Standard, but cannot be downgraded from Standard to Basic.
      discriminator:
        mapping:
          Basic: '#/components/schemas/cmk.v2.Basic'
          Standard: '#/components/schemas/cmk.v2.Standard'
          Dedicated: '#/components/schemas/cmk.v2.Dedicated'
        propertyName: kind
      example:
        kind: Basic
      oneOf:
      - $ref: '#/components/schemas/cmk.v2.Basic'
      - $ref: '#/components/schemas/cmk.v2.Standard'
      - $ref: '#/components/schemas/cmk.v2.Dedicated'
    cmk_v2_ClusterSpec_environment:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: The environment to which this belongs.
    cmk_v2_ClusterSpec_network:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: The network associated with this object.
      x-immutable: true
    cmk_v2_ClusterSpec_byok:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The byok associated with this object.
      x-immutable: true
    ksqldbcm_v2_Cluster_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/ksqldbcm/v2/clusters/lksqlc-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lksqlc-12345
    ksqldbcm_v2_Cluster_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ksqldbcm_v2_Cluster_metadata_allOf'
    ksqldbcm_v2_ClusterList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/ksqldbcm/v2/clusters
        last:
          example: https://api.confluent.cloud/ksqldbcm/v2/clusters?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/ksqldbcm/v2/clusters?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/ksqldbcm/v2/clusters?page_token=UvmDWOB1iwfAIBPj6EYb
    ksqldbcm_v2_ClusterList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/ksqldbcm_v2_ClusterList_metadata_allOf'
    ksqldbcm_v2_ClusterList_data_inner_allOf:
      properties:
        spec:
          required:
          - credential_identity
          - csu
          - display_name
          - environment
          - kafka_cluster
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    ksqldbcm_v2_ClusterList_data_inner:
      allOf:
      - $ref: '#/components/schemas/ksqldbcm.v2.Cluster'
      - $ref: '#/components/schemas/ksqldbcm_v2_ClusterList_data_inner_allOf'
    ksqldbcm_v2_ClusterSpec_kafka_cluster:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: The kafka_cluster to which this belongs.
      x-immutable: true
    ksqldbcm_v2_ClusterSpec_credential_identity:
      allOf:
      - $ref: '#/components/schemas/TypedGlobalObjectReference'
      description: "The credential_identity to which this belongs. The credential_identity\
        \ can be one of iam.v2.User, iam.v2.ServiceAccount."
      x-immutable: true
    ksqldbcm_v2_ClusterSpec_environment:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The environment to which this belongs.
      x-immutable: true
    connect_v1_ConnectorError_error:
      description: Connector Error with error code and message.
      properties:
        code:
          description: Error code for the type of error
          type: integer
        message:
          description: Human readable error message
          type: string
      type: object
    connect_v1_Connector_config:
      additionalProperties:
        type: string
      description: |-
        Configuration parameters for the connector. These configurations
        are the minimum set of key-value pairs (KVP) which can be used to
        define how the connector connects Kafka to the external system.
        Some of these KVPs are common to all the connectors, such as
        connection parameters to Kafka, connector metadata, etc. The list
        of common connector configurations is as follows

        - cloud.environment
        - cloud.provider
        - connector.class
        - kafka.api.key
        - kafka.api.secret
        - kafka.endpoint
        - kafka.region
        - name

        A specific connector such as `GcsSink` would have additional
        parameters such as `gcs.bucket.name`, `flush.size`, etc.
      example:
        connector.class: connector.class
        kafka.api.key: kafka.api.key
        cloud.provider: cloud.provider
        kafka.region: kafka.region
        kafka.api.secret: kafka.api.secret
        kafka.endpoint: kafka.endpoint
        name: name
        cloud.environment: private
      properties:
        cloud.environment:
          description: The cloud environment type.
          enum:
          - private
          - devel
          - stag
          - prod
          type: string
        cloud.provider:
          description: "The cloud service provider, e.g. aws, azure, etc."
          type: string
          x-extensible-enum:
          - aws
          - azure
          - gcp
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.endpoint:
          description: The kafka cluster endpoint.
          type: string
        kafka.region:
          description: The kafka cluster region.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - cloud.environment
      - cloud.provider
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - kafka.endpoint
      - kafka.region
      - name
      type: object
    connect_v1_Connector_tasks_inner:
      example:
        task: 0
        connector: connector
      properties:
        connector:
          description: The name of the connector the task belongs to
          type: string
        task:
          description: Task ID within the connector
          type: integer
      required:
      - connector
      - task
      type: object
    connect_v1_Connectors_inner_id:
      description: The ID of task.
      example:
        task: 0
        connector: connector
      properties:
        connector:
          description: The name of the connector the task belongs to.
          type: string
        task:
          description: Task ID within the connector.
          type: integer
      type: object
    connect_v1_Connectors_inner_config:
      additionalProperties:
        type: string
      description: |-
        Configuration parameters for the connector. These configurations
        are the minimum set of key-value pairs (KVP) which can be used to
        define how the connector connects Kafka to the external system.
        Some of these KVPs are common to all the connectors, such as
        connection parameters to Kafka, connector metadata, etc. The list
        of common connector configurations is as follows

          - cloud.environment
          - cloud.provider
          - connector.class
          - kafka.api.key
          - kafka.api.secret
          - kafka.endpoint
          - kafka.region
          - name

        A specific connector such as `GcsSink` would have additional
        parameters such as `gcs.bucket.name`, `flush.size`, etc.
      example:
        connector.class: connector.class
        kafka.api.key: kafka.api.key
        cloud.provider: cloud.provider
        kafka.region: kafka.region
        kafka.api.secret: kafka.api.secret
        kafka.endpoint: kafka.endpoint
        name: name
        cloud.environment: private
      properties:
        cloud.environment:
          description: The cloud environment type.
          enum:
          - private
          - devel
          - stag
          - prod
          type: string
        cloud.provider:
          description: "The cloud service provider, e.g. aws, azure, etc."
          type: string
          x-extensible-enum:
          - aws
          - azure
          - gcp
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.endpoint:
          description: The kafka cluster endpoint.
          type: string
        kafka.region:
          description: The kafka cluster region.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - cloud.environment
      - cloud.provider
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - kafka.endpoint
      - kafka.region
      - name
      type: object
    connect_v1_Connectors_inner:
      example:
        id:
          task: 0
          connector: connector
        config:
          connector.class: connector.class
          kafka.api.key: kafka.api.key
          cloud.provider: cloud.provider
          kafka.region: kafka.region
          kafka.api.secret: kafka.api.secret
          kafka.endpoint: kafka.endpoint
          name: name
          cloud.environment: private
      properties:
        id:
          $ref: '#/components/schemas/connect_v1_Connectors_inner_id'
        config:
          $ref: '#/components/schemas/connect_v1_Connectors_inner_config'
      type: object
    connect_v1_ConnectorExpansion_id:
      description: The ID of connector.
      properties:
        id:
          description: The ID of the connector.
          type: string
        id_type:
          description: Type of the value in the `id` property.
          type: string
      type: object
    connect_v1_ConnectorExpansion_info_config:
      additionalProperties:
        type: string
      description: |-
        Configuration parameters for the connector. These configurations
        are the minimum set of key-value pairs (KVP) which are used to
        define how the connector connects Kafka to the external system.
        Some of these KVPs are common to all the connectors, such as
        connection parameters to Kafka, connector metadata, etc. The list
        of common connector configurations is as follows

          - cloud.environment
          - cloud.provider
          - connector.class
          - kafka.api.key
          - kafka.api.secret
          - kafka.endpoint
          - kafka.region
          - name

        For example, a connector like `GcsSink` would have additional
        parameters such as `gcs.bucket.name`, `flush.size`, etc.
      properties:
        cloud.environment:
          description: The cloud environment type.
          enum:
          - private
          - devel
          - stag
          - prod
          type: string
        cloud.provider:
          description: "The cloud service provider, e.g. aws, azure, etc."
          type: string
          x-extensible-enum:
          - aws
          - azure
          - gcp
        connector.class:
          description: "The connector class name. E.g. BigQuerySink, GcsSink, etc."
          type: string
        name:
          description: Name or alias of the class (plugin) for this connector.
          type: string
        kafka.endpoint:
          description: The kafka cluster endpoint.
          type: string
        kafka.region:
          description: The kafka cluster region.
          type: string
        kafka.api.key:
          description: The kafka cluster api key.
          type: string
        kafka.api.secret:
          description: The kafka cluster api secret key.
          type: string
          x-redact: true
      required:
      - cloud.environment
      - cloud.provider
      - connector.class
      - kafka.api.key
      - kafka.api.secret
      - kafka.endpoint
      - kafka.region
      - name
      type: object
    connect_v1_ConnectorExpansion_info:
      description: Metadata of the connector.
      properties:
        name:
          description: Name of the connector.
          type: string
        config:
          $ref: '#/components/schemas/connect_v1_ConnectorExpansion_info_config'
      type: object
    connect_v1_ConnectorExpansion_status_connector:
      description: A map containing connector status.
      properties:
        state:
          description: The state of the connector.
          enum:
          - NONE
          - PROVISIONING
          - RUNNING
          - DEGRADED
          - FAILED
          - PAUSED
          - DELETED
          type: string
        worker_id:
          description: The worker ID of the connector.
          type: string
        trace:
          description: Exception message in case of an error.
          type: string
      required:
      - state
      - worker_id
      type: object
    connect_v1_ConnectorExpansion_status:
      description: Status of the connector and its tasks.
      properties:
        name:
          description: The name of the connector.
          type: string
        type:
          description: "Type of connector, sink or source."
          enum:
          - sink
          - source
          type: string
        connector:
          $ref: '#/components/schemas/connect_v1_ConnectorExpansion_status_connector'
        tasks:
          description: A map containing the task status.
          items:
            $ref: '#/components/schemas/readConnectv1ConnectorStatus_200_response_tasks_inner'
          type: array
      required:
      - connector
      - name
      - type
      type: object
    AbstractConfigData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          nullable: true
          type: string
        is_default:
          type: boolean
        is_read_only:
          type: boolean
        is_sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
        synonyms:
          items:
            $ref: '#/components/schemas/ConfigSynonymData'
          type: array
      required:
      - cluster_id
      - is_default
      - is_read_only
      - is_sensitive
      - name
      - source
      - synonyms
      type: object
      example: null
    AclData_allOf:
      properties:
        cluster_id:
          type: string
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - cluster_id
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
      type: object
      example: null
    AclDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AclData'
          type: array
      required:
      - data
      type: object
      example: null
    AlterConfigBatchRequestData_data_inner:
      example:
        name: name
        value: value
        operation: operation
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        operation:
          nullable: true
          type: string
          x-extensible-enum:
          - SET
          - DELETE
      required:
      - name
      type: object
    BrokerConfigData_allOf:
      properties:
        broker_id:
          type: integer
      required:
      - broker_id
      type: object
      example: null
    BrokerConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerConfigData'
          type: array
      required:
      - data
      type: object
      example: null
    BrokerData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        host:
          nullable: true
          type: string
        port:
          nullable: true
          type: integer
        rack:
          nullable: true
          type: string
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_id
      - cluster_id
      - configs
      - partition_replicas
      type: object
      example: null
    BrokerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerData'
          type: array
      required:
      - data
      type: object
      example: null
    ClusterConfigData_allOf:
      properties:
        config_type:
          type: string
          x-extensible-enum:
          - BROKER
      required:
      - config_type
      type: object
      example: null
    ClusterConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterConfigData'
          type: array
      required:
      - data
      type: object
      example: null
    ClusterData_allOf:
      properties:
        cluster_id:
          type: string
        controller:
          $ref: '#/components/schemas/Relationship'
        acls:
          $ref: '#/components/schemas/Relationship'
        brokers:
          $ref: '#/components/schemas/Relationship'
        broker_configs:
          $ref: '#/components/schemas/Relationship'
        consumer_groups:
          $ref: '#/components/schemas/Relationship'
        topics:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - acls
      - broker_configs
      - brokers
      - cluster_id
      - consumer_groups
      - partition_reassignments
      - topics
      type: object
      example: null
    ClusterDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterData'
          type: array
      required:
      - data
      type: object
      example: null
    CreateAclRequestDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/CreateAclRequestData'
          type: array
      required:
      - data
      type: object
      example: null
    CreateTopicRequestData_configs_inner:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
      type: object
    ConsumerAssignmentData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        partition:
          $ref: '#/components/schemas/Relationship'
        lag:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumer_id
      - lag
      - partition
      - partition_id
      - topic_name
      type: object
      example: null
    ConsumerAssignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerAssignmentData'
          type: array
      required:
      - data
      type: object
      example: null
    ConsumerData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
        assignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - assignments
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
      type: object
      example: null
    ConsumerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerData'
          type: array
      required:
      - data
      type: object
      example: null
    ConsumerGroupData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        is_simple:
          type: boolean
        partition_assignor:
          type: string
        state:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - PREPARING_REBALANCE
          - COMPLETING_REBALANCE
          - STABLE
          - DEAD
          - EMPTY
        coordinator:
          $ref: '#/components/schemas/Relationship'
        consumer:
          $ref: '#/components/schemas/Relationship'
        lag_summary:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumers
      - coordinator
      - is_simple
      - lag_summary
      - partition_assignor
      - state
      type: object
      example: null
    ConsumerGroupDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerGroupData'
          type: array
      required:
      - data
      type: object
      example: null
    ConsumerLagData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        current_offset:
          format: int64
          type: integer
        log_end_offset:
          format: int64
          type: integer
        lag:
          format: int64
          type: integer
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
      required:
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
      - current_offset
      - lag
      - log_end_offset
      - partition_id
      - topic_name
      type: object
      example: null
    ConsumerLagDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerLagData'
          type: array
      required:
      - data
      type: object
      example: null
    ConsumerGroupLagSummaryData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        max_lag_consumer_id:
          type: string
        max_lag_instance_id:
          nullable: true
          type: string
        max_lag_client_id:
          type: string
        max_lag_topic_name:
          type: string
        max_lag_partition_id:
          type: integer
        max_lag:
          format: int64
          type: integer
        total_lag:
          format: int64
          type: integer
        max_lag_consumer:
          $ref: '#/components/schemas/Relationship'
        max_lag_partition:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - max_lag
      - max_lag_client_id
      - max_lag_consumer
      - max_lag_consumer_id
      - max_lag_partition
      - max_lag_partition_id
      - max_lag_topic_name
      - total_lag
      type: object
      example: null
    PartitionData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        leader:
          $ref: '#/components/schemas/Relationship'
        replicas:
          $ref: '#/components/schemas/Relationship'
        reassignment:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - partition_id
      - reassignment
      - replicas
      - topic_name
      type: object
      example: null
    PartitionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PartitionData'
          type: array
      required:
      - data
      type: object
      example: null
    ReassignmentData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        adding_replicas:
          items:
            type: integer
          type: array
        removing_replicas:
          items:
            type: integer
          type: array
        replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - adding_replicas
      - cluster_id
      - partition_id
      - removing_replicas
      - replicas
      - topic_name
      type: object
      example: null
    ReassignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReassignmentData'
          type: array
      required:
      - data
      type: object
      example: null
    ReplicaData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        broker_id:
          type: integer
        is_leader:
          type: boolean
        is_in_sync:
          type: boolean
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - is_in_sync
      - is_leader
      - partition_id
      - topic_name
      type: object
      example: null
    ReplicaDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaData'
          type: array
      required:
      - data
      type: object
      example: null
    TopicConfigData_allOf:
      properties:
        topic_name:
          type: string
      required:
      - topic_name
      type: object
      example: null
    TopicConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicConfigData'
          type: array
      required:
      - data
      type: object
      example: null
    TopicData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        is_internal:
          type: boolean
        replication_factor:
          type: integer
        partitions_count:
          type: integer
        partitions:
          $ref: '#/components/schemas/Relationship'
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
        authorized_operations:
          items:
            type: string
            x-extensible-enum:
            - UNKNOWN
            - ALL
            - READ
            - WRITE
            - CREATE
            - DELETE
            - ALTER
            - DESCRIBE
            - CLUSTER_ACTION
            - DESCRIBE_CONFIGS
            - ALTER_CONFIGS
            - IDEMPOTENT_WRITE
          type: array
      required:
      - cluster_id
      - configs
      - is_internal
      - partition_reassignments
      - partitions
      - partitions_count
      - replication_factor
      - topic_name
      type: object
      example: null
    TopicDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicData'
          type: array
      required:
      - data
      type: object
      example: null
    ReplicaStatusData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        broker_id:
          format: int32
          type: integer
        partition_id:
          format: int32
          type: integer
        is_leader:
          type: boolean
        is_observer:
          type: boolean
        is_isr_eligible:
          type: boolean
        is_in_isr:
          type: boolean
        is_caught_up:
          type: boolean
        log_start_offset:
          format: int64
          type: integer
        log_end_offset:
          format: int64
          type: integer
        last_caught_up_time_ms:
          format: int64
          type: integer
        last_fetch_time_ms:
          format: int64
          type: integer
        link_name:
          type: string
      required:
      - broker_id
      - cluster_id
      - is_caught_up
      - is_in_isr
      - is_isr_eligible
      - is_leader
      - is_observer
      - last_caught_up_time_ms
      - last_fetch_time_ms
      - log_end_offset
      - log_start_offset
      - partition_id
      - topic_name
      type: object
      example: null
    ReplicaStatusDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaStatusData'
          type: array
      required:
      - data
      type: object
      example: null
    AnyUnevenLoadData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        previous_status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        previous_status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_tasks
      - cluster_id
      - previous_status
      - previous_status_updated_at
      - status
      - status_updated_at
      type: object
      example: null
    BalancerStatusData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - BOOTSTRAPPING
          - STARTING
          - ENABLED
          - ERROR
          - DISABLED
          - FAILOVER
          - LOAD_FAILURE
          - UNKNOWN
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        any_uneven_load:
          $ref: '#/components/schemas/Relationship'
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - any_uneven_load
      - broker_tasks
      - cluster_id
      - status
      type: object
      example: null
    BrokerRemovalData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        broker_task:
          $ref: '#/components/schemas/Relationship'
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_task
      - cluster_id
      type: object
      example: null
    BrokerRemovalDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerRemovalData'
          type: array
      required:
      - data
      type: object
      example: null
    BrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        task_type:
          $ref: '#/components/schemas/BrokerTaskType'
        task_status:
          type: string
          x-extensible-enum:
          - FAILED
          - IN_PROGRESS
          - SUCCESS
          - UNKNOWN
        shutdown_scheduled:
          nullable: true
          type: boolean
        sub_task_statuses:
          additionalProperties:
            type: string
          type: object
        created_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this task was last updated.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - created_at
      - sub_task_statuses
      - task_status
      - task_type
      - updated_at
      type: object
      example: null
    BrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerTaskData'
          type: array
      required:
      - data
      type: object
      example: null
    BrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        reason:
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - reason
      type: object
      example: null
    BrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
          type: array
      required:
      - data
      type: object
      example: null
    AlterBrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        exclusion:
          type: string
          x-extensible-enum:
          - SET
          - DELETE
          - UNKNOWN
        reason:
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - exclusion
      - reason
      type: object
      example: null
    AlterBrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionData'
          type: array
      required:
      - data
      type: object
      example: null
    RemoveBrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        shutdown_scheduled:
          type: boolean
        broker_replica_exclusion_status:
          type: string
          x-extensible-enum:
          - PENDING
          - IN_PROGRESS
          - EXCLUDED
          - REMOVING
          - ERROR
          - CANCELED
          - COMPLETED
          - UNKNOWN
        partition_reassignment_status:
          type: string
          x-extensible-enum:
          - CANCELED
          - FAILED
          - PENDING
          - IN_PROGRESS
          - COMPLETE
        broker_shutdown_status:
          type: string
          x-extensible-enum:
          - FAILED
          - CANCELED
          - PENDING
          - COMPLETE
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_replica_exclusion_status
      - broker_shutdown_status
      - cluster_id
      - partition_reassignment_status
      - shutdown_scheduled
      type: object
      example: null
    RemoveBrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
          type: array
      required:
      - data
      type: object
      example: null
    ListLinksResponseData_allOf:
      properties:
        source_cluster_id:
          nullable: true
          type: string
        destination_cluster_id:
          nullable: true
          type: string
        link_name:
          type: string
        link_id:
          deprecated: true
          type: string
        cluster_link_id:
          type: string
        topics_names:
          items:
            type: string
          type: array
        link_error:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - NO_ERROR
          - AUTHENTICATION_ERROR
          - UNRESOLVABLE_BOOTSTRAP_ERROR
          - INVALID_BOOTSTRAP_INTERNAL_ENDPOINT_ERROR
          - BOOTSTRAP_TCP_CONNECTION_FAILED_ERROR
          - TIMEOUT_ERROR
        link_error_message:
          nullable: true
          type: string
        link_state:
          type: string
          x-extensible-enum:
          - ACTIVE
          - FAILED
          - UNAVAILABLE
          - PAUSED
          - UNKNOWN
      required:
      - cluster_link_id
      - link_name
      - topic_names
      type: object
      example: null
    ListLinksResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinksResponseData'
          type: array
      required:
      - data
      type: object
      example: null
    ListLinkConfigsResponseData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          type: string
        read_only:
          type: boolean
        sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
        synonyms:
          items:
            type: string
          type: array
        link_name:
          type: string
      required:
      - cluster_id
      - default
      - link_name
      - name
      - read_only
      - sensitive
      - source
      - synonyms
      - value
      type: object
      example: null
    ListLinkConfigsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
          type: array
      required:
      - data
      type: object
      example: null
    ListMirrorTopicsResponseData_allOf:
      properties:
        link_name:
          type: string
        mirror_topic_name:
          type: string
        source_topic_name:
          type: string
        num_partitions:
          type: integer
        mirror_lags:
          items:
            $ref: '#/components/schemas/MirrorLag'
          type: array
        mirror_status:
          $ref: '#/components/schemas/MirrorTopicStatus'
        state_time_ms:
          format: int64
          type: integer
      required:
      - link_name
      - mirror_lags
      - mirror_status
      - mirror_topic_name
      - num_partitions
      - source_topic_name
      - state_time_ms
      type: object
      example: null
    ListMirrorTopicsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          type: array
      required:
      - data
      type: object
      example: null
    AlterMirrorStatusResponseData_allOf:
      properties:
        mirror_topic_name:
          type: string
        error_message:
          nullable: true
          type: string
        error_code:
          nullable: true
          type: integer
        mirror_lags:
          items:
            $ref: '#/components/schemas/MirrorLag'
          type: array
      required:
      - error_code
      - error_message
      - mirror_lags
      - mirror_topic_name
      type: object
      example: null
    AlterMirrorStatusResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterMirrorStatusResponseData'
          type: array
      required:
      - data
      type: object
      example: null
    service_quota_v1_AppliedQuota_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/service-quota/v1/applied-quotas/aq-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/applied-quota=aq-12345
    service_quota_v1_AppliedQuota_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/service_quota_v1_AppliedQuota_metadata_allOf'
    service_quota_v1_AppliedQuota_user:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The user associated with this object.
      x-immutable: true
    service_quota_v1_AppliedQuota_organization:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: A unique organization id to associate a specific organization to
        this quota.
      nullable: true
    service_quota_v1_AppliedQuota_environment:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: |
        The environment ID the quota is associated with.
      nullable: true
      x-immutable: true
    service_quota_v1_AppliedQuota_network:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: |
        The network ID the quota is associated with.
      nullable: true
      x-immutable: true
    service_quota_v1_AppliedQuota_kafka_cluster:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: |
        The kafka cluster ID the quota is associated with.
      nullable: true
      x-immutable: true
    service_quota_v1_Scope_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/service-quota/v1/scopes/s-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/scope=s-12345
    service_quota_v1_Scope_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/service_quota_v1_Scope_metadata_allOf'
    service_quota_v1_AppliedQuotaList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/service-quota/v1/applied-quotas
        last:
          example: https://api.confluent.cloud/service-quota/v1/applied-quotas?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/service-quota/v1/applied-quotas?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/service-quota/v1/applied-quotas?page_token=UvmDWOB1iwfAIBPj6EYb
    service_quota_v1_AppliedQuotaList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/service_quota_v1_AppliedQuotaList_metadata_allOf'
    service_quota_v1_AppliedQuotaList_data_inner:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.AppliedQuota'
      - required:
        - applied_limit
        - default_limit
        - display_name
        - id
        - metadata
        - scope
        type: object
    service_quota_v1_ScopeList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/service-quota/v1/scopes
        last:
          example: https://api.confluent.cloud/service-quota/v1/scopes?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/service-quota/v1/scopes?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/service-quota/v1/scopes?page_token=UvmDWOB1iwfAIBPj6EYb
    service_quota_v1_ScopeList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/service_quota_v1_ScopeList_metadata_allOf'
    service_quota_v1_ScopeList_data_inner:
      allOf:
      - $ref: '#/components/schemas/service-quota.v1.Scope'
      - required:
        - description
        - id
        - metadata
        type: object
    partner_v2_Entitlement_organization:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - required:
        - related
      description: The organization associated with this object.
    partner_v2_EntitlementList_data_inner:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Entitlement'
      - required:
        - external_id
        - id
        - metadata
        - name
        - plan_id
        - product_id
        type: object
    srcm_v2_Region_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/srcm/v2/regions/sgreg-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/region=sgreg-12345
    srcm_v2_Region_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/srcm_v2_Region_metadata_allOf'
    srcm_v2_Cluster_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/srcm/v2/clusters/lsrc-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lsrc-12345
    srcm_v2_Cluster_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/srcm_v2_Cluster_metadata_allOf'
    srcm_v2_RegionList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/srcm/v2/regions
        last:
          example: https://api.confluent.cloud/srcm/v2/regions?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/srcm/v2/regions?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/srcm/v2/regions?page_token=UvmDWOB1iwfAIBPj6EYb
    srcm_v2_RegionList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/srcm_v2_RegionList_metadata_allOf'
    srcm_v2_RegionList_data_inner_allOf:
      properties:
        spec:
          required:
          - cloud
          - display_name
          - packages
          - region_name
          type: object
      required:
      - id
      - metadata
      - spec
      type: object
    srcm_v2_RegionList_data_inner:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Region'
      - $ref: '#/components/schemas/srcm_v2_RegionList_data_inner_allOf'
    srcm_v2_ClusterList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/srcm/v2/clusters
        last:
          example: https://api.confluent.cloud/srcm/v2/clusters?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/srcm/v2/clusters?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/srcm/v2/clusters?page_token=UvmDWOB1iwfAIBPj6EYb
    srcm_v2_ClusterList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/srcm_v2_ClusterList_metadata_allOf'
    srcm_v2_ClusterList_data_inner_allOf:
      properties:
        spec:
          required:
          - environment
          - package
          - region
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    srcm_v2_ClusterList_data_inner:
      allOf:
      - $ref: '#/components/schemas/srcm.v2.Cluster'
      - $ref: '#/components/schemas/srcm_v2_ClusterList_data_inner_allOf'
    srcm_v2_ClusterSpec_environment:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The environment to which this belongs.
    srcm_v2_ClusterSpec_region:
      allOf:
      - $ref: '#/components/schemas/GlobalObjectReference'
      description: The region to which this belongs.
      x-immutable: true
    partner_v2_Organization_sso_config:
      discriminator:
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/AzureSSOConfig'
    partner_v2_OrganizationList_data_inner:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Organization'
      - required:
        - id
        - metadata
        type: object
    PartnerSignupRequest_organization:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Organization'
      - required:
        - name
        - sso_config
    PartnerSignupRequest_entitlement_oneOf:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Entitlement'
      - required:
        - external_id
        - name
        - plan_id
        - product_id
    PartnerSignupRequest_entitlement_oneOf_1:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - required:
        - related
    PartnerSignupRequest_entitlement:
      oneOf:
      - $ref: '#/components/schemas/PartnerSignupRequest_entitlement_oneOf'
      - $ref: '#/components/schemas/PartnerSignupRequest_entitlement_oneOf_1'
    PartnerLinkRequest_organization:
      allOf:
      - $ref: '#/components/schemas/partner.v2.Organization'
      - required:
        - sso_config
    networking_v1_Network_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/networks/n-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-12345
    networking_v1_Network_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_Network_metadata_allOf'
    networking_v1_NetworkStatus_cloud:
      description: The cloud-specific network details. These will be populated when
        the network reaches the READY state.
      discriminator:
        mapping:
          AwsNetwork: '#/components/schemas/networking.v1.AwsNetwork'
          GcpNetwork: '#/components/schemas/networking.v1.GcpNetwork'
          AzureNetwork: '#/components/schemas/networking.v1.AzureNetwork'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/networking.v1.AwsNetwork'
      - $ref: '#/components/schemas/networking.v1.GcpNetwork'
      - $ref: '#/components/schemas/networking.v1.AzureNetwork'
      readOnly: true
      type: object
    networking_v1_Peering_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/peerings/p-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-456xyz/peering=p-12345
    networking_v1_Peering_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_Peering_metadata_allOf'
    networking_v1_TransitGatewayAttachment_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/transit-gateway-attachments/tga-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-456xyz/transit-gateway-attachment=tga-12345
    networking_v1_TransitGatewayAttachment_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_TransitGatewayAttachment_metadata_allOf'
    networking_v1_TransitGatewayAttachmentStatus_cloud:
      description: The cloud-specific TGW attachment details.
      discriminator:
        mapping:
          AwsTransitGatewayAttachmentStatus: '#/components/schemas/networking.v1.AwsTransitGatewayAttachmentStatus'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/networking.v1.AwsTransitGatewayAttachmentStatus'
      readOnly: true
      type: object
    networking_v1_PrivateLinkAccess_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/private-link-accesses/pla-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-456xyz/private-link-access=pla-12345
    networking_v1_PrivateLinkAccess_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_PrivateLinkAccess_metadata_allOf'
    networking_v1_NetworkLinkService_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/network-link-services/nls-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/network-link-service=nls-12345
    networking_v1_NetworkLinkService_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkService_metadata_allOf'
    networking_v1_NetworkLinkEndpoint_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/network-link-endpoints/nle-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/network-link-endpoint=nle-12345
    networking_v1_NetworkLinkEndpoint_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkEndpoint_metadata_allOf'
    networking_v1_NetworkLinkServiceAssociation_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/networking/v1/network-link-service-associations/nlsa-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/network-link-service-association=nlsa-12345
    networking_v1_NetworkLinkServiceAssociation_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociation_metadata_allOf'
    networking_v1_NetworkList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/networks
        last:
          example: https://api.confluent.cloud/networking/v1/networks?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/networks?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/networks?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_NetworkList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkList_metadata_allOf'
    networking_v1_NetworkList_data_inner_allOf:
      properties:
        spec:
          required:
          - cloud
          - connection_types
          - environment
          - region
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    networking_v1_NetworkList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Network'
      - $ref: '#/components/schemas/networking_v1_NetworkList_data_inner_allOf'
    networking_v1_NetworkSpec_dns_config:
      allOf:
      - $ref: '#/components/schemas/networking.v1.DnsConfig'
      description: |
        DNS config only applies to PrivateLink network connection type.

        When resolution is CHASED_PRIVATE, clusters in this network require both public and private DNS
         to resolve cluster endpoints.

        When resolution is PRIVATE, clusters in this network only require private DNS
         to resolve cluster endpoints.
      x-immutable: true
    networking_v1_NetworkSpec_environment:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      description: The environment to which this belongs.
    networking_v1_PeeringList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/peerings
        last:
          example: https://api.confluent.cloud/networking/v1/peerings?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/peerings?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/peerings?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_PeeringList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_PeeringList_metadata_allOf'
    networking_v1_PeeringList_data_inner_allOf:
      properties:
        spec:
          required:
          - cloud
          - environment
          - network
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    networking_v1_PeeringList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.Peering'
      - $ref: '#/components/schemas/networking_v1_PeeringList_data_inner_allOf'
    networking_v1_PeeringSpec_cloud:
      description: The cloud-specific peering details.
      discriminator:
        mapping:
          AwsPeering: '#/components/schemas/networking.v1.AwsPeering'
          GcpPeering: '#/components/schemas/networking.v1.GcpPeering'
          AzurePeering: '#/components/schemas/networking.v1.AzurePeering'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/networking.v1.AwsPeering'
      - $ref: '#/components/schemas/networking.v1.GcpPeering'
      - $ref: '#/components/schemas/networking.v1.AzurePeering'
      type: object
      x-immutable: true
    networking_v1_PeeringSpec_network:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      description: The network to which this belongs.
      x-immutable: true
    networking_v1_TransitGatewayAttachmentList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/transit-gateway-attachments
        last:
          example: https://api.confluent.cloud/networking/v1/transit-gateway-attachments?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/transit-gateway-attachments?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/transit-gateway-attachments?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_TransitGatewayAttachmentList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_TransitGatewayAttachmentList_metadata_allOf'
    networking_v1_TransitGatewayAttachmentList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.TransitGatewayAttachment'
      - $ref: '#/components/schemas/networking_v1_PeeringList_data_inner_allOf'
    networking_v1_TransitGatewayAttachmentSpec_cloud:
      description: The cloud-specific Transit Gateway details.
      discriminator:
        mapping:
          AwsTransitGatewayAttachment: '#/components/schemas/networking.v1.AwsTransitGatewayAttachment'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/networking.v1.AwsTransitGatewayAttachment'
      type: object
      x-immutable: true
    networking_v1_PrivateLinkAccessList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/private-link-accesses
        last:
          example: https://api.confluent.cloud/networking/v1/private-link-accesses?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/private-link-accesses?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/private-link-accesses?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_PrivateLinkAccessList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_PrivateLinkAccessList_metadata_allOf'
    networking_v1_PrivateLinkAccessList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.PrivateLinkAccess'
      - $ref: '#/components/schemas/networking_v1_PeeringList_data_inner_allOf'
    networking_v1_PrivateLinkAccessSpec_cloud:
      description: The cloud-specific PrivateLink details.
      discriminator:
        mapping:
          AwsPrivateLinkAccess: '#/components/schemas/networking.v1.AwsPrivateLinkAccess'
          AzurePrivateLinkAccess: '#/components/schemas/networking.v1.AzurePrivateLinkAccess'
          GcpPrivateServiceConnectAccess: '#/components/schemas/networking.v1.GcpPrivateServiceConnectAccess'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/networking.v1.AwsPrivateLinkAccess'
      - $ref: '#/components/schemas/networking.v1.AzurePrivateLinkAccess'
      - $ref: '#/components/schemas/networking.v1.GcpPrivateServiceConnectAccess'
      type: object
      x-immutable: true
    networking_v1_NetworkLinkServiceList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/network-link-services
        last:
          example: https://api.confluent.cloud/networking/v1/network-link-services?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/network-link-services?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/network-link-services?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_NetworkLinkServiceList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkServiceList_metadata_allOf'
    networking_v1_NetworkLinkServiceList_data_inner_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    networking_v1_NetworkLinkServiceList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkService'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkServiceList_data_inner_allOf'
    networking_v1_NetworkLinkServiceSpec_accept:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAcceptPolicy'
      description: Network Link Service Accept policy
    networking_v1_NetworkLinkServiceSpec_network:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: The network to which this belongs.
      x-immutable: true
    networking_v1_NetworkLinkEndpointList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/network-link-endpoints
        last:
          example: https://api.confluent.cloud/networking/v1/network-link-endpoints?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/network-link-endpoints?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/network-link-endpoints?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_NetworkLinkEndpointList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointList_metadata_allOf'
    networking_v1_NetworkLinkEndpointList_data_inner_allOf:
      properties:
        spec:
          required:
          - environment
          - network
          - network_link_service
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    networking_v1_NetworkLinkEndpointList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkEndpoint'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkEndpointList_data_inner_allOf'
    networking_v1_NetworkLinkEndpointSpec_network_link_service:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: The network_link_service to which this belongs.
      x-immutable: true
    networking_v1_NetworkLinkServiceAssociationList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/networking/v1/network-link-service-associations
        last:
          example: https://api.confluent.cloud/networking/v1/network-link-service-associations?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/networking/v1/network-link-service-associations?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/networking/v1/network-link-service-associations?page_token=UvmDWOB1iwfAIBPj6EYb
    networking_v1_NetworkLinkServiceAssociationList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociationList_metadata_allOf'
    networking_v1_NetworkLinkServiceAssociationList_data_inner_allOf:
      properties:
        spec:
          required:
          - display_name
          - environment
          - network_link_endpoint
          - network_link_service
          type: object
      required:
      - id
      - metadata
      - spec
      - status
      type: object
    networking_v1_NetworkLinkServiceAssociationList_data_inner:
      allOf:
      - $ref: '#/components/schemas/networking.v1.NetworkLinkServiceAssociation'
      - $ref: '#/components/schemas/networking_v1_NetworkLinkServiceAssociationList_data_inner_allOf'
    iam_v2_IdentityProvider_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/identity-providers/ip-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/identity-provider=ip-12345
    iam_v2_IdentityProvider_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_IdentityProvider_metadata_allOf'
    iam_v2_IdentityPool_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/iam/v2/identity-pools/ip-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/identity-pool=ip-12345
    iam_v2_IdentityPool_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/iam_v2_IdentityPool_metadata_allOf'
    iam_v2_IdentityProviderList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/identity-providers
        last:
          example: https://api.confluent.cloud/iam/v2/identity-providers?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/identity-providers?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/identity-providers?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_IdentityProviderList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_IdentityProviderList_metadata_allOf'
    iam_v2_IdentityProviderList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityProvider'
      - required:
        - description
        - display_name
        - id
        - issuer
        - jwks_uri
        - metadata
        - state
        type: object
    iam_v2_IdentityPoolList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/iam/v2/identity-pools
        last:
          example: https://api.confluent.cloud/iam/v2/identity-pools?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/iam/v2/identity-pools?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/iam/v2/identity-pools?page_token=UvmDWOB1iwfAIBPj6EYb
    iam_v2_IdentityPoolList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/iam_v2_IdentityPoolList_metadata_allOf'
    iam_v2_IdentityPoolList_data_inner:
      allOf:
      - $ref: '#/components/schemas/iam.v2.IdentityPool'
      - required:
        - description
        - display_name
        - filter
        - id
        - identity_claim
        - metadata
        - principal
        - state
        type: object
    sts_v1_TokenExchangeRequest_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/sts/v1/token-exchange-requests/ter-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/token-exchange-request=ter-12345
    sts_v1_TokenExchangeRequest_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/sts_v1_TokenExchangeRequest_metadata_allOf'
    kafka_quotas_v1_ClientQuota_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/kafka-quotas/v1/client-quotas/cq-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/client-quota=cq-12345
    kafka_quotas_v1_ClientQuota_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/kafka_quotas_v1_ClientQuota_metadata_allOf'
    kafka_quotas_v1_ClientQuotaList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/kafka-quotas/v1/client-quotas
        last:
          example: https://api.confluent.cloud/kafka-quotas/v1/client-quotas?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/kafka-quotas/v1/client-quotas?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/kafka-quotas/v1/client-quotas?page_token=UvmDWOB1iwfAIBPj6EYb
    kafka_quotas_v1_ClientQuotaList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaList_metadata_allOf'
    kafka_quotas_v1_ClientQuotaList_data_inner_allOf:
      properties:
        spec:
          required:
          - cluster
          - display_name
          - environment
          - principals
          - throughput
          type: object
      required:
      - id
      - metadata
      - spec
      type: object
    kafka_quotas_v1_ClientQuotaList_data_inner:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.ClientQuota'
      - $ref: '#/components/schemas/kafka_quotas_v1_ClientQuotaList_data_inner_allOf'
    kafka_quotas_v1_ClientQuotaSpec_throughput:
      allOf:
      - $ref: '#/components/schemas/kafka-quotas.v1.Throughput'
      description: Throughput for the client quota.
      type: object
    kafka_quotas_v1_ClientQuotaSpec_cluster:
      allOf:
      - $ref: '#/components/schemas/EnvScopedObjectReference'
      description: |
        The ID of the Dedicated Kafka cluster where the client quota is applied.
      x-immutable: true
    sd_v1_Pipeline_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/sd/v1/pipelines/pipe-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/pipeline=pipe-12345
    sd_v1_Pipeline_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/sd_v1_Pipeline_metadata_allOf'
    sd_v1_PipelineList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/sd/v1/pipelines
        last:
          example: https://api.confluent.cloud/sd/v1/pipelines?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/sd/v1/pipelines?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/sd/v1/pipelines?page_token=UvmDWOB1iwfAIBPj6EYb
    sd_v1_PipelineList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/sd_v1_PipelineList_metadata_allOf'
    sd_v1_PipelineList_data_inner_allOf:
      properties:
        spec:
          required:
          - display_name
          - environment
          - kafka_cluster
          - ksql_cluster
          - stream_governance_cluster
          type: object
      required:
      - id
      - metadata
      - spec
      type: object
    sd_v1_PipelineList_data_inner:
      allOf:
      - $ref: '#/components/schemas/sd.v1.Pipeline'
      - $ref: '#/components/schemas/sd_v1_PipelineList_data_inner_allOf'
    sd_v1_PipelineSpec_source_code:
      allOf:
      - $ref: '#/components/schemas/sd.v1.SourceCodeObject'
      description: A map of source code format and statements that define this pipeline.
      type: object
    sd_v1_PipelineSpec_kafka_cluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      description: The kafka_cluster to which this belongs.
    sd_v1_PipelineSpec_ksql_cluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      description: The ksql_cluster associated with this object.
      x-immutable: true
    sd_v1_PipelineSpec_stream_governance_cluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      description: The stream_governance_cluster associated with this object.
      x-immutable: true
    byok_v1_Key_metadata_allOf:
      properties:
        self:
          example: https://api.confluent.cloud/byok/v1/keys/cck-12345
        resource_name:
          example: crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/key=cck-12345
    byok_v1_Key_metadata:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/byok_v1_Key_metadata_allOf'
    byok_v1_Key_key:
      description: |
        The cloud-specific key details.

        For AWS please provide the corresponding `key_arn`.
        For Azure please provide the corresponding `key_id`.
      discriminator:
        mapping:
          AwsKey: '#/components/schemas/byok.v1.AwsKey'
          AzureKey: '#/components/schemas/byok.v1.AzureKey'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/byok.v1.AwsKey'
      - $ref: '#/components/schemas/byok.v1.AzureKey'
      type: object
      x-immutable: true
    byok_v1_KeyList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/byok/v1/keys
        last:
          example: https://api.confluent.cloud/byok/v1/keys?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/byok/v1/keys?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/byok/v1/keys?page_token=UvmDWOB1iwfAIBPj6EYb
    byok_v1_KeyList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/byok_v1_KeyList_metadata_allOf'
    byok_v1_KeyList_data_inner:
      allOf:
      - $ref: '#/components/schemas/byok.v1.Key'
      - required:
        - id
        - key
        - metadata
        - provider
        - state
        type: object
    billing_v1_Cost_resource:
      allOf:
      - $ref: '#/components/schemas/billing.v1.Resource'
      description: The resource for a given object
    billing_v1_Resource_environment:
      allOf:
      - $ref: '#/components/schemas/billing.v1.Environment'
      description: The environment associated with this resource
      nullable: true
    billing_v1_CostList_metadata_allOf:
      properties:
        first:
          example: https://api.confluent.cloud/billing/v1/costs
        last:
          example: https://api.confluent.cloud/billing/v1/costs?page_token=bcAOehAY8F16YD84Z1wT
        prev:
          example: https://api.confluent.cloud/billing/v1/costs?page_token=YIXRY97wWYmwzrax4dld
        next:
          example: https://api.confluent.cloud/billing/v1/costs?page_token=UvmDWOB1iwfAIBPj6EYb
    billing_v1_CostList_metadata:
      allOf:
      - $ref: '#/components/schemas/ListMeta'
      - $ref: '#/components/schemas/billing_v1_CostList_metadata_allOf'
    billing_v1_CostList_data_inner:
      allOf:
      - $ref: '#/components/schemas/billing.v1.Cost'
      - required:
        - end_date
        - id
        - original_amount
        - start_date
        - unit
        type: object
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
    confluent-sts-access-token:
      description: Authenticate with Confluent API using this credentials (JSON Web
        Tokens) following OAuth 2.0.
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://api.confluent.cloud/sts/v1/oauth2/token
      type: oauth2
    oauth:
      description: Authenticate with OAuth 2.0. Currently this is only supported for
        partner APIs.
      flows:
        clientCredentials:
          scopes:
            partner:alter: enables partners to alter entitlements
            partner:create: enables partners to create entitlements and signup on
              behalf of customers
            partner:delete: enables partners to delete entitlements and organizations
            partner:describe: enables partners to read and list entitlements and organizations
          tokenUrl: /oauth2/token
      type: oauth2
x-tagGroups:
- name: Identity Access Management (v2)
  tags:
  - API Keys (iam/v2)
  - Users (iam/v2)
  - Service Accounts (iam/v2)
  - Invitations (iam/v2)
  - Role Bindings (iam/v2)
  - Identity Providers (iam/v2)
  - Jwks (iam/v2)
  - Identity Pools (iam/v2)
- name: Org API (v2)
  tags:
  - Environments (org/v2)
  - Organizations (org/v2)
- name: Notifications API (v1)
  tags:
  - Subscriptions (notifications/v1)
  - Integrations (notifications/v1)
  - Notification Types (notifications/v1)
- name: Cluster Mgmt for Kafka (v2)
  tags:
  - Clusters (cmk/v2)
- name: Cluster Mgmt for ksqlDB (v2)
  tags:
  - Clusters (ksqldbcm/v2)
- name: Connect API (v1)
  tags:
  - Connectors (v1)
  - Lifecycle (v1)
  - Status (v1)
  - Plugins (v1)
- name: Kafka API (v3)
  tags:
  - Cluster (v3)
  - Configs (v3)
  - ACL (v3)
  - Consumer Group (v3)
  - Partition (v3)
  - Topic (v3)
  - Records (v3)
  - Cluster Linking (v3)
- name: Service Quota API (v1)
  tags:
  - Applied Quotas (service-quota/v1)
  - Scopes (service-quota/v1)
- name: Partner API (v2)
  tags:
  - Entitlements (partner/v2)
  - Organizations (partner/v2)
  - Signup (partner/v2)
- name: Cluster Mgmt for Schema Registry (v2)
  tags:
  - Regions (srcm/v2)
  - Clusters (srcm/v2)
- name: Schema Registry API (v1)
  tags:
  - Compatibility (v1)
  - Config (v1)
  - Contexts (v1)
  - Modes (v1)
  - Schemas (v1)
  - Subjects (v1)
- name: Catalog API (v1)
  tags:
  - Entity (v1)
  - Search (v1)
  - Types (v1)
- name: Networking (v1)
  tags:
  - Networks (networking/v1)
  - Peerings (networking/v1)
  - Transit Gateway Attachments (networking/v1)
  - Private Link Accesses (networking/v1)
  - Network Link Services (networking/v1)
  - Network Link Endpoints (networking/v1)
  - Network Link Service Associations (networking/v1)
- name: Security Token Service (v1)
  tags:
  - OAuth Tokens (sts/v1)
- name: Kafka Quota (v1)
  tags:
  - Client Quotas (kafka-quotas/v1)
- name: Stream Designer API (v1)
  tags:
  - Pipelines (sd/v1)
- name: Bring Your Own Key (BYOK) Management (v1)
  tags:
  - Keys (byok/v1)
- name: Billing API (v1)
  tags:
  - Costs (billing/v1)
